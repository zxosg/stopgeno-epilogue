# file opened: Q:\Development\Dev-ZX\demo_cats\main.a80
   1  0000              ; Main demo code
   2  0000              ; Startdate: 25.06.2018
   3  0000
   4  0000              ; compiler definitions
   5  0000                      DEVICE ZXSPECTRUM128
   6  0000                      LABELSLIST "main.sym"
   7  0000
   8  0000              ; Build
   9  0000                      DEFINE KMachine 0           ; 0.. 128k, 1.. +3, 2.. Pentagon
  10  0000
  11  0000              ; kernel defines
  12  0000                      DEFINE  outfd               ; use OUT (FD),A instead of OUT (C),A. Faster due to PUSH BC,POP BC
  13  0000                      DEFINE  sinclair            ; sinclair = pages using #50 mask, undefined #10
  14  0000
  15  0000              ; define sample ay player type (nibble packed)
  16  0000                      DEFINE aypck
  17  0000
  18  0000              ; development variables
  19  0000              ;        DEFINE debug               ; special option to enable border and other debug features
  20  0000                      DEFINE debuglevel 0
  21  0000                      ;DEFINE _erasedebug
  22  0000
  23  0000              ; rotoid multab config
  24  0000                      DEFINE _multabBmp          ; multab expanded bitmap
  25  0000
  26  0000              ; enable or disable segment editor at startup
  27  0000              ;        DEFINE seg_ed
  28  0000              ;        DEFINE sce_ed
  29  0000
  30  0000              ; demo switches
  31  0000              ;        DEFINE vfadeTest
  32  0000              ;        DEFINE playIntro
  33  0000                      DEFINE d_scrplay          ; compile screenplay - _rt_scenes (save memory)
  34  0000                      DEFINE playmusic
  35  0000
  36  0000              ; load structures, macros, defines
  37  0000                      include "kernel/kern_def.a80"
# file opened: Q:\Development\Dev-ZX\demo_cats\kernel/kern_def.a80
   1+ 0000              ; kernel constants
   2+ 0000                      DEFINE KExeRun          1
   3+ 0000                      DEFINE KExeLoop         2
   4+ 0000                      DEFINE KExeWait         3
   5+ 0000                      DEFINE KExeSwap         4
   6+ 0000                      DEFINE KExeAt           5
   7+ 0000                      DEFINE KExeUntil        6
   8+ 0000                      DEFINE KExeAfter        7
   9+ 0000                      DEFINE KExeConfig       8
  10+ 0000                      DEFINE KExePeriodic     9
  11+ 0000                      DEFINE KExeScheduler    10     ; not implemented yet: qdos-like scheduler
  12+ 0000              ;        DEFINE KExcLoop         0      ; deprecated     = Restart
  13+ 0000              ;        DEFINE KExcNoLoop       #c9    ; deprecated     = Idle
  14+ 0000
  15+ 0000              ; supporting definitions
  16+ 0000                      DEFINE _scf     #37
  17+ 0000                      DEFINE _nop     #00
  18+ 0000                      DEFINE _halt    118
  19+ 0000                      DEFINE _ldae    #7b
  20+ 0000                      DEFINE _anda    #a7
  21+ 0000                      DEFINE _ande    #a3
  22+ 0000                      DEFINE _ore     #b3
  23+ 0000                      DEFINE _xore    #ab
  24+ 0000                      DEFINE _rra     #1f
  25+ 0000                      DEFINE _cpnn    #fe
  26+ 0000                      DEFINE _inca    #3c
  27+ 0000                      DEFINE _deca    #3d
  28+ 0000                      define _cpl     #2f
  29+ 0000                      define _xora    #af
  30+ 0000                      define _addan   #c6
  31+ 0000
  32+ 0000                      define  _inchl  #23
  33+ 0000                      define  _subhl  #96
  34+ 0000                      define  _ldan   #3e
  35+ 0000                      define  _ldahl  #7e
  36+ 0000                      define  _orhl   #b6
  37+ 0000                      define  _andhl  #a6
  38+ 0000                      define  _xorhl  #ae
  39+ 0000                      define  _addhl  #86
  40+ 0000                      define  _exdehl #eb
# file closed: Q:\Development\Dev-ZX\demo_cats\kernel/kern_def.a80
  38  0000                      include "kernel/kern_macros.a80"
# file opened: Q:\Development\Dev-ZX\demo_cats\kernel/kern_macros.a80
   1+ 0000              ; pentagon: Na Pentagonu 1024SL staci pouzit port #EFF7 a nastavit bit 2, pak se vypne rozirene strankovani a funguje jako 128KB i s moznosti zakazat strankovani.
   2+ 0000
   3+ 0000              ; osg 25.06.2018
   4+ 0000              ; kernel macros
   5+ 0000
   6+ 0000              ;--- page definitions
   7+ 0000                      IFDEF sinclair
   8+ 0000                            define o0 #50
   9+ 0000                            define o1 #51
  10+ 0000                            define o2 #52
  11+ 0000                            define o3 #53
  12+ 0000                            define o4 #54
  13+ 0000                            define o5 #55
  14+ 0000                            define o6 #56
  15+ 0000                            define o7 #57
  16+ 0000                      ELSE
  17+ 0000 ~                          define o0 #10
  18+ 0000 ~                          define o1 #11
  19+ 0000 ~                          define o2 #12
  20+ 0000 ~                          define o3 #13
  21+ 0000 ~                          define o4 #14
  22+ 0000 ~                          define o5 #15
  23+ 0000 ~                          define o6 #16
  24+ 0000 ~                          define o7 #17
  25+ 0000                      ENDIF
  26+ 0000
  27+ 0000                      MACRO   callix  rpc,rix
  28+ 0000 ~                     ld      ix,rix
  29+ 0000 ~                     call    rpc
  30+ 0000                      ENDM
  31+ 0000
  32+ 0000                      MACRO   callhl  rpc,rhl
  33+ 0000 ~                     ld      hl,rhl
  34+ 0000 ~                     call    rpc
  35+ 0000                      ENDM
  36+ 0000
  37+ 0000                      MACRO   callbc  rpc,rbc
  38+ 0000 ~                     ld      bc,rbc
  39+ 0000 ~                     call    rpc
  40+ 0000                      ENDM
  41+ 0000
  42+ 0000                      MACRO   xcall  rpc,rix
  43+ 0000 ~                     call   rpc
  44+ 0000 ~                     dw     rix
  45+ 0000                      ENDM
  46+ 0000
  47+ 0000                      MACRO   xget
  48+ 0000 ~                     pop    hl
  49+ 0000 ~                     pop    ix
  50+ 0000 ~                     inc    hl
  51+ 0000 ~                     inc    hl
  52+ 0000 ~                     push   hl
  53+ 0000                      ENDM
  54+ 0000
  55+ 0000                      MACRO   ld_hl_x index,str
  56+ 0000 ~                       ld   l,(index+str)
  57+ 0000 ~                       ld   h,(index+str+1)
  58+ 0000                      ENDM
  59+ 0000
  60+ 0000                      MACRO   ld_de_x index,str
  61+ 0000 ~                       ld   e,(index+str)
  62+ 0000 ~                       ld   d,(index+str+1)
  63+ 0000                      ENDM
  64+ 0000
  65+ 0000                      MACRO   ld_bc_x index,str
  66+ 0000 ~                       ld   c,(index+str)
  67+ 0000 ~                       ld   b,(index+str+1)
  68+ 0000                      ENDM
  69+ 0000
  70+ 0000                      MACRO   ld_x_bc index,str
  71+ 0000 ~                       ld   (index+str),c
  72+ 0000 ~                       ld   (index+str+1),b
  73+ 0000                      ENDM
  74+ 0000
  75+ 0000                      MACRO   ld_x_de index,str
  76+ 0000 ~                       ld   (index+str),e
  77+ 0000 ~                       ld   (index+str+1),d
  78+ 0000                      ENDM
  79+ 0000
  80+ 0000                      MACRO   ld_x_hl index,str
  81+ 0000 ~                       ld   (index+str),l
  82+ 0000 ~                       ld   (index+str+1),h
  83+ 0000                      ENDM
  84+ 0000
  85+ 0000                      MACRO   ld_ix_x index,str
  86+ 0000 ~                       ld   a,(index+str),xl,a
  87+ 0000 ~                       ld   a,(index+str+1),xh,a
  88+ 0000                      ENDM
  89+ 0000
  90+ 0000                      MACRO   ld_iy_x index,str
  91+ 0000 ~                       ld   a,(index+str),yl,a
  92+ 0000 ~                       ld   a,(index+str+1),yh,a
  93+ 0000                      ENDM
  94+ 0000
  95+ 0000                      MACRO   ld_x_ix index,str
  96+ 0000 ~                       ld   a,xl,(index+str),a
  97+ 0000 ~                       ld   a,xh,(index+str+1),a
  98+ 0000                      ENDM
  99+ 0000
 100+ 0000                      MACRO   ld_x_iy index,str
 101+ 0000 ~                       ld   a,yl,(index+str),a
 102+ 0000 ~                       ld   a,yh,(index+str+1),a
 103+ 0000                      ENDM
 104+ 0000
 105+ 0000                      MACRO   mmucpy from,to,len,pagesrc,pagedst
 106+ 0000 ~                      ld      hl,from
 107+ 0000 ~                      ld      de,to
 108+ 0000 ~                      ld      bc,len
 109+ 0000 ~                      ld      xl,pagesrc
 110+ 0000 ~                      ld      xh,pagedst
 111+ 0000 ~                      call    mmu.copy
 112+ 0000                      ENDM
 113+ 0000
 114+ 0000                      MACRO   HoldVramAfterInterrupt
 115+ 0000 ~                      ld    a,#f7
 116+ 0000 ~                      ld    (@imask),a
 117+ 0000 ~                      xor   a
 118+ 0000 ~                      ld    (@ivram),a
 119+ 0000                      ENDM
 120+ 0000
 121+ 0000                      MACRO   ReturnVramAfterInterrupt
 122+ 0000 ~                      ld    a,#ff
 123+ 0000 ~                      ld    (@imask),a
 124+ 0000 ~                      xor   a
 125+ 0000 ~                      ld    (@ivram),a
 126+ 0000                      ENDM
 127+ 0000
 128+ 0000                      MACRO   WaitF _fram                       ; input is number of frames
 129+ 0000 ~                      call  wait4FrameInStack
 130+ 0000 ~                      dw    _fram
 131+ 0000                      ENDM
 132+ 0000
 133+ 0000 ~            /*
 134+ 0000 ~                    MACRO   WaitF _fram                       ; input is number of PAL frames @ 25Hz (Audacity)
 135+ 0000 ~                      ld    bc,_fram*2                        ; thus x2 to get 50Hz
 136+ 0000 ~                      call  wait4Frame
 137+ 0000 ~                    ENDM
 138+ 0000 ~            */
 139+ 0000                      MACRO   outp value1,value2
 140+ 0000 ~                      IFDEF   debug
 141+ 0000 ~                       ld     a,value1
 142+ 0000 ~                      ELSE
 143+ 0000 ~                       ld     a,value2
 144+ 0000 ~                      ENDIF
 145+ 0000 ~                      out    (#fe),a
 146+ 0000                      ENDM
 147+ 0000
 148+ 0000                      MACRO   border _b
 149+ 0000 ~                      ld a,_b
 149+ 0000 ~              out (#fe),a
 150+ 0000                      ENDM
 151+ 0000
 152+ 0000                      MACRO debug_border _value
 153+ 0000 ~                    ifdef debug
 154+ 0000 ~                      push af
 155+ 0000 ~                      ld  a,_value
 156+ 0000 ~                      out (#fe),a
 157+ 0000 ~                      pop af
 158+ 0000 ~                    endif
 159+ 0000                      ENDM
 160+ 0000
 161+ 0000                      MACRO debug_border_init
 162+ 0000 ~                    ifdef debug
 163+ 0000 ~                      push af
 164+ 0000 ~                      xor  a
 165+ 0000 ~                      ld   (dbg.border),a
 166+ 0000 ~                      out  (#fe),a
 167+ 0000 ~                      pop  af
 168+ 0000 ~                    endif
 169+ 0000                      ENDM
 170+ 0000
 171+ 0000                      MACRO debug_border_inc
 172+ 0000 ~                    ifdef debug
 173+ 0000 ~                      push af
 174+ 0000 ~                      ld   a,(dbg.border)
 175+ 0000 ~                      out  (#fe),a
 176+ 0000 ~                      inc  a
 177+ 0000 ~                      and  7
 178+ 0000 ~                      ld   (dbg.border),a
 179+ 0000 ~                      pop  af
 180+ 0000 ~                    endif
 181+ 0000                      ENDM
 182+ 0000
 183+ 0000                      MACRO debug_border_a
 184+ 0000 ~                    ifdef debug
 185+ 0000 ~                      out  (#fe),a
 186+ 0000 ~                    endif
 187+ 0000                      ENDM
 188+ 0000
 189+ 0000                      MACRO debug_border_halt _val
 190+ 0000 ~                    ifdef debug
 191+ 0000 ~                      push bc,af
 192+ 0000 ~            1         ld   a,_val
 192+ 0000 ~              out  (#fe),a
 193+ 0000 ~                      xor  a
 193+ 0000 ~              out  (#fe),a
 194+ 0000 ~                      ld   bc,#7ffe
 195+ 0000 ~                      in   a,(c)
 196+ 0000 ~                      rra
 197+ 0000 ~                      jr   c,1B
 198+ 0000 ~                      pop  af,bc
 199+ 0000 ~                    endif
 200+ 0000                      ENDM
 201+ 0000
 202+ 0000                      MACRO debug_pause _value
 203+ 0000 ~                    ifdef debug
 204+ 0000 ~                      push   hl,bc
 205+ 0000 ~                      ld     bc,_value
 206+ 0000 ~            2         ld     l,0
 207+ 0000 ~            1         dec    l
 208+ 0000 ~                      jr     nz,1B
 209+ 0000 ~                      cpi
 210+ 0000 ~                      jp     pe,2B
 211+ 0000 ~                      pop    bc,hl
 212+ 0000 ~                    endif
 213+ 0000                      ENDM
 214+ 0000
 215+ 0000              ; long call to different page. Returns to source page and keeps regs and flags
 216+ 0000                      MACRO   callpg _address, _page
 217+ 0000 ~                      call    longCall
 218+ 0000 ~                      db      _page
 219+ 0000 ~                      dw      _address
 220+ 0000                      ENDM
 221+ 0000
 222+ 0000                      MACRO   page_am_old
 223+ 0000 ~                      IFDEF outfd
 224+ 0000 ~                          out    (#fd),a
 225+ 0000 ~                      ELSE
 226+ 0000 ~                          push    bc
 227+ 0000 ~                          ld      bc,#7ffd
 228+ 0000 ~                          out     (c),a
 229+ 0000 ~                          pop     bc
 230+ 0000 ~                      ENDIF
 231+ 0000                      ENDM
 232+ 0000
 233+ 0000                      MACRO   page_am
 234+ 0000 ~                     out    (#fd),a
 235+ 0000                      ENDM
 236+ 0000
 237+ 0000                      MACRO   page_a
 238+ 0000 ~                     ld      (@page),a
 239+ 0000 ~                     page_am
 240+ 0000                      ENDM
 241+ 0000
 242+ 0000                      MACRO   page_c             ; call kern_exe page routine
 243+ 0000 ~                     call   @apage
 244+ 0000                      ENDM
 245+ 0000
 246+ 0000                      MACRO   page_ar pg
 247+ 0000 ~                    ld      a,pg
 248+ 0000 ~                    page_a
 249+ 0000                      ENDM
 250+ 0000
 251+ 0000                      MACRO   setpage pg
 252+ 0000 ~                     page_ar pg
 253+ 0000                      ENDM
 254+ 0000
 255+ 0000                      MACRO   push_all
 256+ 0000 ~                      push  af,bc,de,hl,ix,iy
 257+ 0000 ~                      exx
 258+ 0000 ~                      ex    af,af
 259+ 0000 ~                      push  af,bc,de,hl
 260+ 0000                      ENDM
 261+ 0000
 262+ 0000                      MACRO   pop_all
 263+ 0000 ~                      pop    hl,de,bc,af
 264+ 0000 ~                      exx
 265+ 0000 ~                      ex     af,af
 266+ 0000 ~                      pop    iy,ix,hl,de,bc,af
 267+ 0000                      ENDM
 268+ 0000
 269+ 0000              ;--------------------------------------
 270+ 0000                      STRUCT  SExeRun
 271+ 0000 ~            cmd:    db      KExeRun
 272+ 0000 ~            pc:     dw      0
 273+ 0000 ~            ix:     dw      0
 274+ 0000                      ENDS
 275+ 0000
 276+ 0000              ; executes task, sets IX as parametter
 277+ 0000                      MACRO  ExeRun regpc,regix
 278+ 0000 ~                    db     KExeRun                ; executor command number
 279+ 0000 ~                    dw     regpc,regix
 280+ 0000                      ENDM
 281+ 0000
 282+ 0000                      MACRO  ExeZ80start _rix
 283+ 0000 ~                      db     KExeRun                ; executor command number
 284+ 0000 ~                      dw     $+4,_rix
 285+ 0000 ~
 286+ 0000 ~                      LUA ALLPASS
 287+ 0000 ~                       zstart=sj.current_address
 288+ 0000 ~                      ENDLUA
 289+ 0000                      ENDM
 290+ 0000
 291+ 0000                      MACRO  ExeZ80end
 292+ 0000 ~                      pop    hl,iy
 293+ 0000 ~
 294+ 0000 ~                        LUA ALLPASS
 295+ 0000 ~                         zlen=sj.current_address-zstart
 296+ 0000 ~                         sj.insert_define("zlen", zlen)
 297+ 0000 ~                        ENDLUA
 298+ 0000 ~
 299+ 0000 ~                      ld     bc,8+zlen
 300+ 0000 ~                      add    iy,bc
 301+ 0000 ~                      jp     execmd.lloop
 302+ 0000 ~                      undefine zlen
 303+ 0000                      ENDM
 304+ 0000
 305+ 0000              ;--------------------------------------
 306+ 0000              ; executes task with periodicity
 307+ 0000              ; prio is 16bit value. It is periodically accumulated. Once high byte is greater than 0
 308+ 0000              ; task is executed and accumulated value is zeroed.
 309+ 0000                      STRUCT  SExePeriodic
 310+ 0000 ~            cmd:    db      KExePeriodic
 311+ 0000 ~            pc:     dw      0
 312+ 0000 ~            ix:     dw      0
 313+ 0000 ~            iprio:  dw      0
 314+ 0000 ~            cprio:  dw      0
 315+ 0000                      ENDS
 316+ 0000
 317+ 0000                      MACRO   ExePeriodic _pc,_ix,_prio
 318+ 0000 ~                    db      KExePeriodic
 319+ 0000 ~                    dw      _pc,_ix,_prio,0
 320+ 0000                      ENDM
 321+ 0000
 322+ 0000              ;--------------------------------------
 323+ 0000              ; execute task as QL scheduler.
 324+ 0000              ; task priority equals to percentage of total sum of all tasks priorities
 325+ 0000                      STRUCT  SExeScheduler
 326+ 0000 ~            cmd:    db      KExeScheduler
 327+ 0000 ~            pc:     dw      0
 328+ 0000 ~            ix:     dw      0
 329+ 0000 ~            iprio:  db      0
 330+ 0000 ~            cprio:  db      0
 331+ 0000                      ENDS
 332+ 0000
 333+ 0000                      MACRO   ExeScheduler _pc,_ix,_prio
 334+ 0000 ~                    db      KExeScheduler
 335+ 0000 ~                    dw      _pc,_ix
 336+ 0000 ~                    db      _prio
 337+ 0000 ~                    db      _prio
 338+ 0000                      ENDM
 339+ 0000
 340+ 0000              ;--------------------------------------
 341+ 0000              ; executes task with looping, call pc1, call pc2, sets IX as parametter
 342+ 0000                      STRUCT  SExeLoop
 343+ 0000 ~            cmd:    db      KExeLoop        ; executor command number
 344+ 0000 ~            pulse:  db      0               ; len od pulse (number of frames to call routine)
 345+ 0000 ~            gap:    db      0               ; len of gap (number of frames to wait before loop)
 346+ 0000 ~            state:  db      0               ; current state
 347+ 0000 ~            ctr:    db      0               ; current counter
 348+ 0000 ~            pcg:    dw      0               ; address of called routine when gap
 349+ 0000 ~            pcp:    dw      0               ; address of called routine when pulse
 350+ 0000 ~            ix:     dw      0               ; pointer to data
 351+ 0000                      ENDS
 352+ 0000
 353+ 0000                      MACRO   ExeLoop regpcp,regpcg,regix,pulse,gap,state
 354+ 0000 ~                    db      KExeLoop
 355+ 0000 ~                    db      pulse,gap,state,1
 356+ 0000 ~                    dw      regpcg,regpcp,regix
 357+ 0000                      ENDM
 358+ 0000
 359+ 0000              ; alternate
 360+ 0000                      MACRO   ExeSwapPC regpcp,regpcg,regix,pulse,gap,state
 361+ 0000 ~                      ExeLoop regpcp,regpcg,regix,pulse,gap,state
 362+ 0000                      ENDM
 363+ 0000
 364+ 0000                      MACRO   ExeSwapPC2 regpcp,regpcg,regix,pulse,gap,state,counter          ; same as above, yet current_counter has custom value
 365+ 0000 ~                    db      KExeLoop
 366+ 0000 ~                    db      pulse,gap,state,counter
 367+ 0000 ~                    dw      regpcg,regpcp,regix
 368+ 0000                      ENDM
 369+ 0000
 370+ 0000
 371+ 0000              ;--------------------------------------
 372+ 0000              ; executes task with looping, call pc, sets IX1 and IX2 as parametter
 373+ 0000                      STRUCT  SExeSwap
 374+ 0000 ~            cmd:    db      KExeSwap        ; executor command number
 375+ 0000 ~            pulse:  db      0               ; len od pulse (number of frames to call routine)
 376+ 0000 ~            gap:    db      0               ; len of gap (number of frames to wait before loop)
 377+ 0000 ~            state:  db      0               ; current state
 378+ 0000 ~            ctr:    db      0               ; current counter
 379+ 0000 ~            pc:     dw      0               ; address of called routine
 380+ 0000 ~            ixp:    dw      0               ; pointer to data when pulse
 381+ 0000 ~            ixg:    dw      0               ; pointer to data when gap
 382+ 0000                      ENDS
 383+ 0000
 384+ 0000                      MACRO   ExeSwap regpc,regixp,regixg,pulse,gap,state
 385+ 0000 ~                    db      KExeSwap
 386+ 0000 ~                    db      pulse,gap,state,1
 387+ 0000 ~                    dw      regpc,regixp,regixg
 388+ 0000                      ENDM
 389+ 0000
 390+ 0000              ; alternate
 391+ 0000                      MACRO   ExeSwapIX regpc,regixp,regixg,pulse,gap,state
 392+ 0000 ~                      ExeSwap regpc,regixp,regixg,pulse,gap,state
 393+ 0000                      ENDM
 394+ 0000
 395+ 0000                      MACRO   ExeSwapIX2 regpc,regixp,regixg,pulse,gap,state,counter          ; same as above, yet current_counter has custom value
 396+ 0000 ~                    db      KExeSwap
 397+ 0000 ~                    db      pulse,gap,state,counter
 398+ 0000 ~                    dw      regpc,regixp,regixg
 399+ 0000                      ENDM
 400+ 0000
 401+ 0000
 402+ 0000              ;--------------------------------------
 403+ 0000              ; executes task with delay of #wait frames
 404+ 0000                      STRUCT  SExeWait
 405+ 0000 ~            cmd:    db      KExeWait
 406+ 0000 ~            wait:   dw      0
 407+ 0000 ~            ctr:    dw      0               ; counter of frames (copied from wait at init)
 408+ 0000 ~            pc:     dw      0
 409+ 0000 ~            ix:     dw      0
 410+ 0000                      ENDS
 411+ 0000
 412+ 0000                      MACRO   ExeWait regpc,regix,wait
 413+ 0000 ~                    db      KExeWait
 414+ 0000 ~                    dw      wait,0,regpc,regix
 415+ 0000                      ENDM
 416+ 0000
 417+ 0000              ;--------------------------------------
 418+ 0000              ; executes task AT (only once), Unitl (up to frame), After (from frame and on). Time is specified time from (frames)
 419+ 0000                      STRUCT  SExeFrame
 420+ 0000 ~            cmd:    db      0
 421+ 0000 ~            fram:   dw      0
 422+ 0000 ~            pc:     dw      0
 423+ 0000 ~            ix:     dw      0
 424+ 0000                      ENDS
 425+ 0000
 426+ 0000              ; execute at axact frame count
 427+ 0000                      MACRO   ExeAt regpc,regix,fram
 428+ 0000 ~                    db      KExeAt
 429+ 0000 ~                    dw      fram,regpc,regix
 430+ 0000                      ENDM
 431+ 0000
 432+ 0000              ; execute until some frame count occurs
 433+ 0000                      MACRO   ExeUntil regpc,regix,fram
 434+ 0000 ~                    db      KExeUntil
 435+ 0000 ~                    dw      fram,regpc,regix
 436+ 0000                      ENDM
 437+ 0000
 438+ 0000              ; execute after some frame count occurs
 439+ 0000                      MACRO   ExeAfter regpc,regix,fram
 440+ 0000 ~                    db      KExeAfter
 441+ 0000 ~                    dw      fram,regpc,regix
 442+ 0000                      ENDM
 443+ 0000
 444+ 0000              ; does nothing, just waits defined number of frames
 445+ 0000                      MACRO  Wait     len
 446+ 0000 ~                    FrameStart      len,0
 447+ 0000 ~                    ExeRun          dummy,0
 448+ 0000 ~                    FrameEnd
 449+ 0000                      ENDM
 450+ 0000
 451+ 0000              ; call user routine in main loop, interrupt just waits defined number of frames
 452+ 0000 ~            /*
 453+ 0000 ~                    MACRO  MCall     len,addr
 454+ 0000 ~                     FrameStart      len,addr
 455+ 0000 ~                     ExeRun          dummy,0
 456+ 0000 ~                     FrameEnd
 457+ 0000 ~                    ENDM
 458+ 0000 ~            */
 459+ 0000                      MACRO  MCall     addr
 460+ 0000 ~                     FrameStart      #ffff,addr         ; set length of frame
 461+ 0000 ~                     ExeRun          mcall.ret, 1       ; when routine at ADDR is completed, 1 overwrites #ffff and sequence ends.
 462+ 0000 ~                     FrameEnd
 463+ 0000                      ENDM
 464+ 0000
 465+ 0000              ; new timeslot with duration in frames
 466+ 0000                      MACRO  FrameStart len,addr
 467+ 0000 ~                     dw len, addr
 468+ 0000                      ENDM
 469+ 0000
 470+ 0000                      MACRO  Frame len,addr
 471+ 0000 ~                      FrameStart len,addr
 472+ 0000                      ENDM
 473+ 0000
 474+ 0000              ; end of slot, executor reloads table from position "task_start"
 475+ 0000                      MACRO  FrameEnd
 476+ 0000 ~                     db     0                ; executor command number
 477+ 0000                      ENDM
 478+ 0000
 479+ 0000                      MACRO  EndF
 480+ 0000 ~                      FrameEnd
 481+ 0000                      ENDM
 482+ 0000
 483+ 0000              ; this is end-construct that enables to exit from frame loop once desired frame count occurs
 484+ 0000                      MACRO  EndAtFrame _exitframe
 485+ 0000 ~                      ExeAt mcall.saveFrames, 1, _exitframe
 486+ 0000 ~                      FrameEnd
 487+ 0000                      ENDM
 488+ 0000
 489+ 0000              ; end command: loop from start
 490+ 0000                      MACRO  Restart
 491+ 0000 ~                    dw     0,2
 492+ 0000                      ENDM
 493+ 0000
 494+ 0000              ; end command: do nothing
 495+ 0000                      MACRO  Idle
 496+ 0000 ~                    dw     0,1
 497+ 0000                      ENDM
 498+ 0000
 499+ 0000              ; do nothing, wait until specific frame
 500+ 0000                      MACRO WaitUntil  frms
 501+ 0000 ~                    FrameStart       $ffff,0
 502+ 0000 ~                     ExeAfter        execmd.service, .jumpHere,frms
 503+ 0000 ~                    EndF
 504+ 0000 ~            .jumpHere:
 505+ 0000                      ENDM
 506+ 0000
 507+ 0000              ; config
 508+ 0000                      MACRO Config
 509+ 0000 ~                    FrameStart  1,0
 510+ 0000 ~                    db          KExeConfig
 511+ 0000                      ENDM
 512+ 0000
 513+ 0000                      MACRO PatchWord addr,data
 514+ 0000 ~                    db    1
 515+ 0000 ~                    dw    addr
 516+ 0000 ~                    dw    data
 517+ 0000                      ENDM
 518+ 0000
 519+ 0000                      MACRO PatchByte addr,data
 520+ 0000 ~                    db    2
 521+ 0000 ~                    dw    addr
 522+ 0000 ~                    db    data
 523+ 0000                      ENDM
 524+ 0000
 525+ 0000                      MACRO IntList   addr
 526+ 0000 ~                    PatchWord imrut.exl+1 ,addr
 527+ 0000                      ENDM
 528+ 0000
 529+ 0000                      MACRO AsyncCall addr
 530+ 0000 ~                    PatchWord mainloop.int+1 ,addr
 531+ 0000                      ENDM
 532+ 0000
 533+ 0000                      MACRO MainCall  addr
 534+ 0000 ~                    PatchWord mainloop.rew+1, addr
 535+ 0000                      ENDM
 536+ 0000
 537+ 0000                      MACRO HaltEnable
 538+ 0000 ~                    PatchByte mainloop.hlt,_halt
 539+ 0000                      ENDM
 540+ 0000
 541+ 0000                      MACRO HaltDisable
 542+ 0000 ~                    PatchByte mainloop.hlt,_nop
 543+ 0000                      ENDM
 544+ 0000
 545+ 0000                      MACRO AsyncEnable
 546+ 0000 ~                    PatchByte mainloop.mod ,_anda
 547+ 0000 ~                    PatchByte imrut.mod+1  ,_anda
 548+ 0000                      ENDM
 549+ 0000
 550+ 0000                      MACRO AsyncDisable
 551+ 0000 ~                    PatchByte mainloop.mod ,_scf
 552+ 0000 ~                    PatchByte imrut.mod+1  ,_scf
 553+ 0000                      ENDM
 554+ 0000
 555+ 0000                      MACRO InitEnable
 556+ 0000 ~                    PatchByte ExeFrameInit, _scf
 557+ 0000                      ENDM
 558+ 0000
 559+ 0000                      MACRO InitDisable
 560+ 0000 ~                    PatchByte ExeFrameInit, _anda
 561+ 0000                      ENDM
 562+ 0000
 563+ 0000                      MACRO EndC                   ; kern end config
 564+ 0000 ~                    db    0
 565+ 0000                      ENDM
 566+ 0000
 567+ 0000              ;------------------------------------
 568+ 0000
 569+ 0000                      MACRO mEnd                   ; exeptr end mark
 570+ 0000 ~                    dw    0
 571+ 0000                      ENDM
 572+ 0000
 573+ 0000                      MACRO    haltCount _wait
 574+ 0000 ~                    dw       #07,_wait
 575+ 0000                      ENDM
 576+ 0000
 577+ 0000                      MACRO    retUntil _wait
 578+ 0000 ~                    dw       #01,_wait
 579+ 0000                      ENDM
 580+ 0000
 581+ 0000                      MACRO    retFrom _wait
 582+ 0000 ~                    dw       #08,_wait
 583+ 0000                      ENDM
 584+ 0000
 585+ 0000                      MACRO    gotoUntil _label, _time
 586+ 0000 ~                      dw     #04, _label
 587+ 0000 ~                      db     _time
 588+ 0000                      ENDM
 589+ 0000              ; exelst
 590+ 0000                      MACRO    gotoFrom  _label, _time
 591+ 0000 ~                      dw     #05, _label
 592+ 0000 ~                      db     _time
 593+ 0000                      ENDM
 594+ 0000
 595+ 0000                      MACRO    gotoWhile  _label, _time
 596+ 0000 ~                     gotoFrom _label, _time
 597+ 0000                      ENDM
 598+ 0000
 599+ 0000              ; exelst
 600+ 0000                      MACRO    runTimed _exe, _ixptr, _tfrom, _duration
 601+ 0000 ~                    dw       #03, _exe, _ixptr
 602+ 0000 ~                    db       _tfrom, _duration
 603+ 0000                      ENDM
 604+ 0000
 605+ 0000                      MACRO    runTimedCD _exe, _ixptr, _duration, _tfrom
 606+ 0000 ~                    dw       #03, _exe, _ixptr
 607+ 0000 ~                    db       _tfrom, _duration
 608+ 0000                      ENDM
 609+ 0000
 610+ 0000              ; exelst
 611+ 0000                      MACRO    runAtFrame _exe, _frame
 612+ 0000 ~                    dw       #06,_exe,_frame
 613+ 0000                      ENDM
 614+ 0000
 615+ 0000              ; exelst
 616+ 0000                      MACRO    goto _label
 617+ 0000 ~                    dw       #02,_label
 618+ 0000                      ENDM
 619+ 0000
 620+ 0000              ; exelst
 621+ 0000                      MACRO    retUntilFrame _frame
 622+ 0000 ~                    dw       #09, _frame
 623+ 0000                      ENDM
 624+ 0000
 625+ 0000              ; exelst
 626+ 0000                      MACRO    run _exe, _ixptr
 627+ 0000 ~                    dw       _exe, _ixptr
 628+ 0000                      ENDM
 629+ 0000
 630+ 0000
 631+ 0000              ; Frame-EndF construct
 632+ 0000                      MACRO FrameAt _frame, _len, _addr
 633+ 0000 ~                    FrameStart #ffff,_addr
 634+ 0000 ~                     ExeAt     mcall.ret, 1, _frame
 635+ 0000 ~                    FrameEnd
 636+ 0000 ~                    FrameStart _len, _addr
 637+ 0000                      ENDM
 638+ 0000
# file closed: Q:\Development\Dev-ZX\demo_cats\kernel/kern_macros.a80
  39  0000              ;-- lib defines
  40  0000                      include "libs/keys_def.a80"
# file opened: Q:\Development\Dev-ZX\demo_cats\libs/keys_def.a80
   1+ 0000              ;-- 8/3/2018 10:24:20 PM
   2+ 0000              ; keyboard scan routine
   3+ 0000
   4+ 0000                      STRUCT kbd
   5+ 0000 ~            port:   db     0       ; kbd hi-address port (254,253,251,247,239,223,191,127)
   6+ 0000 ~            dbnc:   db     0       ; 0-read as is, 1=debounce (do not autorepeat)
   7+ 0000 ~            r0:     dw     0       ; address of routine to call when key is pressed
   8+ 0000 ~            r1:     dw     0
   9+ 0000 ~            r2:     dw     0
  10+ 0000 ~            r3:     dw     0
  11+ 0000 ~            r4:     dw     0
  12+ 0000 ~            prev:   db     0
  13+ 0000                      ENDS
  14+ 0000 ~            /*
  15+ 0000 ~                  0xfefe  SHIFT, Z, X, C, V            0xeffe  0, 9, 8, 7, 6
  16+ 0000 ~                  0xfdfe  A, S, D, F, G                0xdffe  P, O, I, U, Y
  17+ 0000 ~                  0xfbfe  Q, W, E, R, T                0xbffe  ENTER, L, K, J, H
  18+ 0000 ~                  0xf7fe  1, 2, 3, 4, 5                0x7ffe  SPACE, SYM SHFT, M, N, B
  19+ 0000 ~            */
# file closed: Q:\Development\Dev-ZX\demo_cats\libs/keys_def.a80
  41  0000                      include "libs/editor_def.a80"
# file opened: Q:\Development\Dev-ZX\demo_cats\libs/editor_def.a80
   1+ 0000              ; ---- 8/3/2018 10:31:09 PM
   2+ 0000              ; ---- editor structures
   3+ 0000
   4+ 0000                      STRUCT  edit
   5+ 0000 ~            items:  db      0          ; number of items for editing
   6+ 0000 ~            aton:   db      0          ; attr color cursor on
   7+ 0000 ~            atln:   db      0          ; attr color line
   8+ 0000 ~            defs:   dw      0          ; pointer to definitions (db AT_x, AY_y, dw: addr_manipulated)
   9+ 0000 ~                                       ; AT_y - 7th bit=1 indicates that data poits to word, 0=byte
  10+ 0000 ~                                       ; AT_y - 6th bit=1 data are read only
  11+ 0000 ~            stor:   dw      0          ; memory to store data when saved
  12+ 0000 ~            text:   dw      0          ; pointer to text (dw: AT, text, 0 terminated)
  13+ 0000 ~            save:   dw      0          ; pointer to routine when fire is triggered
  14+ 0000 ~            optn:   db      %00011001  ; bit 0-4: debounce mask (up down allowed). 1=debounce (do not autorepeat)
  15+ 0000 ~                                       ; bit 6 - swap left/right with up/down (0=horizontal / 1=vertical menu)
  16+ 0000 ~                                       ; bit 7=1 - draw into 2 vrams  (or #80 to vram address) - planned
  17+ 0000 ~            usrrun: dw      dummy      ; call to user function
  18+ 0000 ~            usrini: dw      dummy      ; call to user init function
  19+ 0000 ~            step:   db      0
  20+ 0000 ~            page:   db      0          ; memory page for edited items
  21+ 0000 ~            curr:   db      0          ; current position
  22+ 0000 ~
  23+ 0000                      ENDS
  24+ 0000
# file closed: Q:\Development\Dev-ZX\demo_cats\libs/editor_def.a80
  42  0000                      include "libs/osg_lualib.a80"
# file opened: Q:\Development\Dev-ZX\demo_cats\libs/osg_lualib.a80
   1+ 0000                      MACRO ad_XY _px,_py
   2+ 0000 ~            ad      = (_py and %00000111) * 256 + (_py and %11000000) * 32 + (_py and %00111000) * 4 + (_px>>3)
   3+ 0000                      ENDM
   4+ 0000
   5+ 0000                      MACRO dw0_XY _px,_py
   6+ 0000 ~                    ad_XY _px,_py
   7+ 0000 ~                    dw    ad+#4000
   8+ 0000                      ENDM
   9+ 0000
  10+ 0000                      MACRO dw1_XY _px,_py
  11+ 0000 ~                    ad_XY _px,_py
  12+ 0000 ~                    dw    ad+#c000
  13+ 0000                      ENDM
  14+ 0000
  15+ 0000                      MACRO ad_CY _px,_py
  16+ 0000 ~                    ad_XY _px<<3,_py
  17+ 0000                      ENDM
  18+ 0000
  19+ 0000                      MACRO dw0_CY _px,_py
  20+ 0000 ~                    ad_XY _px<<3,_py
  21+ 0000 ~                    dw    ad+#4000
  22+ 0000                      ENDM
  23+ 0000
  24+ 0000                      MACRO dw1_CY _px,_py
  25+ 0000 ~                    ad_XY _px<<3,_py
  26+ 0000 ~                    dw    ad+#c000
  27+ 0000                      ENDM
# file closed: Q:\Development\Dev-ZX\demo_cats\libs/osg_lualib.a80
  43  0000                      include "libs/fzx_drv_def.a80"
# file opened: Q:\Development\Dev-ZX\demo_cats\libs/fzx_drv_def.a80
   1+ 0000                          DEFINE  KFzxTab    6
   2+ 0000                          DEFINE  KFzxAt     22
   3+ 0000                          DEFINE  KFzxPos    21
   4+ 0000                          DEFINE  KFzxCR     13
   5+ 0000                          DEFINE  KFzxScrl   10
   6+ 0000                          DEFINE  KFzxMargin 7
   7+ 0000                          DEFINE  KFzxFont   1
   8+ 0000                          DEFINE  KFzxSpcy   2
   9+ 0000                          DEFINE  KFzxExe    3
  10+ 0000                          DEFINE  KFzxExe16  4
  11+ 0000                          DEFINE  KFzxLGap   5
# file closed: Q:\Development\Dev-ZX\demo_cats\libs/fzx_drv_def.a80
  44  0000              ;-- demo effect defines
  45  0000                      include "libs/egl_def.a80"
# file opened: Q:\Development\Dev-ZX\demo_cats\libs/egl_def.a80
   1+ 0000              ; demo definition header
   2+ 0000              ; put here all definitions tha must be at the beginning due to compiler
   3+ 0000
   4+ 0000              ; ----------scroll----------
   5+ 0000              scroll_addr:    EQU    #5059
   6+ 0000              scroll_width:   EQU    19
   7+ 0000              scroll_height:  EQU    8
   8+ 0000              ; scroll_font:    EQU    60*256
   9+ 0000
  10+ 0000                            STRUCT  scrl
  11+ 0000 ~            text:          dw      0
  12+ 0000 ~            addr:          dw      0
  13+ 0000 ~            wdth:          db      0
  14+ 0000 ~            font:          dw      0
  15+ 0000 ~            txt:           dw      0
  16+ 0000 ~            pos:           db      0
  17+ 0000 ~            cbuf:          ds      8
  18+ 0000                            ENDS
  19+ 0000
  20+ 0000              KLineModePut:    EQU    #7b               ; ld a,e
  21+ 0000              KLineModeAnd:    EQU    #a3               ; and e
  22+ 0000              KLineModeOr:     EQU    #b3               ; or e
  23+ 0000              KLineModeXor:    EQU    #ab               ; xor e
  24+ 0000              KLineDirUp:      EQU    0
  25+ 0000              KLineDirDown:    EQU    1
  26+ 0000              KLineDirLeft:    EQU    0
  27+ 0000              KLineDirRight:   EQU    1
  28+ 0000              KLineAttrUp:     EQU    2                 ; bit 1 set
  29+ 0000              KLineAttrDown:   EQU    3
  30+ 0000              KLineAttrLeft:   EQU    2                 ; bit 1 set
  31+ 0000              KLineAttrRight:  EQU    3
  32+ 0000              KLineVramOff:    EQU    #80
  33+ 0000              ;-- egl_funscr
  34+ 0000              KScrollOr:       EQU    #b1               ; or c
  35+ 0000              KScrollAnd:      EQU    #a1               ; and c
  36+ 0000              KScrollXor:      EQU    #a9               ; xor c
  37+ 0000              KScrollNop:      EQU    #00               ; nop
  38+ 0000              KScrollPut:      EQU    #79
  39+ 0000
  40+ 0000                            STRUCT lineh
  41+ 0000 ~            atxy:          dw     0                 ;x position (char)
  42+ 0000 ~            wdth:          db     0
  43+ 0000 ~            heig:          db     0
  44+ 0000 ~            val:           db     0                 ; value to be manipulated with vram
  45+ 0000 ~            aox:           db     0                 ; instruction OPC (and,or,xor)
  46+ 0000 ~            dir:           db     0                 ; 0-vram up, 1-vram down
  47+ 0000 ~            page:          db     0                 ; 0 | #80 to alter #40 or #c0 addressing, 7-bits for paging
  48+ 0000 ~            vram:          dw     0
  49+ 0000 ~            hght:          db     0                 ; height counter
  50+ 0000                            ENDS
  51+ 0000
  52+ 0000                            STRUCT linev
  53+ 0000 ~            atxy:          dw     0                 ; xy in pixels
  54+ 0000 ~            widt:          db     0                 ; width of rectangle
  55+ 0000 ~            hght:          db     0                 ; height of rectangle
  56+ 0000 ~            val:           db     0                 ; value to be manipulated with vram
  57+ 0000 ~            aox:           db     0                 ; instruction OPC (and,or,xor)
  58+ 0000 ~            dir:           db     0                 ; 0-left, 1-right
  59+ 0000 ~            page:          db     0                 ; 0 | #80 to alter #40 or #c0 addressing, 7-bits for paging
  60+ 0000 ~            vram:          dw     0
  61+ 0000 ~            wdth:          db     0                 ; width counter
  62+ 0000                            ENDS
  63+ 0000
  64+ 0000                            STRUCT  clatt
  65+ 0000 ~            posy:          db     0                 ; char y position of cleared rows
  66+ 0000 ~            hght:          db     0                 ; number of rows to clear
  67+ 0000 ~            data:          dw     0                 ; attribute data, bit 7=1 = end of data
  68+ 0000 ~            mode:          db     0
  69+ 0000 ~            ; mode: bit 0=0 - no border,  =1 - border as paper
  70+ 0000 ~            ;       bit 1=0 - no repeat,  =1 - repeat sequence
  71+ 0000 ~            ;       bit 2=0 - no page,    =1 - page out memory
  72+ 0000 ~            ;       bit 3=0 - no flip vrm =1 - flip vram (xor page value with %00001011)
  73+ 0000 ~            ;       bit 7=0 - addr #58000 =1  #d8 addressing
  74+ 0000 ~            page:          db     0                 ;
  75+ 0000 ~            addr:          dw     0                 ; pointer for vram
  76+ 0000 ~            ptr:           dw     0                 ; pointer for attr data
  77+ 0000                            ENDS
  78+ 0000
  79+ 0000                            STRUCT  atwin
  80+ 0000 ~            ;atx           db     0
  81+ 0000 ~            ;aty           db     0
  82+ 0000 ~            atxy:          dw     0
  83+ 0000 ~            width:         db     0
  84+ 0000 ~            hght:          db     0
  85+ 0000 ~            data:          dw     0
  86+ 0000 ~            mode:          db     0
  87+ 0000 ~            ; mode: bit 0=0 - no border,  =1 - border as paper
  88+ 0000 ~            ;       bit 1=0 - no repeat,  =1 - repeat sequence
  89+ 0000 ~            ;       bit 2=0 - no page,    =1 - page out memory
  90+ 0000 ~            ;       bit 3=0 - no flip vrm =1 - flip vram (xor page value with %00001011)
  91+ 0000 ~            ;       bit 7=0 - addr #58000 =1  #d8 addressing
  92+ 0000 ~            page:          db     0
  93+ 0000 ~            addr:          dw     0
  94+ 0000 ~            ptr:           dw     0
  95+ 0000                            ENDS
  96+ 0000
  97+ 0000              _rlce:        EQU     #03cb
  98+ 0000              _rlcd:        EQU     #02cb
  99+ 0000              _rrce:        EQU     #0bcb
 100+ 0000              _rrcd:        EQU     #0acb
 101+ 0000
 102+ 0000                            STRUCT  pxwin
 103+ 0000 ~            atxy:          dw     0
 104+ 0000 ~            widt:          db     0
 105+ 0000 ~            hght:          db     0
 106+ 0000 ~            data:          dw     0                 ; data starts with count of successive bytes
 107+ 0000 ~            mode:          db     0                 ; b7 - vram #40 | #c0
 108+ 0000 ~                                                    ; b0 - paging enabled
 109+ 0000 ~            page:          db     0
 110+ 0000 ~            modh:          dw     0
 111+ 0000 ~            modl:          dw     0
 112+ 0000 ~            vram:          dw     0
 113+ 0000 ~            ptr:           dw     0
 114+ 0000 ~            cnt:           db     0
 115+ 0000                            ENDS
 116+ 0000
 117+ 0000                            STRUCT itr
 118+ 0000 ~            beg:            db     0  ; starting value
 119+ 0000 ~            end:            db     0  ; ending value
 120+ 0000 ~            cnt:            db     0  ; number of iterations
 121+ 0000 ~            adr:            dw     0  ; address to be modified
 122+ 0000 ~            ini:            db     0  ; init flag 0-needs to be initiated, 1-running
 123+ 0000 ~            add:            dw     0  ; add is calculated add value
 124+ 0000 ~            str:            db     0  ; fixed point, str is low byte, val is hi byte
 125+ 0000 ~            val:            db     0  ; val is new itarated value
 126+ 0000 ~            neg:            db     0  ; flag showing reverse iteration
 127+ 0000                            ENDS
 128+ 0000
 129+ 0000              KGfxVramUp:     EQU    0
 130+ 0000              KGfxVramDown:   EQU    2
 131+ 0000              KGfxAttrUp:     EQU    1
 132+ 0000              KGfxAttrDown:   EQU    3
 133+ 0000              KGfxCont:       EQU    4
 134+ 0000
 135+ 0000                            STRUCT gfx
 136+ 0000 ~            atxy:           dw     0                 ; position (char x, [char for attr] y)
 137+ 0000 ~            pdata:          dw     0                 ; gfx data
 138+ 0000 ~            wdth:           dw     0
 139+ 0000 ~            phght:          db     0
 140+ 0000 ~            mode:           db     0                 ; 0 - vram up
 141+ 0000 ~                                                     ; 1 - attr up
 142+ 0000 ~                                                     ; 2 - vram down
 143+ 0000 ~                                                     ; 3 - attr down
 144+ 0000 ~                                                     ; 4 - continuous
 145+ 0000 ~            page:           db     0                 ; page. #80 is offset for vram #40|#c0
 146+ 0000 ~            data:           dw     0                 ; gfx data pointer
 147+ 0000 ~            vram:           dw     0                 ; vram
 148+ 0000 ~            hght:           db     0                 ; current drawn line
 149+ 0000                            ENDS
 150+ 0000
 151+ 0000              KBlitDirUp:    EQU    0
 152+ 0000              KBlitDirDown:  EQU    1
 153+ 0000              KBlitDirLeft:  EQU    2
 154+ 0000              KBlitDirRight: EQU    3
 155+ 0000
 156+ 0000                            STRUCT blit
 157+ 0000 ~            atxy:          dw     0                  ; position (char x, [char for attr] y)
 158+ 0000 ~            pdata:         dw     0                  ; data for graphics
 159+ 0000 ~            wdth:          db     0                  ; width of gfx
 160+ 0000 ~            hght:          db     0                  ; height of gfx
 161+ 0000 ~            stps:          db     0                  ; number of iterations
 162+ 0000 ~            dir:           db     0                  ; direction (0-up, 1-down, 2-left, 3-right)
 163+ 0000 ~            page:          db     0                  ; page. #80 is offset for vram #40|#c0
 164+ 0000 ~            vram:          dw     0                  ; calculated vram
 165+ 0000 ~            cstp:          db     0                  ; steps - current state
 166+ 0000                            ENDS
 167+ 0000
 168+ 0000                            STRUCT  vpxy               ; vertical alien print routine
 169+ 0000 ~            atx:            db      0
 170+ 0000 ~            aty:            db      0
 171+ 0000 ~            pdr:            db      0   ; page and direction
 172+ 0000 ~            txt:            dw      0
 173+ 0000 ~            fnt:            dw      0   ; font addr
 174+ 0000 ~            vrm:            dw      0
 175+ 0000 ~            curx:           db      0
 176+ 0000 ~            cury:           db      0
 177+ 0000 ~            ctxt:           dw      0
 178+ 0000                            ENDS
 179+ 0000
 180+ 0000                         STRUCT  sfzx               ; FZX print (Andrew Owen)
 181+ 0000 ~            FONT:       dw     0
 182+ 0000 ~            TEXT:       dw     0
 183+ 0000 ~            MARGIN:     db     0
 184+ 0000 ~            spcy:       db     0
 185+ 0000 ~            CTXT:       dw     0
 186+ 0000 ~            P_FLAG:     db     0
 187+ 0000 ~            P_COL:      db     0
 188+ 0000 ~            P_LIN:      db     0
 189+ 0000                         ENDS
 190+ 0000
 191+ 0000                         STRUCT  shdf
 192+ 0000 ~            font:       dw      0
 193+ 0000 ~            text:       dw      0
 194+ 0000 ~            margin:     db      0
 195+ 0000 ~            spcx:       db      0
 196+ 0000 ~            spcy:       db      0
 197+ 0000 ~            posx:       db      0
 198+ 0000 ~            posy:       db      0
 199+ 0000 ~            curtext:    dw      0
 200+ 0000                         ENDS
 201+ 0000
# file closed: Q:\Development\Dev-ZX\demo_cats\libs/egl_def.a80
  46  0000              ;        include "demo/light/3dlight_def.a80"
  47  0000                      include "demo/rotoid/rotoid_def.a80"
# file opened: Q:\Development\Dev-ZX\demo_cats\demo/rotoid/rotoid_def.a80
   1+ 0000              ; rotoid definition file
   2+ 0000              ; 18.11.2018 - intial release
   3+ 0000
   4+ 0000                      define  mDraw drawMultiObject
   5+ 0000                      define  mDel  eraseMultiObject
   6+ 0000                      define  gDraw rotoid.drawMobHDI
   7+ 0000                      define  gDel  rotoid.eraseMobHDI
   8+ 0000
   9+ 0000              ; multi object definition (object consists of more objects)
  10+ 0000                      STRUCT mobdef       ; scale, angle, posx, posy, posz, objptr
  11+ 0000 ~            objptr:   dw     0          ; points to series of objdefs
  12+ 0000 ~            scale:    db     0          ; if 7-th bit set then symobj angle is ignorred
  13+ 0000 ~            angle:    db     0
  14+ 0000 ~            posx:     dw     0
  15+ 0000 ~            posy:     dw     0
  16+ 0000 ~            posz:     dw     0
  17+ 0000                      ENDS
  18+ 0000
  19+ 0000              KGfxPut:  =      0
  20+ 0000              KGfxOr:   =      1
  21+ 0000
  22+ 0000 ~            /*
  23+ 0000 ~            ; gfx definition (reusing mobdef format to enable sorting of z-pos)
  24+ 0000 ~                     STRUCT mobgfx
  25+ 0000 ~            gfxptr:   dw      0   ; source data address
  26+ 0000 ~            wdth:     db      0   ; 7bit 1=OR, 0=LDI
  27+ 0000 ~            hght:     db      0
  28+ 0000 ~            posx:     dw      0   ; chars
  29+ 0000 ~            posy:     dw      0   ; pixels
  30+ 0000 ~            posz:     dw      0
  31+ 0000 ~                     ENDS
  32+ 0000 ~            */
  33+ 0000
  34+ 0000              ; image header format:
  35+ 0000                      STRUCT hdi
  36+ 0000 ~            bwidth:   db     0
  37+ 0000 ~            height:   db     0
  38+ 0000 ~            atrsize:  db     0
  39+ 0000                      ENDS
  40+ 0000
  41+ 0000                      STRUCT mobhdi
  42+ 0000 ~            gfxptr:  dw      0          ; source data address OR eraseptr
  43+ 0000 ~            mode:    db      0          ; 7bit 1=OR, 0=LDI
  44+ 0000 ~                                        ; 6bit 1=perspective correction, 0=no
  45+ 0000 ~                                        ; 5bit 1=ignore scene and perspective
  46+ 0000 ~                                        ; 3bit 1=fill object with 0 (somehow like erase object)
  47+ 0000 ~                                        ; 2bit 1=gfxptr points to "erahdi" object
  48+ 0000 ~                                        ; 0bit 0/1 fill bit for pre-rotated bitmaps                            ; 4bit
  49+ 0000 ~            mode2:   db      0          ; pre-scrolled bitmap (1-8 instances, 2-4 instances and 4-2 instances)
  50+ 0000 ~            posx:    dw      0          ; chars
  51+ 0000 ~            posy:    dw      0          ; pixels
  52+ 0000 ~            posz:    dw      0
  53+ 0000                      ENDS
  54+ 0000
  55+ 0000                      STRUCT erahdi
  56+ 0000 ~            gfxptr:  dw      0
  57+ 0000 ~            addr:    dw      0          ; 1st vram swapable data
  58+ 0000 ~            bwidth:  db      0          ;
  59+ 0000 ~            height:  db      0          ;
  60+ 0000 ~                     ds      4          ; 2nd vram
  61+ 0000                      ENDS
  62+ 0000
  63+ 0000                      MACRO    machdi     _gfxptr, _mode1, _mode2, _posx, _posy, _posz
  64+ 0000 ~                    dw       .l
  65+ 0000 ~                    db       _mode1, _mode2
  66+ 0000 ~                    dw       _posx, _posy, _posz
  67+ 0000 ~            .l      dw       _gfxptr
  68+ 0000 ~                    ds       8,0
  69+ 0000                      ENDM
  70+ 0000
  71+ 0000                      STRUCT mirr
  72+ 0000 ~            xpos2:   db  0
  73+ 0000 ~            ypos2:   db  0
  74+ 0000 ~            xpos1:   db  0
  75+ 0000 ~            ypos1:   db  0
  76+ 0000 ~
  77+ 0000 ~            wdth:    db  0
  78+ 0000 ~            hght:    db  0
  79+ 0000 ~            mode:    db  0
  80+ 0000 ~            sfx:     db  0
  81+ 0000                      ENDS
  82+ 0000
  83+ 0000
  84+ 0000              ; symmetrical object definition
  85+ 0000                      STRUCT symobj       ; type, woff, yoff, xoff, y0, y1, par1, par2, eff
  86+ 0000 ~            type:     db     0          ; object type
  87+ 0000 ~                                        ; 0-arc, 1-line, 2-bounding box
  88+ 0000 ~                                        ; bit7=1 - segment definition for left side
  89+ 0000 ~            woff:     db     0          ; width offset of current segment (06.04.2019: former x-off)
  90+ 0000 ~            yoff:     db     0          ; y-position (0=top) (19.01.2019 y-offset modified into y-position to fix line gaps)
  91+ 0000 ~            xoff:     db     0          ; x-offset (offsets currently drawn segment x-pos)
  92+ 0000 ~            y0:       db     0          ; start y postion
  93+ 0000 ~            y1:       db     0          ; Height of the segment
  94+ 0000 ~            par1:     db     0          ; object specific parametter
  95+ 0000 ~            par2:     db     0          ; object specific parametter
  96+ 0000 ~            leff:     db     0          ; shading left
  97+ 0000 ~            reff:     db     0          ; shading right
  98+ 0000 ~                                        ; shading additional options:
  99+ 0000 ~                                        ; bit 4 = 1 - fixed color (no light is considered)
 100+ 0000 ~                                        ; bit 5 = 1 - color will depend on the z-position. fade out with distance
 101+ 0000 ~                                        ; bit 6 = 1 - do not draw color (skip draw)
 102+ 0000 ~                                        ; bit 7 = 1 - leff only: next segment will define lefft side (type of next segment must be with 7bit=1!)
 103+ 0000                      ENDS
 104+ 0000
 105+ 0000              ; modification 09.12.2018 - cltop/clbot moved to screen.cltop / screen.clbot
 106+ 0000              ; object definition for drawing on screen
 107+ 0000                      STRUCT objdef       ; obdef,scale,angle,rposX,rposY,cltop,clbot
 108+ 0000 ~            obdef:    dw     0          ; pointer to object definition
 109+ 0000 ~            scale:    db     0          ; scale of the drawn object (set 7th bit = no scale)
 110+ 0000 ~            angle:    db     0          ; angle of the shadow
 111+ 0000 ~            rposx:    dw     0          ; relative position X to the (mob) object position x
 112+ 0000 ~            rposy:    dw     0          ; dtto Y
 113+ 0000 ~            options:  db     0          ; bit 7=1 - object is hidden,
 114+ 0000 ~                                        ; bit 6=1 - object shall not be deleted using eraseObject.
 115+ 0000 ~                                        ; ---Bit6 is set automatically by segment type = 3 by calcRight
 116+ 0000 ~                                        ; bit 5=1 - use screen positions (no perspective calculation in setObjectOrigin)
 117+ 0000 ~                                        ; bit 4   - not used
 118+ 0000 ~                                        ; bit 3   - not used
 119+ 0000 ~                                        ; bit 2=1 - light enabled
 120+ 0000 ~                                        ; -- bit 1=1 - light mode
 121+ 0000 ~                                        ; -- bit 0=1 - light mode
 122+ 0000 ~            posx16:   dw     0          ; x 16bit position (off screen); pixels 0-255 are visible
 123+ 0000 ~            posy16:   dw     0          ; y 16bit position. y - visibility defined by clipping
 124+ 0000 ~            ; -- 1st vram
 125+ 0000 ~            bbwdth:   db     0          ; object bounding box width
 126+ 0000 ~            bbhght:   db     0          ; object bounding box height
 127+ 0000 ~            bboxx:    db     0          ; position of bounding box x
 128+ 0000 ~            bboxy:    dw     0          ; position of bounding box y
 129+ 0000 ~            clip:     db     0          ; screen clipping flag
 130+ 0000 ~            ;-- 2nd vram
 131+ 0000 ~            bbwdth_:  db     0          ; object bounding box width
 132+ 0000 ~            bbhght_:  db     0          ; object bounding box height
 133+ 0000 ~            bboxx_:   db     0          ; position of bounding box x
 134+ 0000 ~            bboxy_:   dw     0          ; position of bounding box y
 135+ 0000 ~            clip_:    db     0          ; screen clipping flag
 136+ 0000                      ENDS
 137+ 0000
 138+ 0000                      MACRO arc woff, yoff, y0, y1, radius, quadrant, leff, reff
 139+ 0000 ~                      db    0         ; arc type
 140+ 0000 ~                      db    woff
 141+ 0000 ~                      db    yoff
 142+ 0000 ~                      db    0
 143+ 0000 ~                      db    y0
 144+ 0000 ~                      db    y1
 145+ 0000 ~                      db    radius
 146+ 0000 ~                      db    quadrant
 147+ 0000 ~                      db    leff
 148+ 0000 ~                      db    reff
 149+ 0000                      ENDM
 150+ 0000
 151+ 0000                      MACRO lin wdth, ypos, xpos, hght, slop, leff, reff
 152+ 0000 ~                      db    1         ; arc type
 153+ 0000 ~                      db    wdth
 154+ 0000 ~                      db    ypos
 155+ 0000 ~                      db    xpos
 156+ 0000 ~                      db    0
 157+ 0000 ~                      db    hght
 158+ 0000 ~                      dw    slop
 159+ 0000 ~                      db    leff
 160+ 0000 ~                      db    reff
 161+ 0000                      ENDM
 162+ 0000
 163+ 0000                      MACRO box maxx,maxy,fill
 164+ 0000 ~                      db    2
 165+ 0000 ~                      db    maxx
 166+ 0000 ~                      db    maxy
 167+ 0000 ~                      db    0
 168+ 0000 ~                      db    0
 169+ 0000 ~                      db    0
 170+ 0000 ~                      db    fill
 171+ 0000 ~                      db    0
 172+ 0000 ~                      db    0
 173+ 0000 ~                      db    0
 174+ 0000                      ENDM
 175+ 0000
 176+ 0000                      MACRO box2 maxx,maxy,fill
 177+ 0000 ~                      db    3
 178+ 0000 ~                      db    maxx
 179+ 0000 ~                      db    maxy
 180+ 0000 ~                      db    0
 181+ 0000 ~                      db    0
 182+ 0000 ~                      db    0
 183+ 0000 ~                      db    fill
 184+ 0000 ~                      db    0
 185+ 0000 ~                      db    0
 186+ 0000 ~                      db    0
 187+ 0000                      ENDM
 188+ 0000
 189+ 0000                      MACRO mSegBall rad,lef,ref
 190+ 0000 ~                      box rad, 2*rad, 0
 191+ 0000 ~                      arc 0,  0, 0, rad, rad, 1, lef, ref
 192+ 0000 ~                      arc 0,rad, 0, rad, rad, 4, lef, ref
 193+ 0000 ~                      db  #ff
 194+ 0000                      ENDM
 195+ 0000
 196+ 0000                      MACRO    objmac obdef,scale,angle,rposx,rposy                                   ;cltop,clbot
 197+ 0000 ~                      dw     obdef          ; pointer to object definition
 198+ 0000 ~                      db     scale          ; scale of the drawn object (set 7th bit = no scale)
 199+ 0000 ~                      db     angle          ; angle of the shadow
 200+ 0000 ~                      dw     rposx          ; relative position X to the mob position x
 201+ 0000 ~                      dw     rposy          ; dtto Y
 202+ 0000 ~                      db     0              ; flag to hide object
 203+ 0000 ~                      ds     objdef-9, 0
 204+ 0000                      ENDM
 205+ 0000
 206+ 0000                      MACRO    anmmac obdef,scale,angle,rposx,rposy,option                            ;cltop,clbot,option
 207+ 0000 ~                      dw     obdef          ; pointer to object definition
 208+ 0000 ~                      db     scale          ; scale of the drawn object (set 7th bit = no scale)
 209+ 0000 ~                      db     angle          ; angle of the shadow
 210+ 0000 ~                      dw     rposx          ; relative position X to the mob position x
 211+ 0000 ~                      dw     rposy          ; dtto Y
 212+ 0000 ~                      db     option         ; 128=hidden, 0-displayed
 213+ 0000 ~                      ds     objdef-9, 0
 214+ 0000                      ENDM
 215+ 0000
 216+ 0000              ;--- commands defined in drawMultiObject.skipHidden
 217+ 0000              ;--- closing command of multiobject definition (put after last objdef)
 218+ 0000
 219+ 0000              ; below this command follows exeptr chain of commands
 220+ 0000                      MACRO    objptr
 221+ 0000 ~                      dw     #01, ._ptr       ; .exeAnim
 222+ 0000 ~            ._ptr
 223+ 0000                      ENDM
 224+ 0000
 225+ 0000              ; below this command follows regular z80 code
 226+ 0000                      MACRO    objexe
 227+ 0000 ~                      dw     #02            ; .runCode
 228+ 0000                      ENDM
 229+ 0000
 230+ 0000                      MACRO    objend
 231+ 0000 ~                      dw     #00
 232+ 0000                      ENDM
 233+ 0000
 234+ 0000                      MACRO    mobmac  objptr, scale, angle, posx, posy, posz
 235+ 0000 ~                      dw     objptr         ; points to series of objdefs
 236+ 0000 ~                      db     scale
 237+ 0000 ~                      db     angle
 238+ 0000 ~                      dw     posx
 239+ 0000 ~                      dw     posy
 240+ 0000 ~                      dw     posz
 241+ 0000                      ENDM
 242+ 0000
 243+ 0000                      MACRO    gdraw _ptr
 244+ 0000 ~                      dw     drawMobHDI, _ptr
 245+ 0000                      ENDM
 246+ 0000
 247+ 0000                      MACRO    gdel  _ptr
 248+ 0000 ~                      dw     eraseMobHDI, _ptr
 249+ 0000                      ENDM
 250+ 0000
 251+ 0000                      MACRO    mdraw ptr
 252+ 0000 ~                     dw      drawMultiObject,ptr
 253+ 0000                      ENDM
 254+ 0000
 255+ 0000                      MACRO    mdel ptr
 256+ 0000 ~                     dw      eraseMultiObject,ptr
 257+ 0000                      ENDM
 258+ 0000
 259+ 0000                      MACRO    cnmScnXYZ x,y,z
 260+ 0000 ~                     ld      hl,x
 261+ 0000 ~                     ld      (rotoid.scene.posx),hl
 262+ 0000 ~                     ld      hl,y
 263+ 0000 ~                     ld      (rotoid.scene.posy),hl
 264+ 0000 ~                     ld      hl,z
 265+ 0000 ~                     ld      (rotoid.scene.posz),hl
 266+ 0000                      ENDM
 267+ 0000
 268+ 0000                      MACRO    cnmScrCenter x,y
 269+ 0000 ~                     ld      hl,x
 270+ 0000 ~                     ld      (rotoid.screen.posx),hl
 271+ 0000 ~                     ld      hl,y
 272+ 0000 ~                     ld      (rotoid.screen.posy),hl
 273+ 0000                      ENDM
 274+ 0000
 275+ 0000                      MACRO    cnmScnFar p
 276+ 0000 ~                     ld      hl,p
 277+ 0000 ~                     ld      (rotoid.scene.far),hl
 278+ 0000                      ENDM
 279+ 0000
 280+ 0000                      MACRO    cnmScnFade p
 281+ 0000 ~                     ld      hl,p
 282+ 0000 ~                     ld      (rotoid.scene.fade),hl
 283+ 0000                      ENDM
 284+ 0000
 285+ 0000                      MACRO    cnmScrTopBot p,q
 286+ 0000 ~                     ld      hl,p+q*256
 287+ 0000 ~                     ld      (screen.cltop),hl
 288+ 0000                      ENDM
 289+ 0000
 290+ 0000                      MACRO    cnmMobPos mob,x,y,z
 291+ 0000 ~                     ld      hl,x
 292+ 0000 ~                     ld      (mob+mobdef.posx),hl
 293+ 0000 ~                     ld      hl,y
 294+ 0000 ~                     ld      (mob+mobdef.posy),hl
 295+ 0000 ~                     ld      hl,z
 296+ 0000 ~                     ld      (mob+mobdef.posz),hl
 297+ 0000                      ENDM
 298+ 0000
 299+ 0000              ; animate.moveCnt
 300+ 0000              ; _mob - address of data or structure that is modified
 301+ 0000              ; _stp - add value in every step
 302+ 0000              ; _off - offset to address from _mob address (e.g. _mob=0, _off=10 ==> target address is 0+10)
 303+ 0000              ; _cnt - number of steps
 304+ 0000              ; _dly - delayed start (number of passes)
 305+ 0000                      MACRO    mAniMoveCD _mob, _off, _stp, _cnt, _dly
 306+ 0000 ~                       dw      animate.moveCnt
 307+ 0000 ~                       dw      _mob+_off
 308+ 0000 ~                       dw      _stp
 309+ 0000 ~                       db      _dly
 310+ 0000 ~                       db      _cnt
 311+ 0000                      ENDM
 312+ 0000
 313+ 0000              ; same as above, yet with fps considered
 314+ 0000                      MACRO    mAniMoveCDf _mob, _off, _stp , _cnt, _dly
 315+ 0000 ~                       dw      animate.moveCntf
 316+ 0000 ~                       dw      _mob+_off
 317+ 0000 ~                       dw      _stp
 318+ 0000 ~                       db      _dly
 319+ 0000 ~                       db      _cnt
 320+ 0000                      ENDM
 321+ 0000
 322+ 0000              ; modify only speed, delay and count is managed through exeptr (mTimed)
 323+ 0000                      MACRO    mAninMove _mob, _off, _stp
 324+ 0000 ~                       dw      animate.moveCnt2
 325+ 0000 ~                       dw      _mob+_off
 326+ 0000 ~                       dw      _stp
 327+ 0000                      ENDM
 328+ 0000
 329+ 0000                      MACRO    mAninMovef _mob, _off, _stp
 330+ 0000 ~                       dw      animate.moveCntf2
 331+ 0000 ~                       dw      _mob+_off
 332+ 0000 ~                       dw      _stp
 333+ 0000                      ENDM
 334+ 0000
 335+ 0000              ;---------------------------------
 336+ 0000 ~            /*
 337+ 0000 ~                      dw animate.moveAccf,scene.posx
 338+ 0000 ~                      db #00,#ff    ; delay count
 339+ 0000 ~                      dw #00,#0020  ; temp, adder
 340+ 0000 ~                      db 0,#2        ; speed_start, speed_end
 341+ 0000 ~                      db 0          ; offset
 342+ 0000 ~            */
 343+ 0000                      MACRO    mAniMoveAcc _mob, _off, _cnt, _dly, _sp_start, _sp_end, _spd
 344+ 0000 ~                      dw     animate.moveAcc
 345+ 0000 ~                      dw     _mob+_off
 346+ 0000 ~                      db     _dly,_cnt
 347+ 0000 ~                      dw     0,_spd
 348+ 0000 ~                      db     _sp_start, _sp_end
 349+ 0000                      ENDM
 350+ 0000
 351+ 0000                      MACRO    mAniMoveAccf _mob, _off, _cnt, _dly, _sp_start, _sp_end, _spd
 352+ 0000 ~                      dw     animate.moveAccf
 353+ 0000 ~                      dw     _mob+_off
 354+ 0000 ~                      db     _dly,_cnt
 355+ 0000 ~                      dw     0,_spd
 356+ 0000 ~                      db     _sp_start, _sp_end
 357+ 0000                      ENDM
 358+ 0000
 359+ 0000                      LUA ALLPASS
 360+ 0000 ~                     function round(num)
 361+ 0000 ~                     return num+0.5-(num+0.5)%1
 362+ 0000 ~                     end
 363+ 0000 ~
 364+ 0000 ~                     function res0(num)
 365+ 0000 ~                     return math.floor(num/2)*2
 366+ 0000 ~                     end
 367+ 0000 ~
 368+ 0000 ~                     function getdefine(sjdefine)
 369+ 0000 ~                       local i
 370+ 0000 ~                       i = _c(sj.get_define(sjdefine))
 371+ 0000 ~                       --print(string.format("%x",i)," ",i-4294967296.0)
 372+ 0000 ~                       if (i<32767) then
 373+ 0000 ~                          return i
 374+ 0000 ~                       else
 375+ 0000 ~                          return (i-4294967296.0)              -- OH MY GOD! Who developed this Lua piece of shit!
 376+ 0000 ~                       end
 377+ 0000 ~                     end
 378+ 0000 ~
 379+ 0000                      ENDLUA
 380+ 0000
 381+ 0000                      MACRO    mAniMoveV0S _mob, _off, _cnt, _dly, _v0, _s
 382+ 0000 ~                      display "accelerator v0 S : ",_mob
 383+ 0000 ~                      define __lt _cnt
 384+ 0000 ~                      define __lv0 _v0
 385+ 0000 ~                      define __lve 0
 386+ 0000 ~                      define __ls _s
 387+ 0000 ~
 388+ 0000 ~                      dw     animate.moveAcc, _mob+_off
 389+ 0000 ~                      db     _dly,_cnt
 390+ 0000 ~                      dw     0
 391+ 0000 ~
 392+ 0000 ~                      LUA ALLPASS
 393+ 0000 ~                        t  = getdefine("__lt")   -- time
 394+ 0000 ~                        v0 = getdefine("__lv0")  -- start speed
 395+ 0000 ~                        s  = getdefine("__ls")   -- distance
 396+ 0000 ~
 397+ 0000 ~                        a  = 2*(s-(v0*t))/(t^2)          -- calculate acceleration
 398+ 0000 ~                        aw = math.floor(256*a)           --   16bit
 399+ 0000 ~                        ve = math.floor(v0+a*t)          -- end speed
 400+ 0000 ~                        print ("  >> s:"..s.." t:"..t.." v0:"..v0.." ve:"..ve.." a:"..a.." aw:"..aw)
 401+ 0000 ~                        _pc("dw "..aw)
 402+ 0000 ~                        _pc("db "..v0)
 403+ 0000 ~                        _pc("db "..ve)
 404+ 0000 ~                      ENDLUA
 405+ 0000 ~
 406+ 0000 ~                      undefine __lt
 407+ 0000 ~                      undefine __lv0
 408+ 0000 ~                      undefine __lve
 409+ 0000 ~                      undefine __ls
 410+ 0000                      ENDM
 411+ 0000
 412+ 0000                      MACRO    mAniMoveV0E _mob, _off, _dly, _v0, _ve, _s
 413+ 0000 ~                      display "accelerator v0 ve: ",_mob
 414+ 0000 ~
 415+ 0000 ~                      define __lv0 _v0
 416+ 0000 ~                      define __lve _ve
 417+ 0000 ~                      define __ls _s
 418+ 0000 ~
 419+ 0000 ~                      dw     animate.moveAcc, _mob+_off
 420+ 0000 ~                      db     _dly
 421+ 0000 ~
 422+ 0000 ~                      LUA ALLPASS
 423+ 0000 ~                        ve = getdefine("__lve")          -- end speed
 424+ 0000 ~                        v0 = getdefine("__lv0")          -- start speed
 425+ 0000 ~                        s  = getdefine("__ls")           -- distance
 426+ 0000 ~
 427+ 0000 ~                        a  = (ve^2-v0^2)/(2*s)           -- calculate acceleration
 428+ 0000 ~                        aw = math.floor(256*a)           --   16bit
 429+ 0000 ~                        t  = math.floor((ve-v0)/a)       --   time to get there
 430+ 0000 ~
 431+ 0000 ~                        print ("  >> s:"..s.." t:"..t.." v0:"..v0.." ve:"..ve.." a:"..a.." aw:"..aw)
 432+ 0000 ~
 433+ 0000 ~                        _pc("db "..t)
 434+ 0000 ~                        _pc("dw 0")
 435+ 0000 ~                        _pc("dw "..aw)
 436+ 0000 ~                        _pc("db "..v0)
 437+ 0000 ~                        _pc("db "..ve)
 438+ 0000 ~                      ENDLUA
 439+ 0000 ~
 440+ 0000 ~                      undefine __lv0
 441+ 0000 ~                      undefine __lve
 442+ 0000 ~                      undefine __ls
 443+ 0000 ~
 444+ 0000                      ENDM
 445+ 0000
 446+ 0000              ;--- cyclic parabolic movement
 447+ 0000 ~              /* -- data structure
 448+ 0000 ~                    db      count_reset
 449+ 0000 ~                    db      delay
 450+ 0000 ~                    db      count_current
 451+ 0000 ~                    dw      accel_temp
 452+ 0000 ~                    dw      accel_adder
 453+ 0000 ~                    dw      v0
 454+ 0000 ~            */
 455+ 0000                        LUA ALLPASS
 456+ 0000 ~                        function accel(s,dt,dl,m)          -- s-distance, t-time, dl-delay, m-mode
 457+ 0000 ~                        t = dt/2
 458+ 0000 ~
 459+ 0000 ~                        if (dl>127) then
 460+ 0000 ~                           sj.error("Error in SIN/COS - delay > 127")
 461+ 0000 ~                           -- sj.exit(128)
 462+ 0000 ~                        end
 463+ 0000 ~
 464+ 0000 ~                        a = -(2*s)/(t^2)                   -- calculate acceleration
 465+ 0000 ~                        v  = -a*t                          -- start speed
 466+ 0000 ~                        aw = round(256*a)
 467+ 0000 ~                        vw = round(256*v)                  -- v0
 468+ 0000 ~
 469+ 0000 ~                        print("s:",s," t:",t," v:",v," a:",a)
 470+ 0000 ~
 471+ 0000 ~                        _pc("db "..dt)                  -- count reset
 472+ 0000 ~
 473+ 0000 ~                        if (m==0) then                     -- SIN
 474+ 0000 ~
 475+ 0000 ~                           _pc("db "..dl)                  -- delay
 476+ 0000 ~                           _pc("db "..dt)                  -- count current
 477+ 0000 ~                           _pc("dw 0")                     -- unused for SIN
 478+ 0000 ~                           _pc("dw 0")                     -- accel temp
 479+ 0000 ~                        elseif(m==1) then                  -- COS
 480+ 0000 ~
 481+ 0000 ~                           _pc("db "..dl+128)              -- delay + marker of cos
 482+ 0000 ~                           _pc("db "..round(t))        -- COS(0) initial marker
 483+ 0000 ~                           _pc("dw "..s)                   -- amplitude for COS(0)
 484+ 0000 ~                           _pc("dw "..round(aw*t))       -- accel temp
 485+ 0000 ~                        elseif(m==2) then                  -- COS initialized
 486+ 0000 ~
 487+ 0000 ~                           _pc("db "..dl)              -- delay + NO marker of cos (object already initialized)
 488+ 0000 ~                           _pc("db "..round(t))        -- COS(0) initial marker
 489+ 0000 ~                           _pc("dw "..s)                   -- amplitude for COS(0)
 490+ 0000 ~                           _pc("dw "..round(aw*t))       -- accel temp
 491+ 0000 ~                        end
 492+ 0000 ~                        _pc("dw "..aw)                  -- accel adder
 493+ 0000 ~                        _pc("dw "..vw)                  -- v0
 494+ 0000 ~                        return
 495+ 0000 ~                        end
 496+ 0000                        ENDLUA
 497+ 0000
 498+ 0000 ~            /* -- data structure
 499+ 0000 ~                    db      count_reset
 500+ 0000 ~                    db      delay
 501+ 0000 ~                    db      count_current
 502+ 0000 ~                    dw      speed_cur
 503+ 0000 ~                    dw      accel
 504+ 0000 ~                    dw      speed_v0
 505+ 0000 ~                    db      offset to base address
 506+ 0000 ~            */
 507+ 0000
 508+ 0000                      MACRO    mAniMoveSin _mob, _off, _dly, _cnt, _s
 509+ 0000 ~                      display "accelerator SIN: ",_mob+_off
 510+ 0000 ~                      define __ls _s
 511+ 0000 ~                      define __lt _cnt
 512+ 0000 ~                      define __dl _dly
 513+ 0000 ~
 514+ 0000 ~                      dw     animate.moveCyc, _mob+_off
 515+ 0000 ~                      LUA ALLPASS
 516+ 0000 ~                        s  = getdefine("__ls")   -- half distance
 517+ 0000 ~                        t  = getdefine("__lt")   -- counter reset
 518+ 0000 ~                        dl = getdefine("__dl")   -- delay
 519+ 0000 ~                        accel(s,t,dl,0)                    -- mode 0-sin
 520+ 0000 ~                      ENDLUA
 521+ 0000 ~
 522+ 0000 ~                      undefine __lt
 523+ 0000 ~                      undefine __ls
 524+ 0000 ~                      undefine __dl
 525+ 0000                      ENDM
 526+ 0000
 527+ 0000                      MACRO    mAniMoveCos _mob, _off, _dly, _cnt, _s
 528+ 0000 ~                      display "accelerator COS: ",_mob
 529+ 0000 ~                      define __ls _s
 530+ 0000 ~                      define __lt _cnt
 531+ 0000 ~                      define __dl _dly
 532+ 0000 ~
 533+ 0000 ~                      dw     animate.moveCyc, _mob+_off
 534+ 0000 ~                      LUA ALLPASS
 535+ 0000 ~                        s  = getdefine("__ls")   -- half distance
 536+ 0000 ~                        t  = getdefine("__lt")   -- counter reset
 537+ 0000 ~                        dl = getdefine("__dl")   -- delay
 538+ 0000 ~                        accel(s,t,dl,1)                  -- mode 1-cos
 539+ 0000 ~                      ENDLUA
 540+ 0000 ~
 541+ 0000 ~                      undefine __lt
 542+ 0000 ~                      undefine __ls
 543+ 0000 ~                      undefine __dl
 544+ 0000                      ENDM
 545+ 0000
 546+ 0000                      MACRO    mAniMoveCos2 _mob, _off, _dly, _cnt, _s
 547+ 0000 ~                      display "accelerator COS2: ",_mob
 548+ 0000 ~                      define __ls _s
 549+ 0000 ~                      define __lt _cnt
 550+ 0000 ~                      define __dl _dly
 551+ 0000 ~
 552+ 0000 ~                      dw     animate.moveCyc, _mob+_off
 553+ 0000 ~                      LUA ALLPASS
 554+ 0000 ~                        s  = getdefine("__ls")   -- half distance
 555+ 0000 ~                        t  = getdefine("__lt")   -- counter reset
 556+ 0000 ~                        dl = getdefine("__dl")   -- delay
 557+ 0000 ~                        accel(s,t,dl,2)                  -- mode 2-cos
 558+ 0000 ~                      ENDLUA
 559+ 0000 ~
 560+ 0000 ~                      undefine __lt
 561+ 0000 ~                      undefine __ls
 562+ 0000 ~                      undefine __dl
 563+ 0000                      ENDM
 564+ 0000
 565+ 0000              ;---------------------------------
 566+ 0000              ;-- move xyz
 567+ 0000              ; param No:   Description:
 568+ 0000              ;        1:  offset to base address
 569+ 0000              ;        2:  base address
 570+ 0000              ;      3-6:  increment x,y,z
 571+ 0000              ; examples:
 572+ 0000              ;          dw moveXYZ, 0       , scene, #0001,#fffa,#fff8                 ; move scene
 573+ 0000              ;          dw moveXYZ, mobdef.posx, mobStat, #0000, #0000, #0001          ; move object mobStat in position X
 574+ 0000
 575+ 0000                      MACRO    mAniMoveXYZ _adr,_off,_sx,_sy,_sz
 576+ 0000 ~                     dw      animate.moveXYZ
 577+ 0000 ~                     dw      _adr+_off,_sx,_sy,_sz
 578+ 0000                      ENDM
 579+ 0000
 580+ 0000              ; same as above, yet with fps considered
 581+ 0000                      MACRO    mAniMoveXYZf _adr,_off,_sx,_sy,_sz
 582+ 0000 ~                     dw      animate.moveXYZf
 583+ 0000 ~                     dw      _adr+_off,_sx,_sy,_sz
 584+ 0000                      ENDM
 585+ 0000
 586+ 0000              ; sort z-pos for MOB-objects in draw exec list
 587+ 0000                      MACRO    mSort num
 588+ 0000 ~                     dw      bsort, num
 589+ 0000                      ENDM
 590+ 0000
 591+ 0000                      MACRO   cnmLightPos x,z
 592+ 0000 ~                      ld      hl,x
 593+ 0000 ~                      ld      (light.posx),hl
 594+ 0000 ~                      ld      hl,z
 595+ 0000 ~                      ld      (light.posz),hl
 596+ 0000                      ENDM
 597+ 0000
 598+ 0000                      MACRO   cnmLightMode mode
 599+ 0000 ~                      ld      a,mode
 600+ 0000 ~                      ld      (light.mode),a
 601+ 0000                      ENDM
 602+ 0000
 603+ 0000                      MACRO   cnmLightBright br,cr
 604+ 0000 ~                      ld      a,br
 605+ 0000 ~                      ld      (rotoid.light.bright),a
 606+ 0000 ~                      ld      a,cr
 607+ 0000 ~                      ld      (rotoid.light.contrs),a
 608+ 0000                      ENDM
 609+ 0000
 610+ 0000                      MACRO   cnmLightShade val
 611+ 0000 ~                      ld    a,val
 612+ 0000 ~                      ld    (rotoid.light.shade),a
 613+ 0000                      ENDM
 614+ 0000
 615+ 0000                      MACRO   cnmScreenplayEnable
 616+ 0000 ~                      ld    a,#37                 ; scf
 617+ 0000 ~                      ld    (rotoid.run.scene),a
 618+ 0000                      ENDM
 619+ 0000
 620+ 0000                      MACRO   cnmScreenplayDisable
 621+ 0000 ~                      ld    a,#a7                 ; and_a
 622+ 0000 ~                      ld    (rotoid.run.scene),a
 623+ 0000                      ENDM
 624+ 0000
 625+ 0000                      MACRO   cnmFocal val
 626+ 0000 ~                      ld    a,val
 627+ 0000 ~                      call  persp16b.init
 628+ 0000                      ENDM
 629+ 0000
 630+ 0000              ; -- inc 8bit value by fraction
 631+ 0000              ; .binc:
 632+ 0000                      STRUCT bytinc
 633+ 0000 ~            madr:   dw    0
 634+ 0000 ~            incr:   dw    0
 635+ 0000 ~            start:  db    0
 636+ 0000 ~            end:    db    0
 637+ 0000 ~            temp:   dw    0
 638+ 0000                      ENDS
 639+ 0000
 640+ 0000              ;rectangle fill
 641+ 0000                      STRUCT rctf
 642+ 0000 ~            posx:   db     0         ; char
 643+ 0000 ~            posy:   db     0         ; pix
 644+ 0000 ~            wdth:   db     0         ; char
 645+ 0000 ~            hght:   db     0         ; pix
 646+ 0000 ~            fill:   db     0
 647+ 0000 ~            mode:   db     0         ; 0-1  00 - put, 01 - or, 10 - and, 11 xor
 648+ 0000 ~                                     ; 2    vram addr : 0=#4000, 1=#c000
 649+ 0000 ~                                     ; 3    rotate gfx: 0=don't, 1=rrc <fill> every next line
 650+ 0000 ~                                     ; 4    attributes
 651+ 0000                      ENDS
 652+ 0000
 653+ 0000                      STRUCT dstar
 654+ 0000 ~            seed1:   dw     0
 655+ 0000 ~            seed2:   dw     0
 656+ 0000 ~            count:   db     0         ; number of stars
 657+ 0000 ~            cltop:   db     0         ; clip top
 658+ 0000 ~            clbot:   db     0         ; clip bot
 659+ 0000 ~            clleft:  db     0         ;      left
 660+ 0000 ~            clright: db     0         ;      right
 661+ 0000                      ENDS
 662+ 0000
 663+ 0000              ; command: .rotoid_one_hidden:
 664+ 0000              ; structure for animation of OBJects within MOB (e.g. rotoid as part of station)
 665+ 0000                             STRUCT objani
 666+ 0000 ~            angle:         db    0
 667+ 0000 ~            amplitude:     db    0
 668+ 0000 ~            offset:        db    0
 669+ 0000 ~            speed:         db    0
 670+ 0000 ~            options:       db    0
 671+ 0000 ~            back_pos:      dw    0
 672+ 0000 ~            front_pos:     dw    0
 673+ 0000 ~            back_options:  dw    0
 674+ 0000 ~            front_options: dw    0
 675+ 0000                             ENDS
 676+ 0000
 677+ 0000                             MACRO  mAniRotoid angle,amplitude,offset,speed,options,object1,object2,ptroffset
 678+ 0000 ~                           db     angle,amplitude,offset,speed,options
 679+ 0000 ~                           dw     object1+ptroffset
 680+ 0000 ~                           dw     object2+ptroffset
 681+ 0000 ~                           dw     object1+objdef.options
 682+ 0000 ~                           dw     object2+objdef.options
 683+ 0000                             ENDM
 684+ 0000
 685+ 0000              ; command: .loop
 686+ 0000                             MACRO  mAniLoop _address, _offset, _loops, _increment
 687+ 0000 ~                           dw     animate.loop
 688+ 0000 ~                           dw     _address+_offset
 689+ 0000 ~                           dw     0
 690+ 0000 ~                           dw     _loops*_increment
 691+ 0000 ~                           dw     _increment
 692+ 0000                             ENDM
 693+ 0000
 694+ 0000              ;command: animate.pal
 695+ 0000                             STRUCT sympal
 696+ 0000 ~            pal_cnt:       db     0     ; frame counter to get next palette value
 697+ 0000 ~            pal_ptr:       dw     0     ; pointer to palette, #ff termination
 698+ 0000 ~            val_ptr:       dw     0     ; pointer to address where data are stored
 699+ 0000 ~            mode:          db     0     ; bit 7=0 - single byte, =1 - double byte stored to val_ptr
 700+ 0000 ~                                        ; bit 6=1 - do not repeat sequence
 701+ 0000 ~                                        ; bit 5=1 - #00 is endmark, otherwise #ff
 702+ 0000 ~            pal_cptr:      dw     0
 703+ 0000 ~            curr_cnt:      db     1
 704+ 0000                             ENDS
 705+ 0000
 706+ 0000                             MACRO  mAniPal palcnt,curcnt,mode,palptr,segptr,segno
 707+ 0000 ~                           db     palcnt
 708+ 0000 ~                           dw     palptr
 709+ 0000 ~                           dw     segptr+symobj.leff+segno*symobj
 710+ 0000 ~                           db     mode
 711+ 0000 ~                           dw     palptr
 712+ 0000 ~                           db     curcnt
 713+ 0000                             ENDM
 714+ 0000
 715+ 0000              ; command: animate.sin
 716+ 0000              ; modify one byte based on sin table
 717+ 0000                             STRUCT anicos
 718+ 0000 ~            angle:         db    0         ; starting angle
 719+ 0000 ~            amplitude:     db    0         ; sin amplitude
 720+ 0000 ~            offset:        db    0         ; sin offset
 721+ 0000 ~            speed:         db    0         ; increments
 722+ 0000 ~            options:       db    0         ; bit0 = 1, ignore FPS, increments based on "speed" only
 723+ 0000 ~            mod_ptr:       dw    0         ; modified address
 724+ 0000                             ENDS
 725+ 0000
 726+ 0000                             MACRO  mAniSin angle,amplitude,offset,speed,options,modptr,offsetptr
 727+ 0000 ~                           db     angle,amplitude,offset,speed,options
 728+ 0000 ~                           dw     modptr+offsetptr
 729+ 0000                             ENDM
 730+ 0000
 731+ 0000                             STRUCT link
 732+ 0000 ~            from_ptr:      dw     0
 733+ 0000 ~            to_ptr:        dw     0
 734+ 0000 ~            offset:        dw     0
 735+ 0000                             ENDS
 736+ 0000
 737+ 0000              ; command: animate.link
 738+ 0000                             MACRO mAniLink from,to,adr_offset,offset
 739+ 0000 ~                           dw    from+adr_offset                ; val=peek from_addr
 740+ 0000 ~                           dw    to+adr_offset                  ; to_addr
 741+ 0000 ~                           dw    offset                         ; poke to_addr,val+offset
 742+ 0000                             ENDM
 743+ 0000
 744+ 0000              ; command: animate.linkxyz
 745+ 0000                             STRUCT linkxyz
 746+ 0000 ~            from_ptr:      dw     0
 747+ 0000 ~            to_ptr:        dw     0
 748+ 0000 ~            offset_x:      dw     0
 749+ 0000 ~            offset_y:      dw     0
 750+ 0000 ~            offset_z:      dw     0
 751+ 0000                             ENDS
 752+ 0000
 753+ 0000                             MACRO  mAniLinkXYZ from, to, offset_x, offset_y, offset_z
 754+ 0000 ~                           dw    from + mobdef.posx
 755+ 0000 ~                           dw    to   + mobdef.posx
 756+ 0000 ~                           dw    offset_x
 757+ 0000 ~                           dw    offset_y
 758+ 0000 ~                           dw    offset_z
 759+ 0000                             ENDM
 760+ 0000
 761+ 0000              ;--- set/unset objdef option bit to show/hide object
 762+ 0000                             MACRO mObjHide _obj, _pos
 763+ 0000 ~                           dw    rotoid.animate.hide, _obj+_pos*objdef
 764+ 0000                             ENDM
 765+ 0000
 766+ 0000                             MACRO mObjShow _obj, _pos
 767+ 0000 ~                           dw    rotoid.animate.show, _obj+_pos*objdef
 768+ 0000                             ENDM
 769+ 0000
 770+ 0000              ; command: saveHDI
 771+ 0000              ; save area of screen #4000 as hdi object
 772+ 0000
 773+ 0000              ; it is not possible to simply pass parametters from macro to Lua
 774+ 0000              ; workaround is to make define and get it from macro. it has to be _c VALed to get
 775+ 0000              ; correct value from sjasm interpretter. at the end all defines must be undefined.
 776+ 0000
 777+ 0000                             MACRO  msaveHDI posx,posy,width,height,_addr
 778+ 0000 ~
 779+ 0000 ~                           define ___t_ta  _addr
 780+ 0000 ~                           define ___t_wd  width
 781+ 0000 ~                           define ___t_hg  height
 782+ 0000 ~
 783+ 0000 ~                           LUA    ALLPASS
 784+ 0000 ~                           wd = getdefine("___t_wd")
 785+ 0000 ~                           hg = getdefine("___t_hg")
 786+ 0000 ~                           ta = _c(sj.get_define("___t_ta"))
 787+ 0000 ~
 788+ 0000 ~                           if ta>0 then
 789+ 0000 ~                              tadr = ta
 790+ 0000 ~                           end
 791+ 0000 ~
 792+ 0000 ~                           sj.insert_label("___t_tadr",tadr,false,true)
 793+ 0000 ~                           tadr = tadr+wd*hg+3
 794+ 0000 ~                           ENDLUA
 795+ 0000 ~
 796+ 0000 ~                           undefine ___t_ta
 797+ 0000 ~                           undefine ___t_wd
 798+ 0000 ~                           undefine ___t_hg
 799+ 0000 ~
 800+ 0000 ~                           ld     c,posx
 801+ 0000 ~                           ld     b,posy
 802+ 0000 ~                           ld     e,width
 803+ 0000 ~                           ld     d,height
 804+ 0000 ~                           ld     ix,@___t_tadr
 805+ 0000 ~                           call   saveHDI
 806+ 0000 ~
 807+ 0000 ~                           display @___t_tadr  ; label generated from LUA
 808+ 0000                             ENDM
 809+ 0000
 810+ 0000 ~            /*
 811+ 0000 ~                           MACRO  msaveHDI posx,posy,width,height,_addr
 812+ 0000 ~
 813+ 0000 ~                           IF     _addr>0
 814+ 0000 ~            ._saddr:       =      _addr
 815+ 0000 ~                           ENDIF
 816+ 0000 ~
 817+ 0000 ~                           LUA    ALLPASS
 818+ 0000 ~                           print (sj.get_label("temp3k"))
 819+ 0000 ~                           ENDLUA
 820+ 0000 ~
 821+ 0000 ~                           ld     c,posx
 822+ 0000 ~                           ld     b,posy
 823+ 0000 ~                           ld     e,width
 824+ 0000 ~                           ld     d,height
 825+ 0000 ~                           ld     ix,._saddr
 826+ 0000 ~                           call   saveHDI
 827+ 0000 ~            ._saddr:       =      ._saddr + width*height+3
 828+ 0000 ~                           ENDM
 829+ 0000 ~            */
 830+ 0000
 831+ 0000              ; command: saveHDIpage
 832+ 0000              ; save area of screen #c000 as hdi object
 833+ 0000
 834+ 0000                             MACRO  msaveHDIpage posx,posy,width,height,_addr
 835+ 0000 ~                           IF     _addr>0
 836+ 0000 ~            ._saddr:       =      _addr
 837+ 0000 ~                           ENDIF
 838+ 0000 ~                           ld     c,posx
 839+ 0000 ~                           ld     b,posy
 840+ 0000 ~                           ld     e,width
 841+ 0000 ~                           ld     d,height
 842+ 0000 ~                           ld     ix,._saddr
 843+ 0000 ~                           call   saveHDIpage
 844+ 0000 ~            ._saddr:       =      ._saddr + width*height+3
 845+ 0000                             ENDM
# file closed: Q:\Development\Dev-ZX\demo_cats\demo/rotoid/rotoid_def.a80
  48  0000                      include "demo/screenplay/demo_sync.a80"
# file opened: Q:\Development\Dev-ZX\demo_cats\demo/screenplay/demo_sync.a80
   1+ 0000              ; demo_sync.a80
   2+ 0000              syncid_008: = 256             ;Blueprint fade in
   3+ 0000              syncid_010: = 544             ;Texline 1
   4+ 0000              syncid_018: = 608             ;Texline 2
   5+ 0000              syncid_020: = 672             ;Texline 3
   6+ 0000
   7+ 0000              syncid_028: = 704             ;Texline 4
   8+ 0000              syncid_030: = 720             ;Texline 5
   9+ 0000              syncid_038: = 736             ;Texline 6
  10+ 0000
  11+ 0000              syncid_040: = 928             ;BP fadeout
  12+ 0000              syncid_048: = 1024            ;launch
  13+ 0000              syncid_04a: = 1100            ;start of beacon blinking
  14+ 0000              syncid_049: = 1570            ;end of beacon blinking
  15+ 0000
  16+ 0000              syncid_050: = 1600            ;space before disengage
  17+ 0000              syncid_058: = 2024            ;catship leaving earth
  18+ 0000              syncid_061: = 6550            ;end of scrolling
  19+ 0000              syncid_060: = 6670            ;cheese planet
  20+ 0000              syncid_068: = 7063            ;crashship
  21+ 0000
# file closed: Q:\Development\Dev-ZX\demo_cats\demo/screenplay/demo_sync.a80
  49  0000
  50  0000                      ORG    #5b00
  51  5B00              ;-- buffers
  52  5B00 00 00 00...  temp3k: ds     #0f00
  53  6A00              .end:
  54  6A00 00 00 00...  swap:   ds      #100                     ; free buffer for memory operations
  55  6B00
  56  6B00              ;-- bin preparation
  57  6B00              ;        include "demo/darkness.a80"
  58  6B00
  59  6B00              ; init code and interrupt
  60  6B00              start:
  61  6B00                      include "kernel/kern_exec.a80"   ; kernel init is executed, follows "exp.main" table of calls prior enabling interrupt
# file opened: Q:\Development\Dev-ZX\demo_cats\kernel/kern_exec.a80
   1+ 6B00              ; Interrupt Scheduler, based on Eklhaft 2
   2+ 6B00              ; Code : Omega (compiler: SJASM+ v 1.3)
   3+ 6B00              ; Start: 25.06.2018
   4+ 6B00
   5+ 6B00              imtab = #bb
   6+ 6B00
   7+ 6B00              ;start:
   8+ 6B00 F3                   di
   9+ 6B01 FD E5                push   iy
  10+ 6B03 D9                   exx
  11+ 6B04 E5                   push   hl
  12+ 6B05 D9                   exx
  13+ 6B06 ED 73 35 6B          ld     (basicsp+1),sp
  14+ 6B0A 31 EC 81             ld     sp,stackStart
  15+ 6B0D
  16+ 6B0D 3E BB                ld     a,imtab
  17+ 6B0F ED 47                ld     i,a
  18+ 6B11 ED 5E                im 2
  19+ 6B13              ;---    test memory speed
  20+ 6B13 21 F9 BF             ld     hl,testMachine.interrupt
  21+ 6B16 22 FF BB             ld     (imvct),hl
  22+ 6B19 CD 76 BF             call   testMachine
  23+ 6B1C
  24+ 6B1C              ;---    set temporary dummy int handler
  25+ 6B1C 21 FC BF             ld     hl,testMachine.dummyint
  26+ 6B1F 22 FF BB             ld     (imvct),hl
  27+ 6B22
  28+ 6B22 21 96 80             ld     hl,exp.main
  29+ 6B25 CD 64 6B             call   exeptr                          ; run main exec list prior enabling interrupt
  30+ 6B28
  31+ 6B28              ;---    set kernel int handler
  32+ 6B28 21 01 BC             ld     hl,imrut
  33+ 6B2B 22 FF BB             ld     (imvct),hl
  34+ 6B2E
  35+ 6B2E              ;        ld      hl,exe.demo                   ; table of executor script
  36+ 6B2E              ;        call    execmd.init
  37+ 6B2E
  38+ 6B2E FB                   ei
  39+ 6B2F 76                   halt
  40+ 6B30 C3 54 BC             jp     mainloop                        ; run main loop
  41+ 6B33
  42+ 6B33              ; return to OS --------
  43+ 6B33              os:
  44+ 6B33 F3                   di
  45+ 6B34              basicsp:
  46+ 6B34 31 55 55             ld     sp,#5555
  47+ 6B37 18 5A        1       jr     1F
  48+ 6B39 ~            /*
  49+ 6B39 ~                    exx
  50+ 6B39 ~                    pop    hl
  51+ 6B39 ~                    exx
  52+ 6B39 ~                    pop    iy
  53+ 6B39 ~                    xor    a
  54+ 6B39 ~                    ld     i,a
  55+ 6B39 ~                    im     1
  56+ 6B39 ~                    ei
  57+ 6B39 ~                    ret
  58+ 6B39 ~            */
  59+ 6B39 DD 6E 00 DD  poke:   ld     hl,(ix+0)
  59+ 6B3D 66 01
  60+ 6B3F DD 7E 02             ld     a,(ix+2)
  61+ 6B42 77                   ld     (hl),a
  62+ 6B43 C9                   ret
  63+ 6B44
  64+ 6B44 DD 6E 00 DD  pokew:  ld     hl,(ix+0)
  64+ 6B48 66 01
  65+ 6B4A DD 7E 02             ld     a,(ix+2)
  66+ 6B4D 77                   ld     (hl),a
  67+ 6B4E 23                   inc    hl
  68+ 6B4F DD 7E 03             ld     a,(ix+3)
  69+ 6B52 77                   ld     (hl),a
  70+ 6B53 C9                   ret
  71+ 6B54
  72+ 6B54              ;----------------------------------------------------------------------------------------
  73+ 6B54              ; execute list of calls; pointer to jump table in HL, end of table = 0
  74+ 6B54              exelst:
  75+ 6B54 E5                   push    hl
  76+ 6B55 E1           .loop:  pop     hl
  77+ 6B56 5E                   ld      e,(hl)
  78+ 6B57 23                   inc     hl
  79+ 6B58 56                   ld      d,(hl)
  80+ 6B59 7B                   ld      a,e
  81+ 6B5A B2                   or      d
  82+ 6B5B C8                   ret     z               ; end of table
  83+ 6B5C 23                   inc     hl
  84+ 6B5D E5                   push    hl
  85+ 6B5E EB                   ex      de,hl
  86+ 6B5F 11 55 6B             ld      de,.loop
  87+ 6B62 D5                   push    de
  88+ 6B63 E9                   jp      (hl)
  89+ 6B64
  90+ 6B64              ;----------------------------------------------------------------------------------------
  91+ 6B64              ; execute list of calls with IX as pointer; pointer to jump table in HL, end of table = 0
  92+ 6B64              exeptr:
  93+ 6B64 E5                   push    hl
  94+ 6B65 E1           .loop:  pop     hl
  95+ 6B66 5E           .next:  ld      e,(hl)               ; de=exe or d=0, e=command
  96+ 6B67 23                   inc     hl
  97+ 6B68 56                   ld      d,(hl)
  98+ 6B69 23                   inc     hl
  99+ 6B6A 4E                   ld      c,(hl)               ; bc=parametters ->IX or other params for commands
 100+ 6B6B 23                   inc     hl
 101+ 6B6C 46                   ld      b,(hl)
 102+ 6B6D 23                   inc     hl
 103+ 6B6E 7A                   ld      a,d
 104+ 6B6F A7                   and     a
 105+ 6B70 20 27                jr      nz,.exe              ;d > 0 then exe
 106+ 6B72 7B                   ld      a,e
 107+ 6B73 A7                   and     a
 108+ 6B74 C8                   ret     z                    ;#00 - end of list
 109+ 6B75 3D                   dec     a
 110+ 6B76 28 2C                jr      z,.retuntil          ;#01 - ret/end until -(delay) (acts as end of list for number of iterations - delay)
 111+ 6B78 3D                   dec     a
 112+ 6B79 28 3F                jr      z,.goto              ;#02 - goto (change pointer of execution list)
 113+ 6B7B 3D                   dec     a
 114+ 6B7C 28 40                jr      z,.timed             ;#03 - run timed (execute FROM specific pass with COUNT of passes)
 115+ 6B7E 3D                   dec     a
 116+ 6B7F 28 5F                jr      z,.until             ;#04 - goto until (execute until pass number is reached)
 117+ 6B81 3D                   dec     a
 118+ 6B82 28 68                jr      z,.from              ;#05 - goto from (execute from specific pass number)
 119+ 6B84 3D                   dec     a
 120+ 6B85 CA FA 6B             jp      z,.exeframe          ;#06 - exe at frame (execute code (without ix) once specific frame count is reached)
 121+ 6B88 3D                   dec     a
 122+ 6B89 CA 18 6C             jp      z,.halt              ;#07 - halt IX number of frames
 123+ 6B8C 3D                   dec     a
 124+ 6B8D 28 1F                jr      z,.retfrom           ;#08 - ret from specific count
 125+ 6B8F 3D                   dec     a
 126+ 6B90 CA 23 6C             jp      z,.retuntilframe     ;#09 - ret until specific frame occurs
 127+ 6B93
 128+ 6B93 ED 5F        1       ld      a,r                  ; error
 129+ 6B95 D3 FE                out     (#fe),a
 130+ 6B97 18 FA                jr      1B
 131+ 6B99
 132+ 6B99 DD 69        .exe:   ld      xl,c
 133+ 6B9B DD 60                ld      xh,b
 134+ 6B9D E5                   push    hl
 135+ 6B9E EB                   ex      de,hl
 136+ 6B9F 11 65 6B             ld      de,.loop
 137+ 6BA2 D5                   push    de
 138+ 6BA3 E9                   jp      (hl)
 139+ 6BA4
 140+ 6BA4              .retuntil:
 141+ 6BA4 78                   ld      a,b                  ; delayed return
 142+ 6BA5 B1                   or      c
 143+ 6BA6 28 BE                jr      z,.next
 144+ 6BA8 0B                   dec     bc
 145+ 6BA9 2B                   dec     hl
 146+ 6BAA 70                   ld      (hl),b
 147+ 6BAB 2B                   dec     hl
 148+ 6BAC 71                   ld      (hl),c
 149+ 6BAD C9                   ret
 150+ 6BAE
 151+ 6BAE              .retfrom:
 152+ 6BAE 78                   ld      a,b                  ; delayed return
 153+ 6BAF B1                   or      c
 154+ 6BB0 C8                   ret     z
 155+ 6BB1 0B                   dec     bc
 156+ 6BB2 2B                   dec     hl
 157+ 6BB3 70                   ld      (hl),b
 158+ 6BB4 2B                   dec     hl
 159+ 6BB5 71                   ld      (hl),c
 160+ 6BB6 23                   inc     hl
 161+ 6BB7 23                   inc     hl
 162+ 6BB8 18 AC                jr      .next
 163+ 6BBA
 164+ 6BBA 60           .goto:  ld      h,b                  ; change exe pointer
 165+ 6BBB 69                   ld      l,c
 166+ 6BBC 18 A8                jr      .next
 167+ 6BBE
 168+ 6BBE              ;       exe, ix, from_time, duration
 169+ 6BBE 59           .timed: ld      e,c                  ; de=exe
 170+ 6BBF 50                   ld      d,b
 171+ 6BC0 4E                   ld      c,(hl)
 172+ 6BC1 23                   inc     hl
 173+ 6BC2 46                   ld      b,(hl)
 174+ 6BC3 23                   inc     hl
 175+ 6BC4 DD 69                ld      xl,c                 ; ix=params
 176+ 6BC6 DD 60                ld      xh,b
 177+ 6BC8 7E                   ld      a,(hl)               ; delayed start
 178+ 6BC9 A7                   and     a
 179+ 6BCA 28 06                jr      z,1F
 180+ 6BCC 35                   dec     (hl)
 181+ 6BCD 23                   inc     hl
 182+ 6BCE 23           2       inc     hl
 183+ 6BCF C3 66 6B             jp      .next
 184+ 6BD2 23           1       inc     hl
 185+ 6BD3 7E                   ld      a,(hl)               ; duration
 186+ 6BD4 A7                   and     a
 187+ 6BD5 28 F7                jr      z,2B
 188+ 6BD7 35                   dec     (hl)
 189+ 6BD8 23                   inc     hl
 190+ 6BD9 E5                   push    hl
 191+ 6BDA EB                   ex      de,hl
 192+ 6BDB 11 65 6B             ld      de,.loop
 193+ 6BDE D5                   push    de
 194+ 6BDF E9                   jp      (hl)
 195+ 6BE0
 196+ 6BE0 7E           .until: ld      a,(hl)               ; change exe pointer until timeout
 197+ 6BE1 23                   inc     hl
 198+ 6BE2 A7                   and     a
 199+ 6BE3 28 81                jr      z,.next
 200+ 6BE5 2B                   dec     hl
 201+ 6BE6 35                   dec     (hl)
 202+ 6BE7 60                   ld      h,b
 203+ 6BE8 69                   ld      l,c
 204+ 6BE9 C3 66 6B             jp      .next
 205+ 6BEC
 206+ 6BEC 7E           .from:  ld      a,(hl)               ; change exe pointer from timeout
 207+ 6BED A7                   and     a
 208+ 6BEE 28 05                jr      z,1F
 209+ 6BF0 35                   dec     (hl)
 210+ 6BF1 23                   inc     hl
 211+ 6BF2 C3 66 6B             jp      .next
 212+ 6BF5 60           1       ld      h,b
 213+ 6BF6 69                   ld      l,c
 214+ 6BF7 C3 66 6B             jp      .next
 215+ 6BFA
 216+ 6BFA              .exeframe:
 217+ 6BFA 5E                   ld      e,(hl)               ; jump to routine specified in BC once frames>= DE
 218+ 6BFB 23                   inc     hl                   ; this jump happens just once! No IX params are passed
 219+ 6BFC 56                   ld      d,(hl)
 220+ 6BFD 23                   inc     hl
 221+ 6BFE 14                   inc     d
 222+ 6BFF CA 66 6B             jp      z,.next              ; in case d=255, then skip this jump. 255 is mark that jump has happened
 223+ 6C02 15                   dec     d
 224+ 6C03 E5                   push    hl
 225+ 6C04 2A 65 81             ld      hl,(frames)
 226+ 6C07 ED 52                sbc     hl,de
 227+ 6C09 FA 65 6B             jp      m,.loop
 228+ 6C0C E1                   pop     hl
 229+ 6C0D E5                   push    hl
 230+ 6C0E 2B                   dec     hl
 231+ 6C0F 36 FF                ld      (hl),#ff             ; marker to skip next jumps (#ffxx ~ 21mins)
 232+ 6C11 21 65 6B             ld      hl,.loop
 233+ 6C14 E5                   push    hl
 234+ 6C15 69                   ld      l,c
 235+ 6C16 60                   ld      h,b
 236+ 6C17 E9                   jp      (hl)
 237+ 6C18
 238+ 6C18 EB           .halt:  ex      de,hl
 239+ 6C19 76           1       halt
 240+ 6C1A ED A1                cpi
 241+ 6C1C EA 19 6C             jp      pe,1B
 242+ 6C1F EB                   ex      de,hl
 243+ 6C20 C3 66 6B             jp      .next
 244+ 6C23
 245+ 6C23              .retuntilframe:
 246+ 6C23 ED 5B 65 81          ld      de,(frames)
 247+ 6C27 EB                   ex      de,hl
 248+ 6C28 ED 42                sbc     hl,bc
 249+ 6C2A EB                   ex      de,hl
 250+ 6C2B D2 66 6B             jp      nc,.next
 251+ 6C2E C9                   ret
 252+ 6C2F
 253+ 6C2F              ;-------- include support and kernel routines
 254+ 6C2F              ;--- libs
 255+ 6C2F                      include "libs/mmu.a80"          ; mmu (intelligent LDIR, xl source page, xh destination page)
# file opened: ./libs/mmu.a80
   1++6C2F              ; osg 25.06.2018
   2++6C2F              ; mmu module
   3++6C2F
   4++6C2F                      MODULE  mmu
   5++6C2F              clsxi:
   6++6C2F 3E 55                ld     a,#55
   7++6C31 CD 57 6C             call   clscr0
   8++6C34 3E 55                ld     a,#55
   9++6C36 CD 63 6C             call   clatr0
  10++6C39 3E 57        clpa7:  ld     a,#57
  11++6C3B CD 57 6C             call   clscr0
  12++6C3E 3E 57                ld     a,#57
  13++6C40 C3 63 6C             jp     clatr0
  14++6C43
  15++6C43              clsix:
  16++6C43 3E 55                ld     a,#55
  17++6C45 CD 63 6C             call   clatr0
  18++6C48 3E 55                ld     a,#55
  19++6C4A CD 57 6C             call   clscr0
  20++6C4D 3E 57        clap7:  ld     a,#57
  21++6C4F CD 63 6C             call   clatr0
  22++6C52 3E 57                ld     a,#57
  23++6C54 C3 57 6C             jp     clscr0
  24++6C57
  25++6C57              ; will erase 6144 bytes
  26++6C57 DD 5D        clscr0: ld     e,xl
  27++6C59 26 C0                ld     h,#c0
  28++6C5B              ; h=#c0 or #40, e=fill byte
  29++6C5B 2E 00        clscr:  ld     l,#00
  30++6C5D 06 18                ld     b,#18
  31++6C5F 4D                   ld     c,l
  32++6C60 C3 6C 6C             jp     clmem
  33++6C63
  34++6C63              ; will erase 768 bytes
  35++6C63 DD 5C        clatr0: ld     e,xh
  36++6C65 26 D8        .e:     ld     h,#d8
  37++6C67              ; clatr: h=#d8 or #58, e=attr value
  38++6C67 2E 00        clatr:  ld     l,#00
  39++6C69 06 03                ld     b,#03
  40++6C6B 4D                   ld     c,l
  41++6C6C
  42++6C6C 08           clmem:  ex     af,af
  43++6C6D 3A 68 81             ld     a,(@page)
  44++6C70 08                   ex     af,af
  45++6C71                      page_a                         ; a=page, hl=addr, e=byte, bc=len
  45++6C71 32 68 81    >         ld      (@page),a
  45++6C74             >         page_am
  45++6C74 D3 FD       >         out    (#fd),a
  46++6C76 73                   ld     (hl),e
  47++6C77 54                   ld     d,h
  47++6C78 5D             ld e,l
  48++6C79 13                   inc de
  49++6C7A 0B                   dec bc
  50++6C7B ED B0                ldir
  51++6C7D 08                   ex     af,af
  52++6C7E                      page_a
  52++6C7E 32 68 81    >         ld      (@page),a
  52++6C81             >         page_am
  52++6C81 D3 FD       >         out    (#fd),a
  53++6C83 C9                   ret
  54++6C84
  55++6C84 ~            /*
  56++6C84 ~            cpscr57_temp3k:     ; copy screen from #4000 to p7 #c000, attrs from temp3k to #d800
  57++6C84 ~                    xor    a
  58++6C84 ~                    ld     (cpscr.sw),a
  59++6C84 ~                    ld     bc,6144
  60++6C84 ~                    ld     hl,#4000
  61++6C84 ~                    ld     de,#c000
  62++6C84 ~                    call   cpscr.nreg
  63++6C84 ~                    ld     hl,temp3k
  64++6C84 ~                    ld     bc,#300
  65++6C84 ~                    jp     cpscr.nreg
  66++6C84 ~            */
  67++6C84
  68++6C84              cpscr75:
  69++6C84 3E EB                ld     a,#eb
  70++6C86 18 01                jr     1F
  71++6C88
  72++6C88              cpscr57:
  73++6C88 AF                   xor    a
  74++6C89 32 A0 6C     1       ld     (cpscr.sw),a
  75++6C8C
  76++6C8C 01 00 1B     cpscr:  ld     bc,#1b00
  77++6C8F 21 00 40             ld     hl,#4000
  78++6C92 11 00 C0             ld     de,#c000
  79++6C95 3A 68 81     .nreg:  ld     a,(@page)
  80++6C98 08                   ex     af,af
  81++6C99 3E 57                ld     a,#57
  82++6C9B                      page_a
  82++6C9B 32 68 81    >         ld      (@page),a
  82++6C9E             >         page_am
  82++6C9E D3 FD       >         out    (#fd),a
  83++6CA0 00           .sw:    nop
  84++6CA1 ED B0                ldir
  85++6CA3 08                   ex     af,af
  86++6CA4                      page_a
  86++6CA4 32 68 81    >         ld      (@page),a
  86++6CA7             >         page_am
  86++6CA7 D3 FD       >         out    (#fd),a
  87++6CA9 AF                   xor    a
  88++6CAA 32 A0 6C             ld     (.sw),a
  89++6CAD C9                   ret
  90++6CAE
  91++6CAE
  92++6CAE ~            /*
  93++6CAE ~            ; mmu demo
  94++6CAE ~            demo:
  95++6CAE ~                    ld      a,o0
  96++6CAE ~                    page_a
  97++6CAE ~                    ld      hl,#0000
  98++6CAE ~                    ld      de,#c000
  99++6CAE ~                    ld      bc,6144
 100++6CAE ~                    ldir
 101++6CAE ~                    ld      hl,#3000
 102++6CAE ~                    ld      de,#4000
 103++6CAE ~                    ld      bc,6144
 104++6CAE ~                    ld      xl,o0
 105++6CAE ~                    ld      xh,o0
 106++6CAE ~                    jp      copy
 107++6CAE ~            */
 108++6CAE              ; ldir - edb0
 109++6CAE              ; lddr - edb8
 110++6CAE              ; lddr is needed only if ((from+len>to) and (to<from))
 111++6CAE
 112++6CAE              ; memory copy
 113++6CAE 22 46 6D     copy:   ld      (.msrc),hl
 114++6CB1 ED 53 48 6D          ld      (.mdes),de
 115++6CB5 3A 68 81             ld      a,(page)
 116++6CB8 32 3F 6D             ld      (.ret+1),a
 117++6CBB
 118++6CBB 09                   add     hl,bc           ; src+len
 119++6CBC 22 4A 6D             ld      (.mend),hl
 120++6CBF A7                   and     a
 121++6CC0 ED 52                sbc     hl,de           ; end-des
 122++6CC2 2A 46 6D             ld      hl,(.msrc)
 123++6CC5 38 19                jr      c,.ldir         ; <0
 124++6CC7
 125++6CC7 EB                   ex      de,hl
 126++6CC8 ED 52                sbc     hl,de          ; des-src
 127++6CCA 2A 48 6D             ld      hl,(.mdes)
 128++6CCD EB                   ex      de,hl
 129++6CCE 38 10                jr      c,.ldir        ; <0
 130++6CD0
 131++6CD0 EB                   ex      de,hl
 132++6CD1 09                   add     hl,bc
 133++6CD2 EB                   ex      de,hl
 134++6CD3 2A 4A 6D             ld      hl,(.mend)
 135++6CD6 1B                   dec     de
 136++6CD7 2B                   dec     hl
 137++6CD8
 138++6CD8 3E B8                ld      a,$b8           ; lddr
 139++6CDA D9                   exx
 140++6CDB 21 FF 6A             ld      hl,.swapdr
 141++6CDE 18 06                jr      .lddr
 142++6CE0
 143++6CE0 D9           .ldir:  exx
 144++6CE1 3E B0                ld      a,$b0           ; ldir
 145++6CE3 21 00 6A             ld      hl,.swapir
 146++6CE6 22 06 6D     .lddr:  ld      (.buf+1),hl
 147++6CE9 D9                   exx
 148++6CEA 32 13 6D             ld      (.ld1+1),a
 149++6CED 32 29 6D             ld      (.ld2+1),a
 150++6CF0 22 03 6D             ld      (.src+1),hl
 151++6CF3 ED 53 1B 6D          ld      (.dst+1),de
 152++6CF7 21 00 01             ld      hl,256
 153++6CFA 22 09 6D             ld      (.len+1),hl
 154++6CFD
 155++6CFD 78                   ld      a,b
 156++6CFE A7                   and     a
 157++6CFF 28 30                jr      z,.skip
 158++6D01
 159++6D01 D9           .loop:  exx
 160++6D02 21 55 55     .src:   ld      hl,$5555
 161++6D05 11 55 55     .buf:   ld      de,$5555        ; points to swap space
 162++6D08 01 55 55     .len:   ld      bc,$5555
 163++6D0B DD 7D                ld      a,xl
 164++6D0D                      page_a
 164++6D0D 32 68 81    >         ld      (@page),a
 164++6D10             >         page_am
 164++6D10 D3 FD       >         out    (#fd),a
 165++6D12 ED B0        .ld1:   ldir
 166++6D14 22 03 6D             ld      (.src+1),hl
 167++6D17 2A 06 6D             ld      hl,(.buf+1)
 168++6D1A 11 55 55     .dst:   ld      de,$5555
 169++6D1D ED 4B 09 6D          ld      bc,(.len+1)
 170++6D21 DD 7C                ld      a,xh
 171++6D23                      page_a
 171++6D23 32 68 81    >         ld      (@page),a
 171++6D26             >         page_am
 171++6D26 D3 FD       >         out    (#fd),a
 172++6D28 ED B0        .ld2:   ldir
 173++6D2A ED 53 1B 6D          ld      (.dst+1),de
 174++6D2E D9                   exx
 175++6D2F 10 D0                djnz    .loop
 176++6D31 79           .skip:  ld      a,c
 177++6D32 A7                   and     a
 178++6D33 28 09                jr      z,.ret
 179++6D35 ED 43 09 6D          ld      (.len+1),bc
 180++6D39 01 00 01             ld      bc,$100
 181++6D3C 18 C3                jr      .loop
 182++6D3E 3E 55        .ret:   ld      a,$55
 183++6D40                      page_a
 183++6D40 32 68 81    >         ld      (@page),a
 183++6D43             >         page_am
 183++6D43 D3 FD       >         out    (#fd),a
 184++6D45 C9                   ret
 185++6D46
 186++6D46 00 00        .msrc:    dw      0
 187++6D48 00 00        .mdes:    dw      0
 188++6D4A 00 00        .mend:    dw      0
 189++6D4C 00           .page:    db      0
 190++6D4D              .swapir:  equ     swap          ; ds $100 - buffer
 191++6D4D              .swapdr:  equ     swap+#ff
 192++6D4D
 193++6D4D              ; HL,DE,BC = same as ldir
 194++6D4D              ; XL - (HL) source page
 195++6D4D              ; XH - (DE) destination page
 196++6D4D              memswap:
 197++6D4D 3A 68 81             ld      a,(page)
 198++6D50 F5                   push    af
 199++6D51
 200++6D51 DD 7D                ld      a,xl
 201++6D53                      page_a
 201++6D53 32 68 81    >         ld      (@page),a
 201++6D56             >         page_am
 201++6D56 D3 FD       >         out    (#fd),a
 202++6D58
 203++6D58 7E           .loop:  ld      a,(hl)
 204++6D59 08                   ex      af,af
 205++6D5A DD 7C                ld      a,xh
 206++6D5C                      page_a
 206++6D5C 32 68 81    >         ld      (@page),a
 206++6D5F             >         page_am
 206++6D5F D3 FD       >         out    (#fd),a
 207++6D61 1A                   ld      a,(de)
 208++6D62 08                   ex      af,af
 209++6D63 12                   ld      (de),a
 210++6D64 DD 7D                ld      a,xl
 211++6D66                      page_a
 211++6D66 32 68 81    >         ld      (@page),a
 211++6D69             >         page_am
 211++6D69 D3 FD       >         out    (#fd),a
 212++6D6B 08                   ex      af,af
 213++6D6C 77                   ld      (hl),a
 214++6D6D 13                   inc     de
 215++6D6E ED A1                cpi
 216++6D70 EA 58 6D             jp      pe,.loop
 217++6D73 F1                   pop     af
 218++6D74                      page_a
 218++6D74 32 68 81    >         ld      (@page),a
 218++6D77             >         page_am
 218++6D77 D3 FD       >         out    (#fd),a
 219++6D79 C9                   ret
 220++6D7A
 221++6D7A                      ENDMODULE
# file closed: ./libs/mmu.a80
 256+ 6D7A                      include "libs/vramlib.a80"      ; various vram calculation routines. see src
# file opened: ./libs/vramlib.a80
   1++6D7A              vcpix:
   2++6D7A              PixXY2Adr:
   3++6D7A              ; bc = xy
   4++6D7A              ; hl = addr, a=bit
   5++6D7A 78                  ld   a,b
   6++6D7B A7                  and  a
   7++6D7C 1F                  rra
   8++6D7D 37                  scf
   9++6D7E 1F                  rra
  10++6D7F A7                  and  a
  11++6D80 1F                  rra
  12++6D81 A8                  xor  b
  13++6D82 E6 F8               and  0f8h
  14++6D84 A8                  xor  b
  15++6D85 67                  ld   h,a
  16++6D86 79                  ld   a,c
  17++6D87 07                  rlca
  18++6D88 07                  rlca
  19++6D89 07                  rlca
  20++6D8A A8                  xor  b
  21++6D8B E6 C7               and  0c7h
  22++6D8D A8                  xor  b
  23++6D8E 07                  rlca
  24++6D8F 07                  rlca
  25++6D90 6F                  ld   l,a
  26++6D91 79                  ld   a,c
  27++6D92 E6 07               and  7
  28++6D94 C9                  ret
  29++6D95
  30++6D95              vcxpx:
  31++6D95              PixCY2Adr:
  32++6D95              ;  b = y (pixel), c = x (char)
  33++6D95              ; hl = addr
  34++6D95 78                  ld   a,b
  35++6D96 A7                  and  a
  36++6D97 1F                  rra
  37++6D98 37                  scf
  38++6D99 1F                  rra
  39++6D9A A7                  and  a
  40++6D9B 1F                  rra
  41++6D9C A8                  xor  b
  42++6D9D E6 F8               and  0f8h
  43++6D9F A8                  xor  b
  44++6DA0 67                  ld   h,a
  45++6DA1 78                  ld   a,b
  46++6DA2 07                  rlca
  47++6DA3 07                  rlca
  48++6DA4 E6 E0               and  0e0h
  49++6DA6 B1                  or   c
  50++6DA7 6F                  ld   l,a
  51++6DA8 C9                  ret
  52++6DA9
  53++6DA9              vctxt:
  54++6DA9              PixCH2Adr:
  55++6DA9              ; bc = xy (char)
  56++6DA9              ; hl = addr
  57++6DA9 78                  ld   a,b
  58++6DAA E6 18               and  018h
  59++6DAC F6 40               or   040h
  60++6DAE 67                  ld   h,a
  61++6DAF 78                  ld   a,b
  62++6DB0 E6 07               and  7
  63++6DB2 0F                  rrca
  64++6DB3 0F                  rrca
  65++6DB4 0F                  rrca
  66++6DB5 81                  add  a,c
  67++6DB6 6F                  ld   l,a
  68++6DB7 C9                  ret
  69++6DB8
  70++6DB8 ~            /*
  71++6DB8 ~            vcdcr:
  72++6DB8 ~            PixDwnChr:
  73++6DB8 ~            ; hl = addr
  74++6DB8 ~            ; hl = down char scr addr
  75++6DB8 ~                   ld   a,l
  76++6DB8 ~                   add  a,32
  77++6DB8 ~                   ld   l,a
  78++6DB8 ~                   ret  nc
  79++6DB8 ~                   ld   a,h
  80++6DB8 ~                   add  a,8
  81++6DB8 ~                   ld   h,a
  82++6DB8 ~                   ret
  83++6DB8 ~
  84++6DB8 ~            vcucr:
  85++6DB8 ~            PixUppChr:
  86++6DB8 ~            ; hl = addr
  87++6DB8 ~            ; hl = upper char scr addr
  88++6DB8 ~                   ld   a,l
  89++6DB8 ~                   sub  32
  90++6DB8 ~                   ld   l,a
  91++6DB8 ~                   ret  nc
  92++6DB8 ~                   ld   a,h
  93++6DB8 ~                   sub  8
  94++6DB8 ~                   ld   h,a
  95++6DB8 ~                   ret
  96++6DB8 ~
  97++6DB8 ~            vcncr:
  98++6DB8 ~            PixNxtChr:
  99++6DB8 ~            ; hl = addr
 100++6DB8 ~            ; hl = next char scr addr
 101++6DB8 ~                   rr   h
 102++6DB8 ~                   rr   h
 103++6DB8 ~                   rr   h
 104++6DB8 ~                   inc  hl
 105++6DB8 ~                   rl   h
 106++6DB8 ~                   rl   h
 107++6DB8 ~                   rl   h
 108++6DB8 ~                   ret
 109++6DB8 ~
 110++6DB8 ~            vcpcr:
 111++6DB8 ~            PixPrvChr:
 112++6DB8 ~            ; hl = addr
 113++6DB8 ~            ; hl = prev char scr addr
 114++6DB8 ~                   rr   h
 115++6DB8 ~                   rr   h
 116++6DB8 ~                   rr   h
 117++6DB8 ~                   dec  hl
 118++6DB8 ~                   rl   h
 119++6DB8 ~                   rl   h
 120++6DB8 ~                   rl   h
 121++6DB8 ~                   ret
 122++6DB8 ~            */
 123++6DB8              vidd:
 124++6DB8 14                  inc  d
 125++6DB9 7A                  ld   a,d
 126++6DBA E6 07               and  7
 127++6DBC C0                  ret  nz
 128++6DBD 7B                  ld   a,e
 129++6DBE C6 20               add  a,32
 130++6DC0 5F                  ld   e,a
 131++6DC1 D8                  ret  c
 132++6DC2 7A                  ld   a,d
 133++6DC3 D6 08               sub  8
 134++6DC5 57                  ld   d,a
 135++6DC6 C9                  ret
 136++6DC7
 137++6DC7              vid:
 138++6DC7              vcsia:
 139++6DC7              PixDwnAdr
 140++6DC7              ; hl = addr
 141++6DC7              ; hl = inferior scan addr (down_hl)
 142++6DC7 24                  inc  h
 143++6DC8 7C                  ld   a,h
 144++6DC9 E6 07               and  7
 145++6DCB C0                  ret  nz
 146++6DCC 7D                  ld   a,l
 147++6DCD C6 20               add  a,32
 148++6DCF 6F                  ld   l,a
 149++6DD0 D8                  ret  c
 150++6DD1 7C                  ld   a,h
 151++6DD2 D6 08               sub  8
 152++6DD4 67                  ld   h,a
 153++6DD5 C9                  ret
 154++6DD6
 155++6DD6              vcssad:
 156++6DD6 15                  dec  d
 157++6DD7 7A                  ld   a,d
 158++6DD8 E6 07               and  7
 159++6DDA FE 07               cp   7
 160++6DDC C0                  ret  nz
 161++6DDD 7B                  ld   a,e
 162++6DDE D6 20               sub  32
 163++6DE0 5F                  ld   e,a
 164++6DE1 D8                  ret  c
 165++6DE2 7A                  ld   a,d
 166++6DE3 C6 08               add  a,8
 167++6DE5 57                  ld   d,a
 168++6DE6 C9                  ret
 169++6DE7
 170++6DE7              vcssa:
 171++6DE7              PixUppAdr:
 172++6DE7              ; hl = addr
 173++6DE7              ; hl = superior scan addr (up_hl)
 174++6DE7 25                  dec  h
 175++6DE8 7C                  ld   a,h
 176++6DE9 E6 07               and  7
 177++6DEB FE 07               cp   7
 178++6DED C0                  ret  nz
 179++6DEE 7D                  ld   a,l
 180++6DEF D6 20               sub  32
 181++6DF1 6F                  ld   l,a
 182++6DF2 D8                  ret  c
 183++6DF3 7C                  ld   a,h
 184++6DF4 C6 08               add  a,8
 185++6DF6 67                  ld   h,a
 186++6DF7 C9                  ret
 187++6DF8 ~            /*
 188++6DF8 ~            vcnva:
 189++6DF8 ~            ; hl = addr
 190++6DF8 ~            ; hl = next visual scan addr
 191++6DF8 ~                   inc  l
 192++6DF8 ~                   ld   a,l
 193++6DF8 ~                   and  01fh
 194++6DF8 ~                   ret  nz
 195++6DF8 ~                   inc  h
 196++6DF8 ~                   ld   a,h
 197++6DF8 ~                   and  7
 198++6DF8 ~                   ld   a,l
 199++6DF8 ~                   jr   nz,vcnva1
 200++6DF8 ~                   and  0e0h
 201++6DF8 ~                   ret  z
 202++6DF8 ~                   ld   a,h
 203++6DF8 ~                   sub  8
 204++6DF8 ~                   ld   h,a
 205++6DF8 ~                   ret
 206++6DF8 ~            vcnva1 sub  32
 207++6DF8 ~                   ld   l,a
 208++6DF8 ~                   ret
 209++6DF8 ~
 210++6DF8 ~            vcpva
 211++6DF8 ~            ; hl = addr
 212++6DF8 ~            ; hl = prev visual scan addr
 213++6DF8 ~                   dec  l
 214++6DF8 ~                   ld   a,l
 215++6DF8 ~                   and  01fh
 216++6DF8 ~                   cp   01fh
 217++6DF8 ~                   ret  nz
 218++6DF8 ~                   dec  h
 219++6DF8 ~                   ld   a,h
 220++6DF8 ~                   and  7
 221++6DF8 ~                   cp   7
 222++6DF8 ~                   ld   a,l
 223++6DF8 ~                   jr   nz,vcpva1
 224++6DF8 ~                   and  0e0h
 225++6DF8 ~                   cp   0e0h
 226++6DF8 ~                   ret  z
 227++6DF8 ~                   ld   a,h
 228++6DF8 ~                   add  a,8
 229++6DF8 ~                   ld   h,a
 230++6DF8 ~                   ret
 231++6DF8 ~            vcpva1 add  a,32
 232++6DF8 ~                   ld   l,a
 233++6DF8 ~                   ret
 234++6DF8 ~            */
 235++6DF8              vcatx:
 236++6DF8              AtrXY2Adr:
 237++6DF8              ; bc = xy (char)
 238++6DF8              ; hl = attr addr
 239++6DF8 78                  ld   a,b
 240++6DF9 0F                  rrca
 241++6DFA 0F                  rrca
 242++6DFB 0F                  rrca
 243++6DFC 67                  ld   h,a
 244++6DFD E6 E0               and  0e0h
 245++6DFF B1                  or   c
 246++6E00 6F                  ld   l,a
 247++6E01 7C                  ld   a,h
 248++6E02 E6 03               and  3
 249++6E04 F6 58               or   058h
 250++6E06 67                  ld   h,a
 251++6E07 C9                  ret
 252++6E08
 253++6E08              vcapx:
 254++6E08              AtrPx2Atr:
 255++6E08              ; hl = pix addr
 256++6E08              ; hl = atr addr
 257++6E08 7C                  ld   a,h
 258++6E09 1F                  rra
 259++6E0A 1F                  rra
 260++6E0B 1F                  rra
 261++6E0C E6 1F               and  01fh
 262++6E0E F6 58               or   058h
 263++6E10 67                  ld   h,a
 264++6E11 C9                  ret
# file closed: ./libs/vramlib.a80
 257+ 6E12              ;        include "libs/bzdiv1608.a80"    ; HL = HL / C; A = remainder
 258+ 6E12                      include "libs/makesin.a80"      ; mksnt: a: amplitude, c: offset, hl: adr
# file opened: ./libs/makesin.a80
   1++6E12              ; sinus	maker. {C} Jordan of exodus
   2++6E12              ; a: amplitude,	c: offset, hl: adr
   3++6E12              ; WARNING!!
   4++6E12              ;	org  xx00h
   5++6E12 00 00 00...          ALIGN #100
   6++6F00 D9           mksnt:	EXX
   7++6F01 4F               	LD   C,A
   8++6F02 06 01            	LD   B,01h
   9++6F04 21 7D 6F         	LD   HL,SINTAB
  10++6F07 D9               	EXX
  11++6F08 1E 00            	LD   E,00h
  12++6F0A CD 0E 6F         	CALL H800E
  13++6F0D 1D               	DEC  E
  14++6F0E CD 11 6F     H800E	CALL H8011
  15++6F11 06 40        H8011	LD   B,40h
  16++6F13 D9           H8013	EXX
  17++6F14 5E               	LD   E,(HL)
  18++6F15 2C               	INC  L
  19++6F16 56               	LD   D,(HL)
  20++6F17 7D               	LD   A,L
  21++6F18 80               	ADD  A,B
  22++6F19 6F               	LD   L,A
  23++6F1A 79               	LD   A,C
  24++6F1B CB 3F            	SRL  A
  25++6F1D CB 3B            	SRL  E
  26++6F1F 30 01            	JR   NC,H8022
  27++6F21 81               	ADD  A,C
  28++6F22 CB 3F        H8022	SRL  A
  29++6F24 CB 3B            	SRL  E
  30++6F26 30 01            	JR   NC,H8029
  31++6F28 81               	ADD  A,C
  32++6F29 CB 3F        H8029	SRL  A
  33++6F2B CB 3B            	SRL  E
  34++6F2D 30 01            	JR   NC,H8030
  35++6F2F 81               	ADD  A,C
  36++6F30 CB 3F        H8030	SRL  A
  37++6F32 CB 3B            	SRL  E
  38++6F34 30 01            	JR   NC,H8037
  39++6F36 81               	ADD  A,C
  40++6F37 CB 3F        H8037	SRL  A
  41++6F39 CB 3B            	SRL  E
  42++6F3B 30 01            	JR   NC,H803E
  43++6F3D 81               	ADD  A,C
  44++6F3E CB 3F        H803E	SRL  A
  45++6F40 CB 3B            	SRL  E
  46++6F42 30 01            	JR   NC,H8045
  47++6F44 81               	ADD  A,C
  48++6F45 CB 3F        H8045	SRL  A
  49++6F47 CB 3B            	SRL  E
  50++6F49 30 01            	JR   NC,H804C
  51++6F4B 81               	ADD  A,C
  52++6F4C CB 3F        H804C	SRL  A
  53++6F4E CB 3B            	SRL  E
  54++6F50 30 01            	JR   NC,H8053
  55++6F52 81               	ADD  A,C
  56++6F53 CB 3F        H8053	SRL  A
  57++6F55 CB 3A            	SRL  D
  58++6F57 30 01            	JR   NC,H805A
  59++6F59 81               	ADD  A,C
  60++6F5A CB 3F        H805A	SRL  A
  61++6F5C CB 3A            	SRL  D
  62++6F5E 30 01            	JR   NC,H8061
  63++6F60 81               	ADD  A,C
  64++6F61 CB 3F        H8061	SRL  A
  65++6F63 CB 3A            	SRL  D
  66++6F65 30 01            	JR   NC,H8068
  67++6F67 81               	ADD  A,C
  68++6F68 CB 3F        H8068	SRL  A
  69++6F6A 8A               	ADC  A,D
  70++6F6B D9               	EXX
  71++6F6C AB               	XOR  E
  72++6F6D F2 71 6F         	JP   P,H8071
  73++6F70 3C               	INC  A
  74++6F71 81           H8071	ADD  A,C
  75++6F72 77               	LD   (HL),A
  76++6F73 2C               	INC  L
  77++6F74 10 9D            	DJNZ H8013
  78++6F76 D9               	EXX
  79++6F77 78               	LD   A,B
  80++6F78 EE FC            	XOR  0FCh
  81++6F7A 47               	LD   B,A
  82++6F7B D9               	EXX
  83++6F7C C9               	RET
  84++6F7D
  85++6F7D              SINTAB:
  86++6F7D 00 00 32 00      	DB   00h,00h,32h,00h
  87++6F81 64 00 97 00      	DB   64h,00h,97h,00h
  88++6F85 C9 00 FB 00      	DB   0c9h,00h,0fbh,00h
  89++6F89 2D 01            	DB   2dh,01h
  90++6F8B 5E 01 90 01      	DB   5eh,01h,90h,01h
  91++6F8F C1 01 F2 01      	DB   0c1h,01h,0f2h,01h
  92++6F93 22 02 53 02      	DB   22h,02h,53h,02h
  93++6F97 82 02            	DB   82h,02h
  94++6F99 B2 02 E1 02      	DB   0b2h,02h,0e1h,02h
  95++6F9D 10 03 3E 03      	DB   10h,03h,3eh,03h
  96++6FA1 6C 03 99 03      	DB   6ch,03h,99h,03h
  97++6FA5 C5 03            	DB   0c5h,03h
  98++6FA7 F1 03 1D 04      	DB   0f1h,03h,1dh,04h
  99++6FAB 48 04 72 04      	DB   48h,04h,72h,04h
 100++6FAF 9B 04 C4 04      	DB   9bh,04h,0c4h,04h
 101++6FB3 EC 04            	DB   0ech,04h
 102++6FB5 13 05 3A 05      	DB   13h,05h,3ah,05h
 103++6FB9 5F 05 84 05      	DB   5fh,05h,84h,05h
 104++6FBD A8 05 CB 05      	DB   0a8h,05h,0cbh,05h
 105++6FC1 ED 05            	DB   0edh,05h
 106++6FC3 0F 06 2F 06      	DB   0fh,06h,2fh,06h
 107++6FC7 4F 06 6D 06      	DB   4fh,06h,6dh,06h
 108++6FCB 8A 06 A7 06      	DB   8ah,06h,0a7h,06h
 109++6FCF C2 06            	DB   0c2h,06h
 110++6FD1 DD 06 F6 06      	DB   0ddh,06h,0f6h,06h
 111++6FD5 0E 07 25 07      	DB   0eh,07h,25h,07h
 112++6FD9 3B 07 50 07      	DB   3bh,07h,50h,07h
 113++6FDD 64 07            	DB   64h,07h
 114++6FDF 77 07 88 07      	DB   77h,07h,88h,07h
 115++6FE3 99 07 A8 07      	DB   99h,07h,0a8h,07h
 116++6FE7 B6 07 C3 07      	DB   0b6h,07h,0c3h,07h
 117++6FEB CE 07            	DB   0ceh,07h
 118++6FED D9 07 E2 07      	DB   0d9h,07h,0e2h,07h
 119++6FF1 EA 07 F1 07      	DB   0eah,07h,0f1h,07h
 120++6FF5 F6 07 FA 07      	DB   0f6h,07h,0fah,07h
 121++6FF9 FE 07            	DB   0feh,07h
 122++6FFB FF 07 FF 07      	DB   0ffh,07h,0ffh,07h
 123++6FFF
# file closed: ./libs/makesin.a80
 259+ 6FFF              ;        include "libs/makeshp.a80"      ; mkshp: a: amplitude, c: offset, hl: adr
 260+ 6FFF
 261+ 6FFF              lowmem: equ     $
 262+ 6FFF                      display "end of lowmem:",lowmem
 263+ 6FFF
 264+ 6FFF              ; ------------------------------------------
 265+ 6FFF              ; ----- main tables, interrupt handler -----
 266+ 6FFF              ; ------------------------------------------
 267+ 6FFF
 268+ 6FFF                      ORG    imtab*#100+#ff
 269+ BBFF                      display "interrupt:",$
 270+ BBFF 01 BC        imvct:  dw     imrut
 271+ BC01
 272+ BC01 F3           imrut:  di
 273+ BC02 ED 73 50 BC          ld     (.spp+1),sp
 274+ BC06 31 AC 81             ld     sp,stackInt
 275+ BC09                      push_all
 275+ BC09 F5 C5 D5 E5 >          push  af,bc,de,hl,ix,iy
 275+ BC0D DD E5 FD E5 >
 275+ BC11 D9          >          exx
 275+ BC12 08          >          ex    af,af
 275+ BC13 F5 C5 D5 E5 >          push  af,bc,de,hl
 276+ BC17 3A 68 81             ld      a,(page)
 277+ BC1A              ;        ld      (.rpg+1),a
 278+ BC1A F5                   push    af
 279+ BC1B 2A 65 81             ld      hl,(frames)
 280+ BC1E 23                   inc     hl
 281+ BC1F 22 65 81             ld      (frames),hl
 282+ BC22 3A 67 81             ld      a,(fps)
 283+ BC25 3C                   inc     a
 284+ BC26 32 67 81             ld      (fps),a
 285+ BC29 CD 8F BC             call    execmd                  ; executor for commands (requires execmd.init)
 286+ BC2C 3E 37        .mod:   ld      a,    #37                  ; intelligent halt / toggler
 287+ BC2E 32 54 BC             ld      (mainloop.mod),a        ; set int flag
 288+ BC31 21 A0 80     .exl:   ld      hl,exl.blank
 289+ BC34 CD 54 6B             call    exelst                  ; executor for list
 290+ BC37 F1                   pop     af
 291+ BC38 E6 F7        .msk:   and     %11110111
 292+ BC3A F6 00        .ivr:   or      #00                     ; override videoram 8 or 0 - resulting vram after im2
 293+ BC3C 32 68 81             ld      (page),a
 294+ BC3F                      page_am
 294+ BC3F D3 FD       >         out    (#fd),a
 295+ BC41                      pop_all
 295+ BC41 E1 D1 C1 F1 >          pop    hl,de,bc,af
 295+ BC45 D9          >          exx
 295+ BC46 08          >          ex     af,af
 295+ BC47 FD E1 DD E1 >          pop    iy,ix,hl,de,bc,af
 295+ BC4B E1 D1 C1 F1 >
 296+ BC4F 31 55 55     .spp:   ld     sp,#5555
 297+ BC52 FB                   ei
 298+ BC53 C9                   ret
 299+ BC54
 300+ BC54              ivram: = imrut.ivr+1                  ; hold vram after imrut #0x | keep as it was #00
 301+ BC54              imask: = imrut.msk+1                  ;                       #f7                  #ff
 302+ BC54
 303+ BC54              ;----------------------------------------------------------------------------------------
 304+ BC54              mainloop:
 305+ BC54              ;-- section executed every interrupt
 306+ BC54 37           .mod:   scf                                ; scf / anda - Async calls mandatory
 307+ BC55 DA 63 BC             jp      c,.skip                    ;
 308+ BC58 3A 54 BC             ld      a,(.mod)                   ; mandatory
 309+ BC5B EE 90                xor         #37 xor    #a7             ;
 310+ BC5D 32 54 BC             ld      (.mod),a                   ;
 311+ BC60
 312+ BC60 CD 0E BF     .int:   call    dummy                      ; config: modify call to execute every interrupt (AsyncCall)
 313+ BC63
 314+ BC63              ;-- section executed in the remaining time
 315+ BC63              .skip:                                     ; (intelligent halt)
 316+ BC63              ;        debug_border_inc
 317+ BC63              ;        debug_border    0
 318+ BC63              ;-- user routines are called here see MCall or mcall (e.g. unpacking, effect data preparation...)
 319+ BC63 A7           .tgl:   and     a
 320+ BC64              ;        ld      a,_anda                    ; mandatory
 321+ BC64              ;        ld      (.tgl),a                   ;
 322+ BC64 DC 0E BF     .rew:   call    c,dummy                    ; config: call to support routines defined after by FrameStart
 323+ BC67 3E A7                ld      a,   #a7                    ; mandatory
 324+ BC69 32 63 BC             ld      (.tgl),a                   ;
 325+ BC6C              ;--
 326+ BC6C 00           .hlt:   nop                                ; config: halt/nop
 327+ BC6D 3E 01                ld      a,1
 328+ BC6F 32 67 81             ld      (fps),a                    ; clear fps counter
 329+ BC72 C3 54 BC             jp      mainloop                   ; mandatory
 330+ BC75              ;---------------------------
 331+ BC75
 332+ BC75              ; set call routine for main loop execution. Triggers CY to run in the next iteration loop
 333+ BC75              ; typically used for unpackers, screen background draw, data preparation...
 334+ BC75              mcall:
 335+ BC75 DD 22 65 BC         ld       (mainloop.rew+1),ix
 336+ BC79 3E 37               ld       a,    #37
 337+ BC7B 32 63 BC            ld       (mainloop.tgl),a
 338+ BC7E C9                  ret
 339+ BC7F              ; this routine is called by ExeRun every frame. Once execution of slow task in the main loop is finished
 340+ BC7F              ; whole slot is set to duration defined in IX (typically 1 = next frame will finish the exe frame).
 341+ BC7F              .ret:
 342+ BC7F 3A 63 BC            ld       a,(mainloop.tgl)
 343+ BC82 FE 37               cp           #37
 344+ BC84 C8                  ret      z
 345+ BC85              .saveFrames:
 346+ BC85 DD 22 95 BC         ld       (ExeFrames),ix
 347+ BC89 C9                  ret
 348+ BC8A
 349+ BC8A              outix:
 350+ BC8A DD 7D               ld       a,xl
 351+ BC8C                     page_am
 351+ BC8C D3 FD       >         out    (#fd),a
 352+ BC8E C9                  ret
 353+ BC8F
 354+ BC8F              ;----------------------------------------------------------------------------------------
 355+ BC8F              ; executor for interrupt scheduler.
 356+ BC8F              ; init:   execmd.init
 357+ BC8F              ;----------------------------------------------------------------------------------------
 358+ BC8F              execmd:
 359+ BC8F 3E A7                ld      a,   #a7                    ; clear CY
 360+ BC91 32 60 BD             ld      (ExeFrameStarted),a
 361+ BC94 21 55 55     .ef:    ld      hl,$5555                   ;ExeFrames:          counter of frames
 362+ BC97 FD 21 55 55  .ttab:  ld      iy,$5555                   ;ExeTabInProgress:   current position of executor table within frame
 363+ BC9B 2B                   dec     hl
 364+ BC9C 7D                   ld      a,l
 365+ BC9D B4                   or      h
 366+ BC9E 20 46                jr      nz,.cc1
 367+ BCA0 3E 37        .next:    ld      a,    #37                   ; skip current FramStart to next item
 368+ BCA2 32 60 BD               ld      (ExeFrameStarted),a      ; flags that first frame of FrameStart has passed (required for initialization of tasks)
 369+ BCA5 FD 21 55 55  .cc2:     ld      iy,$5555
 370+ BCA9 FD 6E 00 FD  .cc4:     ld      hl,(iy+0)                ; load number of frames
 370+ BCAD 66 01
 371+ BCAF FD 5E 02 FD            ld      de,(iy+2)                ; load jump address for main loop
 371+ BCB3 56 03
 372+ BCB5 FD 23       > inc     iy
 372+ BCB7 FD 23       > inc     iy
 372+ BCB9 FD 23       > inc     iy
 372+ BCBB FD 23       > inc     iy
 373+ BCBD
 374+ BCBD 7A                     ld      a,d
 375+ BCBE A7                     and     a
 376+ BCBF 20 14                  jr      nz,3F                    ; d<>0, de=mainloop exe, hl=frames
 377+ BCC1
 378+ BCC1              ; if D (high mainloop.exe)=0 then it's command in E
 379+ BCC1 7B                     ld      a,e                      ; cmd=0 ignore main loop, assumes HL=no.of frames (e.g. MCall or Frame #nnn,0)
 380+ BCC2 A7                     and     a                        ; (ignore mainloop.exe, save and_a to mainloop tgl
 381+ BCC3 28 18                  jr      z,2F
 382+ BCC5
 383+ BCC5 3D                     dec     a                        ; cmd=1 Idle
 384+ BCC6 20 06                  jr      nz,.erst
 385+ BCC8 3E 37                    ld      a,    #37                 ; scf=stop HALTing in .idle loop
 386+ BCCA 32 0B BF                 ld      (.idleFlag),a
 387+ BCCD C9                       ret
 388+ BCCE
 389+ BCCE FD 21 55 55  .erst:    ld      iy,$5555                 ; restart address
 390+ BCD2 3D                     dec     a                        ; cmd=2 restart
 391+ BCD3 28 D4                  jr      z,.cc4                   ; loop from init
 392+ BCD5
 393+ BCD5 3E 37        3         ld      a,    #37
 394+ BCD7 ED 53 65 BC            ld      (mainloop.rew+1),de      ; save mainloop.exe only if d>0
 395+ BCDB 18 02                  jr      1F
 396+ BCDD 3E A7        2         ld      a,   #a7
 397+ BCDF 32 63 BC     1         ld      (mainloop.tgl),a
 398+ BCE2 FD 22 99 BC            ld      (ExeTabInProgress),iy
 399+ BCE6
 400+ BCE6 22 95 BC     .cc1:   ld      (ExeFrames),hl
 401+ BCE9 FD 7E 00     .lloop: ld      a,(iy+0)                   ; read command
 402+ BCEC A7                   and     a
 403+ BCED 20 07                jr      nz,.cc3
 404+ BCEF FD 23                  inc     iy
 405+ BCF1 FD 22 A7 BC            ld      (ExeTabNextFrame),iy
 406+ BCF5 C9                     ret
 407+ BCF6
 408+ BCF6 3D           .cc3:   dec     a                       ;1
 409+ BCF7 28 6E                jr      z,.ExeRun
 410+ BCF9 3D                   dec     a                       ;2
 411+ BCFA 28 1D                jr      z,.ExeLoop
 412+ BCFC 3D                   dec     a                       ;3
 413+ BCFD CA 7C BD             jp      z,.ExeWait
 414+ BD00 3D                   dec     a                       ;4
 415+ BD01 CA B8 BD             jp      z,.ExeSwap
 416+ BD04 3D                   dec     a                       ;5
 417+ BD05 CA 02 BE             jp      z,.ExeAt
 418+ BD08 3D                   dec     a                       ;6
 419+ BD09 CA 2E BE             jp      z,.ExeUntil
 420+ BD0C 3D                   dec     a                       ;7
 421+ BD0D CA 45 BE             jp      z,.ExeAfter
 422+ BD10 3D                   dec     a                       ;8
 423+ BD11 CA 5C BE             jp      z,.ExeConfig
 424+ BD14 3D                   dec     a                       ;9
 425+ BD15 CA 9B BE             jp      z,.ExePeriodic
 426+ BD18              ;        debug_border_inc
 427+ BD18 C9                   ret
 428+ BD19
 429+ BD19              ; ------ exeloop
 430+ BD19              .ExeLoop:
 431+ BD19 FD 7E 03             ld      a,(iy+SExeLoop.state)
 432+ BD1C A7                   and     a
 433+ BD1D 28 17                jr      z,.cc6pulse
 434+ BD1F FD 35 04             dec     (iy+SExeLoop.ctr)
 435+ BD22 20 21                jr      nz,.cc6gap
 436+ BD24 FD 7E 01             ld      a,(iy+SExeLoop.pulse)
 437+ BD27 FD 77 04             ld      (iy+SExeLoop.ctr),a
 438+ BD2A FD 36 03 00          ld      (iy+SExeLoop.state),0
 439+ BD2E              .cc6pl:
 440+ BD2E FD 6E 07 FD          ld      hl,(iy+SExeLoop.pcp)    ;_hl_x iy,SExeLoop.pcp
 440+ BD32 66 08
 441+ BD34 18 15                jr      .ccx
 442+ BD36
 443+ BD36              .cc6pulse:
 444+ BD36 FD 35 04             dec     (iy+SExeLoop.ctr)
 445+ BD39 20 F3                jr      nz,.cc6pl
 446+ BD3B FD 7E 02             ld      a,(iy+SExeLoop.gap)
 447+ BD3E FD 77 04             ld      (iy+SExeLoop.ctr),a
 448+ BD41 FD 36 03 01          ld      (iy+SExeLoop.state),1
 449+ BD45
 450+ BD45              .cc6gap:
 451+ BD45 FD 6E 05 FD          ld      hl,(iy+SExeLoop.pcg)    ;_hl_x iy,SExeLoop.pcg
 451+ BD49 66 06
 452+ BD4B              .ccx:   ld_ix_x iy,SExeLoop.ix
 452+ BD4B FD 7E 09 DD >           ld   a,(iy+SExeLoop.ix),xl,a
 452+ BD4F 6F          >
 452+ BD50 FD 7E 0A DD >           ld   a,(iy+SExeLoop.ix+1),xh,a
 452+ BD54 67          >
 453+ BD55 01 0B 00             ld      bc,SExeLoop             ; length of the structure
 454+ BD58
 455+ BD58 FD 09        .ccr:   add     iy,bc
 456+ BD5A FD E5                push    iy
 457+ BD5C 11 62 BD             ld      de,.rret
 458+ BD5F D5                   push    de                  ; ret address
 459+ BD60 00           .efs:   nop                         ; scf or and a to pass frame start flag
 460+ BD61 E9                   jp      (hl)
 461+ BD62 FD E1        .rret:  pop     iy
 462+ BD64 C3 E9 BC             jp      .lloop
 463+ BD67
 464+ BD67              ; ------ exerun
 465+ BD67              .ExeRun:
 466+ BD67 FD 6E 01 FD          ld      hl,(iy+SExeRun.pc)
 466+ BD6B 66 02
 467+ BD6D                      ld_ix_x iy,SExeRun.ix
 467+ BD6D FD 7E 03 DD >           ld   a,(iy+SExeRun.ix),xl,a
 467+ BD71 6F          >
 467+ BD72 FD 7E 04 DD >           ld   a,(iy+SExeRun.ix+1),xh,a
 467+ BD76 67          >
 468+ BD77 01 05 00             ld      bc,SExeRun
 469+ BD7A 18 DC                jr      .ccr
 470+ BD7C
 471+ BD7C              ; ------ exe wait
 472+ BD7C              .ExeWait:
 473+ BD7C 3A 60 BD             ld      a,(ExeFrameStarted)
 474+ BD7F FE A7                cp         #a7
 475+ BD81 28 14                jr      z,.cc71
 476+ BD83 FD 5E 01 FD          ld      de,(iy+SExeWait.wait)      ;ld_de_x iy,SExeWait.wait
 476+ BD87 56 02
 477+ BD89
 478+ BD89 FD 73 03 FD  .cce:   ld      (iy+SExeWait.ctr),de       ;ld_x_de iy,SExeWait.ctr
 478+ BD8D 72 04
 479+ BD8F 01 09 00             ld      bc,SExeWait
 480+ BD92 FD 09                add     iy,bc
 481+ BD94 C3 E9 BC             jp      .lloop
 482+ BD97
 483+ BD97 FD 5E 03 FD  .cc71:  ld      de,(iy+SExeWait.ctr)       ;ld_de_x iy,SExeWait.ctr
 483+ BD9B 56 04
 484+ BD9D 1B                   dec     de
 485+ BD9E 7A                   ld      a,d
 486+ BD9F B3                   or      e
 487+ BDA0 20 E7                jr      nz,.cce
 488+ BDA2 FD 6E 05 FD          ld      hl,(iy+SExeWait.pc)        ;ld_hl_x iy,SExeWait.pc
 488+ BDA6 66 06
 489+ BDA8                      ld_ix_x iy,SExeWait.ix
 489+ BDA8 FD 7E 07 DD >           ld   a,(iy+SExeWait.ix),xl,a
 489+ BDAC 6F          >
 489+ BDAD FD 7E 08 DD >           ld   a,(iy+SExeWait.ix+1),xh,a
 489+ BDB1 67          >
 490+ BDB2 01 09 00             ld      bc,SExeWait
 491+ BDB5 C3 58 BD             jp      .ccr
 492+ BDB8
 493+ BDB8              ; ----- exe swap
 494+ BDB8              .ExeSwap:
 495+ BDB8 FD 6E 05 FD          ld      hl,(iy+SExeSwap.pc)        ;ld_hl_x iy,SExeSwap.pc
 495+ BDBC 66 06
 496+ BDBE FD 7E 03             ld      a,(iy+SExeSwap.state)
 497+ BDC1 A7                   and     a
 498+ BDC2 28 1F                jr      z,.cc8pulse
 499+ BDC4 FD 35 04             dec     (iy+SExeSwap.ctr)
 500+ BDC7 20 29                jr      nz,.cc8gap
 501+ BDC9 FD 7E 01             ld      a,(iy+SExeSwap.pulse)   ; get new frame counter
 502+ BDCC FD 77 04             ld      (iy+SExeSwap.ctr),a     ; update working counter
 503+ BDCF FD 36 03 00          ld      (iy+SExeSwap.state),0   ; change state to gap
 504+ BDD3              .cc8pl: ld_ix_x iy,SExeSwap.ixp
 504+ BDD3 FD 7E 07 DD >           ld   a,(iy+SExeSwap.ixp),xl,a
 504+ BDD7 6F          >
 504+ BDD8 FD 7E 08 DD >           ld   a,(iy+SExeSwap.ixp+1),xh,a
 504+ BDDC 67          >
 505+ BDDD 01 0B 00             ld      bc,SExeSwap
 506+ BDE0 C3 58 BD             jp      .ccr
 507+ BDE3
 508+ BDE3              .cc8pulse:
 509+ BDE3 FD 35 04             dec     (iy+SExeSwap.ctr)
 510+ BDE6 20 EB                jr      nz,.cc8pl
 511+ BDE8 FD 7E 02             ld      a,(iy+SExeSwap.gap)
 512+ BDEB FD 77 04             ld      (iy+SExeSwap.ctr),a
 513+ BDEE FD 36 03 01          ld      (iy+SExeSwap.state),1
 514+ BDF2
 515+ BDF2              .cc8gap:
 516+ BDF2                      ld_ix_x iy,SExeSwap.ixg
 516+ BDF2 FD 7E 09 DD >           ld   a,(iy+SExeSwap.ixg),xl,a
 516+ BDF6 6F          >
 516+ BDF7 FD 7E 0A DD >           ld   a,(iy+SExeSwap.ixg+1),xh,a
 516+ BDFB 67          >
 517+ BDFC 01 0B 00             ld      bc,SExeSwap
 518+ BDFF C3 58 BD             jp      .ccr
 519+ BE02
 520+ BE02              .ExeAt:
 521+ BE02 2A 65 81             ld      hl,(frames)
 522+ BE05 FD 5E 01 FD          ld      de,(iy+SExeFrame.fram)  ;ld_de_x iy,SExeFrame.fram
 522+ BE09 56 02
 523+ BE0B A7                   and     a
 524+ BE0C ED 52                sbc     hl,de
 525+ BE0E 01 07 00             ld      bc,SExeFrame
 526+ BE11 28 05                jr      z,.match
 527+ BE13 FD 09                add     iy,bc
 528+ BE15 C3 E9 BC             jp      .lloop
 529+ BE18
 530+ BE18 FD 6E 03 FD  .match: ld      hl,(iy+SExeFrame.pc)    ;ld_hl_x iy,SExeFrame.pc
 530+ BE1C 66 04
 531+ BE1E                      ld_ix_x iy,SExeFrame.ix
 531+ BE1E FD 7E 05 DD >           ld   a,(iy+SExeFrame.ix),xl,a
 531+ BE22 6F          >
 531+ BE23 FD 7E 06 DD >           ld   a,(iy+SExeFrame.ix+1),xh,a
 531+ BE27 67          >
 532+ BE28 01 07 00             ld      bc,SExeFrame
 533+ BE2B C3 58 BD             jp      .ccr
 534+ BE2E
 535+ BE2E              .ExeUntil:
 536+ BE2E 2A 65 81             ld      hl,(frames)
 537+ BE31 FD 5E 01 FD          ld      de,(iy+SExeFrame.fram)  ;ld_de_x iy,SExeFrame.fram
 537+ BE35 56 02
 538+ BE37 A7                   and     a
 539+ BE38 ED 52                sbc     hl,de
 540+ BE3A 01 07 00             ld      bc,SExeFrame
 541+ BE3D DA 18 BE             jp      c,.match
 542+ BE40 FD 09                add     iy,bc
 543+ BE42 C3 E9 BC             jp      .lloop
 544+ BE45
 545+ BE45              .ExeAfter:
 546+ BE45 2A 65 81             ld      hl,(frames)
 547+ BE48 FD 5E 01 FD          ld      de,(iy+SExeFrame.fram)  ;ld_de_x iy,SExeFrame.fram
 547+ BE4C 56 02
 548+ BE4E A7                   and     a
 549+ BE4F ED 52                sbc     hl,de
 550+ BE51 01 07 00             ld      bc,SExeFrame
 551+ BE54 D2 18 BE             jp      nc,.match
 552+ BE57 FD 09                add     iy,bc
 553+ BE59 C3 E9 BC             jp      .lloop
 554+ BE5C
 555+ BE5C              .ExeConfig:
 556+ BE5C FD 23                inc     iy
 557+ BE5E FD 7E 00     .ecl:   ld      a,(iy+0)         ; configuration id
 558+ BE61 FD 23                inc     iy
 559+ BE63 FE 01                cp      1                ; word patcher
 560+ BE65 28 09                jr      z,.ec0
 561+ BE67 FE 02                cp      2                ; byte patcher
 562+ BE69 28 1E                jr      z,.ec1
 563+ BE6B A7                   and     a              ; end of config block
 564+ BE6C CA A9 BC             jp      z,.cc4         ; goto load next command
 565+ BE6F C9                   ret                    ; ret=error!!
 566+ BE70
 567+ BE70 FD 6E 00 FD  .ec0:   ld      hl,(iy+0)      ;ld_hl_x iy,0
 567+ BE74 66 01
 568+ BE76 FD 5E 02 FD          ld      de,(iy+2)      ;ld_de_x iy,2
 568+ BE7A 56 03
 569+ BE7C 73                   ld      (hl),e
 569+ BE7D 23             inc hl
 570+ BE7E 72                   ld      (hl),d
 571+ BE7F FD 23       > inc     iy
 571+ BE81 FD 23       > inc     iy
 571+ BE83 FD 23       > inc     iy
 571+ BE85 FD 23       > inc     iy
 572+ BE87 18 D5                jr      .ecl
 573+ BE89
 574+ BE89 FD 6E 00 FD  .ec1:   ld      hl,(iy+0)      ;ld_hl_x iy,0
 574+ BE8D 66 01
 575+ BE8F FD 7E 02             ld      a,(iy+2)
 576+ BE92 77                   ld      (hl),a
 577+ BE93 FD 23       > inc     iy
 577+ BE95 FD 23       > inc     iy
 577+ BE97 FD 23       > inc     iy
 578+ BE99 18 C3                jr      .ecl
 579+ BE9B
 580+ BE9B              .ExePeriodic:
 581+ BE9B 3A 60 BD             ld      a,(ExeFrameStarted)
 582+ BE9E 32 DB BE             ld      (.EPcy),a                   ; mimic FrameStarted SCF
 583+ BEA1 FE A7                cp         #a7
 584+ BEA3 28 04                jr      z,1F
 585+ BEA5 FD 36 07 00          ld      (iy+SExePeriodic.cprio),0
 586+ BEA9 FD 6E 05 FD  1       ld      hl,(iy+SExePeriodic.iprio)
 586+ BEAD 66 06
 587+ BEAF FD 5E 07 FD          ld      de,(iy+SExePeriodic.cprio)
 587+ BEB3 56 08
 588+ BEB5 19                   add     hl,de
 589+ BEB6 54                   ld      d,h
 590+ BEB7 FD 75 07             ld      (iy+SExePeriodic.cprio),l
 591+ BEBA 01 09 00             ld      bc,SExePeriodic
 592+ BEBD FD 6E 01 FD          ld      hl,(iy+SExePeriodic.pc)     ; jump addr
 592+ BEC1 66 02
 593+ BEC3                      ld_ix_x iy,SExePeriodic.ix          ; param
 593+ BEC3 FD 7E 03 DD >           ld   a,(iy+SExePeriodic.ix),xl,a
 593+ BEC7 6F          >
 593+ BEC8 FD 7E 04 DD >           ld   a,(iy+SExePeriodic.ix+1),xh,a
 593+ BECC 67          >
 594+ BECD FD 09                add     iy,bc
 595+ BECF 15           1       dec     d
 596+ BED0 FA E9 BC             jp      m,.lloop
 597+ BED3 E5 D5 FD E5          push    hl,de,iy
 598+ BED7 11 DD BE             ld      de,.EPRet
 599+ BEDA D5                   push    de
 600+ BEDB 00           .EPcy:  nop                                 ;anda or scf
 601+ BEDC E9                   jp      (hl)
 602+ BEDD FD E1 D1 E1  .EPRet: pop     iy,de,hl
 603+ BEE1 18 EC                jr      1B
 604+ BEE3
 605+ BEE3              ;-------------------------------------------------------------------------------
 606+ BEE3              ; execmd init
 607+ BEE3              ; input: HL - address of command list
 608+ BEE3              ;-------------------------------------------------------------------------------
 609+ BEE3              .init:
 610+ BEE3 22 99 BC             ld      (ExeTabInProgress),hl
 611+ BEE6 22 A7 BC             ld      (ExeTabNextFrame),hl
 612+ BEE9 22 D0 BC             ld      (ExeTabStart),hl
 613+ BEEC 21 01 00             ld      hl,1
 614+ BEEF 22 95 BC             ld      (ExeFrames),hl
 615+ BEF2 3E 37                ld      a,    #37
 616+ BEF4 32 60 BD             ld      (ExeFrameStarted),a
 617+ BEF7 3E A7                ld      a,   #a7
 618+ BEF9 32 0B BF             ld      (.idleFlag),a
 619+ BEFC C9                   ret
 620+ BEFD
 621+ BEFD              ; used for WaitUntil where it jumps (not calls) to internal kernel routine
 622+ BEFD
 623+ BEFD              .service:
 624+ BEFD E1                   pop     hl                    ; pop ret address
 625+ BEFE FD E1                pop     iy                    ; pop iy (kernel data pointer)
 626+ BF00 DD 22 A7 BC          ld      (ExeTabNextFrame),ix
 627+ BF04 C3 A0 BC             jp      .next                 ; jump to intended service
 628+ BF07
 629+ BF07 CD E3 BE     .idle:  call    .init
 630+ BF0A 76           1       halt
 631+ BF0B              ;        debug_border_inc
 632+ BF0B              .idleFlag:
 633+ BF0B A7                   and     a
 634+ BF0C 30 FC                jr      nc,1B
 635+ BF0E C9           dummy:  ret
 636+ BF0F
 637+ BF0F              ; call to user routine from user page to destination page.
 638+ BF0F              ; Ensures return to proper page and preserves registers and flags
 639+ BF0F              ; call    longCall
 640+ BF0F              ; db      page
 641+ BF0F              ; dw      address
 642+ BF0F              longCall:
 643+ BF0F 22 38 BF             ld      (.shl+1),hl
 644+ BF12 ED 53 3B BF          ld      (.sde+1),de
 645+ BF16 ED 43 3E BF          ld      (.sbc+1),bc
 646+ BF1A 32 41 BF             ld      (.saa+1),a
 647+ BF1D
 648+ BF1D E1                   pop     hl                 ;get ptr for arguments
 649+ BF1E 4E                   ld      c,(hl)             ;jump page
 650+ BF1F 23                   inc     hl
 651+ BF20 5E                   ld      e,(hl)             ;jump addr
 652+ BF21 23                   inc     hl
 653+ BF22 56                   ld      d,(hl)             ;
 654+ BF23 23                   inc     hl
 655+ BF24 E5                   push    hl                 ;ret address
 656+ BF25 ED 53 43 BF          ld      (.jmp+1),de
 657+ BF29 3A 68 81             ld      a,(@page)
 658+ BF2C F5                   push    af
 659+ BF2D 21 45 BF             ld      hl,.lret
 660+ BF30 E5                   push    hl
 661+ BF31 79                   ld      a,c
 662+ BF32                      page_a
 662+ BF32 32 68 81    >         ld      (@page),a
 662+ BF35             >         page_am
 662+ BF35 D3 FD       >         out    (#fd),a
 663+ BF37 21 55 55     .shl:   ld      hl,#5555
 664+ BF3A 11 55 55     .sde:   ld      de,#5555
 665+ BF3D 01 55 55     .sbc:   ld      bc,#5555
 666+ BF40 3E 55        .saa:   ld      a,#55
 667+ BF42 C3 55 55     .jmp:   jp      #5555
 668+ BF45
 669+ BF45 32 4F BF     .lret:  ld      (.sra+1),a
 670+ BF48 F1                   pop     af
 671+ BF49                      page_a
 671+ BF49 32 68 81    >         ld      (@page),a
 671+ BF4C             >         page_am
 671+ BF4C D3 FD       >         out    (#fd),a
 672+ BF4E 3E 55        .sra:   ld      a,#55
 673+ BF50 C9                   ret
 674+ BF51
 675+ BF51              save_page:
 676+ BF51 3A 68 81             ld      a,(@page)
 677+ BF54 32 59 BF             ld      (load_page+1),a
 678+ BF57 C9                   ret
 679+ BF58
 680+ BF58              load_page:
 681+ BF58 3E 55                ld      a,#55
 682+ BF5A              apage:
 683+ BF5A 32 68 81             ld     (@page),a
 684+ BF5D                      page_am
 684+ BF5D D3 FD       >         out    (#fd),a
 685+ BF5F C9                   ret
 686+ BF60 ~            /*
 687+ BF60 ~            ; --- wait BC number of frames
 688+ BF60 ~            ;waitFrames:
 689+ BF60 ~            1       halt
 690+ BF60 ~                    cpi
 691+ BF60 ~                    jp      pe,1B
 692+ BF60 ~                    ret
 693+ BF60 ~            */
 694+ BF60              ;--- execute number of HALT instructions specified in a
 695+ BF60              ; input: a (a=0 --> ret)
 696+ BF60              waitFrames:
 697+ BF60 A7           1        and   a
 698+ BF61 C8                    ret   z
 699+ BF62 76                    halt
 700+ BF63 3D                    dec   a
 701+ BF64 18 FA                 jr    1B
 702+ BF66
 703+ BF66              ; --- parametter in the stack
 704+ BF66              wait4FrameInStack:
 705+ BF66 E1                   pop     hl
 706+ BF67 4E                   ld      c,(hl)
 706+ BF68 23             inc hl
 707+ BF69 46                   ld      b,(hl)
 707+ BF6A 23             inc hl
 708+ BF6B E5                   push    hl
 709+ BF6C              ; --- wait until BC-th frame occurs
 710+ BF6C              wait4Frame:
 711+ BF6C A7           1       and     a
 712+ BF6D 2A 65 81             ld      hl,(frames)
 713+ BF70 ED 42                sbc     hl,bc
 714+ BF72 D0                   ret     nc
 715+ BF73 76                   halt
 716+ BF74 18 F6                jr      1B
 717+ BF76
 718+ BF76              testMachine:
 719+ BF76              ;-- set memory model
 720+ BF76              ;        ld      bc,#eff7              ; disable pentagon upper memory (128k only)
 721+ BF76              ;        ld      a,4
 722+ BF76              ;        out     (c),a
 723+ BF76
 724+ BF76              ; --- measure reads from bank 1
 725+ BF76              ; (bank 1 is slow on 128k, fast on +3)
 726+ BF76              ; im2 vector at testMachine.interrupt
 727+ BF76              ;        ld     a,#11
 728+ BF76              ;        ld     bc,#7ffd
 729+ BF76              ;        out    (c),a                  ; bank 1, rom 0
 730+ BF76
 731+ BF76 3E 51                ld     a,#51
 732+ BF78 D3 FD                out    (#fd),a
 733+ BF7A
 734+ BF7A 11 00 00             ld     de,0                   ; reset counter
 735+ BF7D 06 C0                ld     b,#c0                  ; high address #c000
 736+ BF7F
 737+ BF7F FB                   ei
 738+ BF80 76                   halt                          ; wait for interrupt
 739+ BF81 21 8E BF             ld     hl,.save               ; modify jump address to exit loop
 740+ BF84 22 FA BF             ld     (.interrupt+1),hl
 741+ BF87 21 8A BF             ld     hl,.loop               ; set jump address to loop during this frame
 742+ BF8A              .loop:
 743+ BF8A 0A          > ld     a,(bc)
 743+ BF8B 0A          > ld     a,(bc)
 744+ BF8C 13                   inc    de
 745+ BF8D E9                   jp     (hl)
 746+ BF8E              .save:
 747+ BF8E F3                   di
 748+ BF8F ED 53 69 81          ld     (memReads),de          ; #b68  128k, #b88  +3, #ba8  pentagon
 749+ BF93 7A                   ld     a,d
 750+ BF94 16 00                ld     d,0                    ; machine type in d
 751+ BF96 FE 0B                cp     #0b                    ; #bxx is speed of all compatible models
 752+ BF98 38 15                jr     c,1F                   ; d=0 machine is too slow
 753+ BF9A 28 04                jr     z,2F
 754+ BF9C 16 06                ld     d,#06                  ; d=#06 machine is too fast
 755+ BF9E 18 0F                jr     1F
 756+ BFA0
 757+ BFA0 7B           2       ld     a,e                    ; low byte is enough
 758+ BFA1 FE 68                cp     #68                    ; test of toastrack 128k, +2
 759+ BFA3 38 0A                jr     c,1F                   ; slower machines
 760+ BFA5 16 01                ld     d,1                    ; keep flags
 761+ BFA7 28 06                jr     z,1F                   ; d=1 128k/+2
 762+ BFA9 14                   inc    d                      ; 2
 763+ BFAA FE 88                cp     #88                    ;
 764+ BFAC 28 01                jr     z,1F                   ; d=2 +3
 765+ BFAE 14                   inc    d                      ; 3
 766+ BFAF              ;        cp     #a8
 767+ BFAF              ;        jr     z,1F                   ; d=3 Pentagon
 768+ BFAF              ; -- more machines
 769+ BFAF
 770+ BFAF 7A           1       ld     a,d
 771+ BFB0 32 63 81             ld     (machine),a
 772+ BFB3              ; -- test of cpu
 773+ BFB3 01 FD FF             ld     bc,#fffd
 774+ BFB6 50                   ld     d,b
 775+ BFB7 1E BF                ld     e,#bf
 776+ BFB9 3E 07                ld     a,7
 777+ BFBB ED 79                out    (c),a
 778+ BFBD 78                   ld     a,b                     ;#ff
 779+ BFBE 43                   ld     b,e
 780+ BFBF ED 79                out    (c),a
 781+ BFC1 42                   ld     b,d
 782+ BFC2 3E 00                ld     a,#00                   ;A-freq fine tune
 783+ BFC4 ED 79                out    (c),a
 784+ BFC6 43                   ld     b,e
kern_exec.a80(785): warning[out0]: 'out (c),0' is unstable, on CMOS based chips it does `out (c),255`
 785+ BFC7 ED 71                out    (c),0                   ;NMOS out (c),0, CMOS out (c),#ff
 786+ BFC9 42                   ld     b,d
 787+ BFCA ED 78                in     a,(c)                   ; check what was sent to the port
 788+ BFCC E6 F0                and    #f0
 789+ BFCE 47                   ld     b,a
 790+ BFCF
 791+ BFCF              .z80Ntest:
 792+ BFCF                      ;; detect Z80N (ie. Next-compatible machine), and tune settings when detected
 793+ BFCF                      ; modifies: AF always, H (!) on regular Z80
 794+ BFCF 3E 80                ld      a,$80
 795+ BFD1 ED 24 00 00          DB $ED, $24, $00, $00   ; mirror a : nop : nop
 796+ BFD5
 797+ BFD5 4F                   ld      c,a
 798+ BFD6 B0                   or      b
 799+ BFD7 32 64 81             ld     (machine.cpu),a
 800+ BFDA 0D                   dec     c
 801+ BFDB 20 1B                jr      nz,.notZ80nCpu
 802+ BFDD
 803+ BFDD                      ;; Z80N detected - do ZX Next configuration fine-tuning + check
 804+ BFDD 01 3B 24             ld      bc,$243B
 805+ BFE0                      ; switch AY to ACB stereo
 806+ BFE0 3E 08                ld      a,$08
 807+ BFE2 ED 79                out     (c),a
 808+ BFE4 04                   inc     b
 809+ BFE5 ED 78                in      a,(c)           ; A = nextreg $08 "Peripheral 3"
 810+ BFE7 F6 20                or      %00100000       ; switch ACB stereo ON
 811+ BFE9 ED 79                out     (c),a           ; write nextreg $08
 812+ BFEB 05                   dec     b
 813+ BFEC                      ; switch AY to YM mode
 814+ BFEC 3E 06                ld      a,$06
 815+ BFEE ED 79                out     (c),a
 816+ BFF0 04                   inc     b
 817+ BFF1 ED 78                in      a,(c)           ; A = nextreg $06 "Peripheral 2"
 818+ BFF3 E6 FC                and     %11111100       ; switch AY into "YM" mode (bottom bits %00)
 819+ BFF5 3C                   inc     a               ; "AY" mode (bottom bits %01)
 820+ BFF6 ED 79                out     (c),a           ; write nextreg $06
 821+ BFF8              .notZ80nCpu:
 822+ BFF8                              ; regular ZX128 setup
 823+ BFF8 C9                   ret
 824+ BFF9
 825+ BFF9              .interrupt:                           ; im2 vector here
 826+ BFF9 21 8A BF             ld     hl,.loop
 827+ BFFC              .dummyint:
 828+ BFFC FB                   ei
 829+ BFFD C9                   ret
 830+ BFFE
 831+ BFFE              ; execute commads (usually calls routine with parametters pointer in IX)
 832+ BFFE              ; self-mofifying code variables
 833+ BFFE              ExeFrames:          EQU  execmd.ef   +1  ; counter of frames
 834+ BFFE              ExeTabInProgress:   EQU  execmd.ttab +2  ; current position of executor table within frame
 835+ BFFE              ExeTabNextFrame:    EQU  execmd.cc2  +2  ; next position after FrameEnd
 836+ BFFE              ExeTabStart:        EQU  execmd.erst +2  ; address of table if looped
 837+ BFFE              ExeFrameStarted:    EQU  execmd.efs      ; flags first frame of FrameStart
 838+ BFFE              ExeFrameInit:       EQU  execmd.next+1   ; toggle _scf or _anda to enable FrameStart CY for call (init routine)
 839+ BFFE              ExeSetExl:          EQU  imrut.exl+1     ; address for set-up of "exelst". Runs @ interrupt
 840+ BFFE              ;ExeTabLoop:         EQU  execmd.el       ; 00 flags that table will be reloaded at the end (c9 not)
 841+ BFFE
 842+ BFFE              himem:  equ     $
 843+ BFFE                      display "end of himem:",himem
 844+ BFFE              ; ----------------------------------
# file closed: Q:\Development\Dev-ZX\demo_cats\kernel/kern_exec.a80
  62  BFFE                      ORG     lowmem                   ; lowmem - resulting address from kernel init
  63  6FFF
  64  6FFF              ; ------------------------------------------------------------------------------
  65  6FFF              ; this code is called via kernel exeptr service
  66  6FFF              ; list of executed calls is in the table "exp" ended with dw 0
  67  6FFF
  68  6FFF              setup:
  69  6FFF                      border  0
  69  6FFF 3E 00       >          ld a,0
  69  7001 D3 FE       >  out (#fe),a
  70  7003 21 00 58             ld      hl,#5800
  71  7006 11 01 58             ld      de,#5801
  72  7009 01 FF 02             ld      bc,#2ff
  73  700C 75                   ld      (hl),l
  74  700D ED B0                ldir
  75  700F 21 A6 80             ld      hl,exe.demo                     ; table of demo script
  76  7012 CD E3 BE             call    execmd.init
  77  7015 21 A2 80             ld      hl,exl.interrupt                ; system exec list (system services like music, keyboard)
  78  7018 22 32 BC             ld      (ExeSetExl),hl
  79  701B              ;        call    displayMachine
  80  701B C9                   ret
  81  701C
  82  701C              ;-- editor core libs
  83  701C              ;        include "libs/keys.a80"         ; keyscan routine with debouncer
  84  701C              ;        include "libs/editor16b.a80"    ; effect editor 16bit capable
  85  701C
  86  701C              ;--- e2 demo routines
  87  701C                      include "libs/egl.a80"
# file opened: Q:\Development\Dev-ZX\demo_cats\libs/egl.a80
   1+ 701C              ; egl - eklhaft gfx library
   2+ 701C              ; 8/7/2018 10:21:13 PM
   3+ 701C              _eglstart:
   4+ 701C              ;        include "libs/egl_scroll.a80"
   5+ 701C              s: = $
   6+ 701C                      include "libs/egl_vprint.a80"
# file opened: ./libs/egl_vprint.a80
   1++701C                      MODULE egl
   2++701C              vprint:
   3++701C              .run:
   4++701C DC A8 70             call  c,.init
   5++701F              .chr:
   6++701F DD 4E 09             ld    c,(ix+vpxy.curx)
   7++7022 DD 46 0A             ld    b,(ix+vpxy.cury)
   8++7025 CD 95 6D             call  @PixCY2Adr
   9++7028 DD 7E 02             ld    a,(ix+vpxy.pdr)
  10++702B E6 80                and   #80
  11++702D B4                   or    h
  12++702E 67                   ld    h,a
  13++702F
  14++702F DD 75 07 DD          ld    (ix+vpxy.vrm),hl
  14++7033 74 08
  15++7035
  16++7035 DD 6E 0B DD          ld    hl,(ix+vpxy.ctxt)
  16++7039 66 0C
  17++703B 7E                   ld    a,(hl)
  18++703C A7                   and   a
  19++703D C8                   ret   z                         ; ret when end of text reached
  20++703E
  21++703E 23                   inc   hl
  22++703F DD 75 0B DD          ld    (ix+vpxy.ctxt),hl         ; next char
  22++7043 74 0C
  23++7045
  24++7045 FE 0D                cp    13                        ; cr - move cursor
  25++7047 20 0B                jr    nz,1F
  26++7049 DD 34 09             inc   (ix+vpxy.curx)
  27++704C DD 46 01             ld    b,(ix+vpxy.aty)           ; copy y-pos
  28++704F DD 70 0A             ld    (ix+vpxy.cury),b
  29++7052 18 CB                jr    .chr
  30++7054
  31++7054 FE 20        1       cp    #20
  32++7056 21 C1 70             ld    hl,space
  33++7059 28 2B                jr    z,.chdrw
  34++705B FE 30                cp    '0'
  35++705D 38 C0                jr    c,.chr                   ; less than 0
  36++705F FE 3A                cp    '9'+1
  37++7061 30 0E                jr    nc,1F                     ; higher than 9
  38++7063
  39++7063 DD 6E 05 DD          ld    hl,(ix+vpxy.fnt)          ; numbers are after charset
  39++7067 66 06
  40++7069 11 68 00             ld    de,4*26
  41++706C 19                   add   hl,de
  42++706D D6 30                sub   '0'
  43++706F 18 0F                jr    .charp
  44++7071
  45++7071 FE 61        1       cp    'a'
  46++7073 38 AA                jr    c,.chr
  47++7075 FE 7B                cp    'z'+1
  48++7077 D0                   ret   nc
  49++7078 D6 61                sub   'a'
  50++707A DD 6E 05 DD          ld    hl,(ix+vpxy.fnt)
  50++707E 66 06
  51++7080              .charp:
  52++7080 87                   add   a,a
  53++7081 87                   add   a,a
  54++7082 5F                   ld    e,a
  55++7083 16 00                ld    d,0
  56++7085 19                   add   hl,de
  57++7086 DD 5E 07 DD  .chdrw: ld    de,(ix+vpxy.vrm)
  57++708A 56 08
  58++708C 06 04                ld    b,4
  59++708E
  60++708E 1A           1         ld    a,(de)
  61++708F B6                     or    (hl)
  62++7090 DD CB 02 46            bit   0,(ix+vpxy.pdr)         ; or with vram or overwrite
  63++7094 20 01                  jr    nz,2F
  64++7096 7E                     ld    a,(hl)
  65++7097 12           2         ld    (de),a
  66++7098 23                     inc   hl
  67++7099 CD B8 6D               call  vidd
  68++709C 10 F0                  djnz  1B
  69++709E DD 7E 0A             ld    a,(ix+vpxy.cury)
  70++70A1 D6 04                sub   4
  71++70A3 D8                   ret   c
  72++70A4 DD 77 0A             ld    (ix+vpxy.cury),a
  73++70A7 C9                   ret
  74++70A8
  75++70A8 ~            /*
  76++70A8 ~            ;------------------
  77++70A8 ~                    bit   0,(ix+vpxy.pdr)
  78++70A8 ~                    ld    a,_orhl                   ; bit 0=1 then OR with screen
  79++70A8 ~                    jr    nz,1F
  80++70A8 ~                    ld    a,_ldahl                  ; bit 0=0 then overwrite screen
  81++70A8 ~            1       ld    (.lpmd),a
  82++70A8 ~                    ld    b,4
  83++70A8 ~
  84++70A8 ~            1         ld    a,(de)
  85++70A8 ~            .lpmd:    or    (hl)
  86++70A8 ~                      ld    (de),a
  87++70A8 ~                      inc   hl
  88++70A8 ~                      call  vidd
  89++70A8 ~                      djnz  1B
  90++70A8 ~                    ld    a,(ix+vpxy.cury)
  91++70A8 ~                    sub   4
  92++70A8 ~                    ret   c
  93++70A8 ~                    ld    (ix+vpxy.cury),a
  94++70A8 ~                    ret
  95++70A8 ~
  96++70A8 ~            ;------------------
  97++70A8 ~
  98++70A8 ~                    dup   3
  99++70A8 ~                      ld    a,(de)
 100++70A8 ~                      or    (hl)
 101++70A8 ~                      ld    (de),a
 102++70A8 ~                      inc   hl
 103++70A8 ~                      call  vidd
 104++70A8 ~                    edup
 105++70A8 ~                      ld    a,(de)
 106++70A8 ~                      or    (hl)
 107++70A8 ~                      ld    (de),a
 108++70A8 ~                    ld    a,(ix+vpxy.cury)
 109++70A8 ~                    sub   4
 110++70A8 ~                    ret   c
 111++70A8 ~                    ld    (ix+vpxy.cury),a
 112++70A8 ~                    ret
 113++70A8 ~
 114++70A8 ~            .init:  ld    c,(ix+vpxy.atx)
 115++70A8 ~                    ld    b,(ix+vpxy.aty)
 116++70A8 ~                    ld    (ix+vpxy.curx),c
 117++70A8 ~                    ld    (ix+vpxy.cury),b
 118++70A8 ~
 119++70A8 ~                    bit   7,(ix+vpxy.pdr)
 120++70A8 ~                    ld    a,#c9
 121++70A8 ~                    jr    z,1F
 122++70A8 ~                    xor   a
 123++70A8 ~            1       ld    (PixCH2AdrVrm.mod),a
 124++70A8 ~
 125++70A8 ~                    ld    hl,(ix+vpxy.txt)
 126++70A8 ~                    ld    (ix+vpxy.ctxt),hl
 127++70A8 ~                    ret
 128++70A8 ~
 129++70A8 ~            PixCH2AdrVrm:
 130++70A8 ~                    call  @PixCY2Adr
 131++70A8 ~            .mod:   ret
 132++70A8 ~                    set   7,h
 133++70A8 ~                    ret
 134++70A8 ~            */
 135++70A8
 136++70A8 DD 4E 00     .init:  ld    c,(ix+vpxy.atx)
 137++70AB DD 46 01             ld    b,(ix+vpxy.aty)
 138++70AE DD 71 09             ld    (ix+vpxy.curx),c
 139++70B1 DD 70 0A             ld    (ix+vpxy.cury),b
 140++70B4 DD 6E 03 DD          ld    hl,(ix+vpxy.txt)
 140++70B8 66 04
 141++70BA DD 75 0B DD          ld    (ix+vpxy.ctxt),hl
 141++70BE 74 0C
 142++70C0 C9                   ret
 143++70C1
 144++70C1 00 00 00 00  space:  ds      4,0
 145++70C5              font1:  incbin  "fonts/alien_v1_1x4_AZ09.bin"
 146++7155                      ENDMODULE
 147++7155
# file closed: ./libs/egl_vprint.a80
   7+ 7155                      display " vprint:",$-s
   8+ 7155              s: = $
   9+ 7155                      include "libs/egl_delinear.a80"
# file opened: ./libs/egl_delinear.a80
   1++7155                      MODULE  egl
   2++7155              delinear:
   3++7155 21 00 40             ld       hl,#4000
   4++7158 CD 61 71             call     .thrd
   5++715B CD 61 71             call     .thrd
   6++715E C3 61 71             jp       .thrd
   7++7161
   8++7161              .thrd:
   9++7161 E5                   push     hl
  10++7162 DD 26 20             ld       xh,32
  11++7165 E5           .l3:    push     hl
  12++7166 11 00 6A             ld       de,@swap
  13++7169 E5 D5                push     hl,de
  14++716B 01 20 00             ld       bc,#20
  15++716E DD 2E 40             ld       xl,64
  16++7171 7E           .l1:    ld       a,(hl)
  17++7172 12                   ld       (de),a
  18++7173 13                   inc      de
  19++7174 09                   add      hl,bc
  20++7175 DD 2D                dec      xl
  21++7177 20 F8                jr       nz,.l1
  22++7179 D1 E1                pop      de,hl
  23++717B 06 40                ld       b,64
  24++717D 1A           .l2:    ld       a,(de)
  25++717E 77                   ld       (hl),a
  26++717F 13                   inc      de
  27++7180 CD C7 6D             call     vid
  28++7183 10 F8                djnz     .l2
  29++7185 E1                   pop      hl
  30++7186 2C                   inc      l
  31++7187 DD 25                dec      xh
  32++7189 20 DA                jr       nz,.l3
  33++718B E1                   pop      hl
  34++718C 7C                   ld       a,h
  35++718D C6 08                add      a,8
  36++718F 67                   ld       h,a
  37++7190 C9                   ret
  38++7191                      ENDMODULE
# file closed: ./libs/egl_delinear.a80
  10+ 7191                      display " delinr:",$-s
  11+ 7191              ;        include "libs/egl_linehv.a80"
  12+ 7191              s: = $
  13+ 7191                      include "libs/egl_atrplay.a80"
# file opened: ./libs/egl_atrplay.a80
   1++7191                      MODULE egl
   2++7191
   3++7191              backFlash:
   4++7191 E1                   pop      hl
   5++7192 5E 23 56 23          ldi      de,(hl)
   6++7196 ED 53 48 81          ld       (@rtFlash.atFrame),de      ; frame event (when it happens)
   7++719A 7A                   ld       a,d
   8++719B B3                   or       e                          ; DE=0  test below
   9++719C 5E 23 56 23          ldi      de,(hl)
  10++71A0 ED 53 4F 81          ld       (@rtFlash.rtLength),de     ; length of FRAME - ENDF
  11++71A4 7E                   ld       a,(hl)
  11++71A5 23             inc hl
  12++71A6 32 55 81             ld       (@rtFlash.fGap),a
  13++71A9 3E 01                ld       a,1
  14++71AB 32 56 81             ld       (@rtFlash.fState),a
  15++71AE 56                   ld       d,(hl)
  15++71AF 23             inc hl            ; beginning color
  16++71B0 5E                   ld       e,(hl)
  16++71B1 23             inc hl            ; difference of colors (e.g. 8, -8, 9, -9)
  17++71B2 46                   ld       b,(hl)
  17++71B3 23             inc hl            ; number of colors
  18++71B4 E5                   push     hl
  19++71B5 21 43 81             ld       hl,@rtFlash                ; DE<>0 (frame event defined) = wait for it
  20++71B8 20 03                jr       nz,1F                      ; test of DE=0 from above!
  21++71BA 21 4F 81             ld       hl,@rtFlash.now            ; DE=0  (frame event NOT define) = execute NOW
  22++71BD E5           1       push     hl
  23++71BE 21 A7 7A             ld       hl,@dataSF
  24++71C1 CD C7 72             call     egl.clearatr.make          ; create attribute dataset
  25++71C4                      callix egl.clearatr.init, atrScrFlash
  25++71C4 DD 21 9D 7A >         ld      ix,atrScrFlash
  25++71C8 CD 8A 72    >         call    egl.clearatr.init
  26++71CB E1                   pop      hl
  27++71CC CD E3 BE             call     @execmd.init               ; execute flash effect
  28++71CF E1                   pop      hl
  29++71D0 E9                   jp       (hl)
  30++71D1
  31++71D1              flash:
  32++71D1 21 3F 3F     .wht:    ld     hl,#3f3f
  33++71D4 18 0D                 jr     1F
  34++71D6 21 00 00     .blk:    ld     hl,0
  35++71D9 18 08                 jr     1F
  36++71DB DD 7C 6F 67  .col:    ld     a,xh,l,a,h,a
  37++71DF DD 7D DD 67           ld     a,xl,xh,a
  38++71E3 22 A7 7A     1        ld     (@dataSF),hl
  39++71E6 DD 22 A9 7A           ld     (@dataSF+2),ix
  40++71EA 3E FF                 ld     a,#ff
  41++71EC 32 AB 7A              ld     (@dataSF+4),a
  42++71EF 21 05 00              ld     hl,5
  43++71F2 22 4F 81              ld     (@rtFlash.rtLength),hl     ; length of FRAME - ENDF
  44++71F5 3E 04                 ld     a,4
  45++71F7 32 55 81              ld     (@rtFlash.fGap),a
  46++71FA                       callix egl.clearatr.init, atrScrFlash
  46++71FA DD 21 9D 7A >         ld      ix,atrScrFlash
  46++71FE CD 8A 72    >         call    egl.clearatr.init
  47++7201 21 4F 81              ld     hl,@rtFlash.now
  48++7204 37           .tgl:    scf                               ; scf | and a
  49++7205 DA 07 BF              jp     c,@execmd.idle
  50++7208 C3 E3 BE              jp     @execmd.init
  51++720B
  52++720B              ;-----------------------------------
  53++720B              ; data = attr values. Bit 7=1 end of data
  54++720B              ; mode: bit 0=0 - no border,  =1 - border as paper
  55++720B              ;       bit 1=0 - no repeat,  =1 - repeat sequence
  56++720B              ;       bit 2=0 - no page,    =1 - page-out memory
  57++720B              ;       bit 3=0 - no flip vrm =1 - flip vram (xor page value with %00001011)
  58++720B              ;       bit 7=0 - addr #58XX  =1  #d8XX addressing
  59++720B
  60++720B              clearatr:
  61++720B DC 8A 72             call     c,.init
  62++720E              .run:
  63++720E AF                   xor      a
  64++720F 32 83 72             ld       (.rvram+1),a
  65++7212 3A 68 81             ld       a,(@page)
  66++7215 08                   ex       af,af
  67++7216 DD 5E 08 DD          ld       de,(ix+clatt.ptr)
  67++721A 56 09
  68++721C DD 6E 06 DD          ld       hl,(ix+clatt.addr)
  68++7220 66 07
  69++7222 1A                   ld       a,(de)
  70++7223 A7                   and      a                              ; mark end of the block
  71++7224 F2 2F 72             jp       p,1F
  72++7227
  73++7227 DD CB 04 4E          bit      1,(ix+clatt.mode)              ; repeat sequence
  74++722B 37                   scf
  75++722C 20 DD                jr       nz,clearatr
  76++722E C9                   ret
  77++722F
  78++722F 13           1       inc      de
  79++7230 DD 73 08 DD          ld       (ix+clatt.ptr),de
  79++7234 72 09
  80++7236 ED 73 7F 72          ld       (.savesp+1),sp
  81++723A F9                   ld       sp,hl
  82++723B 6F                   ld       l,a
  83++723C 67                   ld       h,a
  84++723D
  85++723D DD CB 04 46          bit      0,(ix+clatt.mode)              ; border as paper
  86++7241 28 07                jr       z,1F
  87++7243 0F                   rrca
  88++7244 0F                   rrca
  89++7245 0F                   rrca
  90++7246 E6 07                and      7
  91++7248 D3 FE                out      (#fe),a
  92++724A              1
  93++724A DD CB 04 56          bit      2,(ix+clatt.mode)              ; paging used?
  94++724E 28 19                jr       z,2F
  95++7250 DD CB 04 5E          bit      3,(ix+clatt.mode)
  96++7254 3E 0A                ld       a,%00001010                    ; xor mask to flip 5/7 + bit 3 (2nd vram)
  97++7256 20 01                jr       nz,1F
  98++7258 AF                   xor      a
  99++7259 DD AE 05     1       xor      (ix+clatt.page)
 100++725C DD 77 05             ld       (ix+clatt.page),a
 101++725F                      page_a
 101++725F 32 68 81    >         ld      (@page),a
 101++7262             >         page_am
 101++7262 D3 FD       >         out    (#fd),a
 102++7264 E6 08                and      8
 103++7266 32 83 72             ld       (.rvram+1),a
 104++7269 DD 46 01     2       ld       b,(ix+clatt.hght)
 105++726C              .loop:
 106++726C                      DUP      16
 107++726C E5          >          push     hl
 107++726D E5          >          push     hl
 107++726E E5          >          push     hl
 107++726F E5          >          push     hl
 107++7270 E5          >          push     hl
 107++7271 E5          >          push     hl
 107++7272 E5          >          push     hl
 107++7273 E5          >          push     hl
 107++7274 E5          >          push     hl
 107++7275 E5          >          push     hl
 107++7276 E5          >          push     hl
 107++7277 E5          >          push     hl
 107++7278 E5          >          push     hl
 107++7279 E5          >          push     hl
 107++727A E5          >          push     hl
 107++727B E5          >          push     hl
 108++727C                      EDUP
 109++727C 10 EE                djnz     .loop
 110++727E              .savesp:
 111++727E 31 55 55             ld       sp,$5555
 112++7281 08                   ex       af,af
 113++7282 F6 00        .rvram: or       #00
 114++7284                      page_a
 114++7284 32 68 81    >         ld      (@page),a
 114++7287             >         page_am
 114++7287 D3 FD       >         out    (#fd),a
 115++7289 C9                   ret
 116++728A
 117++728A DD 6E 02 DD  .init:  ld       hl,(ix+clatt.data)
 117++728E 66 03
 118++7290 DD 75 08 DD          ld       (ix+clatt.ptr),hl
 118++7294 74 09
 119++7296 DD 7E 00             ld       a,(ix+clatt.posy)
 120++7299 DD 86 01             add      a,(ix+clatt.hght)
 121++729C 47                   ld       b,a
 122++729D 0E 00                ld       c,0
 123++729F CD F8 6D             call     AtrXY2Adr
 124++72A2 DD 7E 04             ld       a,(ix+clatt.mode)
 125++72A5 E6 80                and      #80
 126++72A7 B4                   or       h
 127++72A8 DD 75 06             ld       (ix+clatt.addr),l
 128++72AB DD 77 07             ld       (ix+clatt.addr+1),a
 129++72AE C9                   ret
 130++72AF
 131++72AF 3A 21 95     .run2:  ld       a,(rotoid.run.vpage+1)
 132++72B2 EE 02                xor      #02
 133++72B4                      page_a
 133++72B4 32 68 81    >         ld      (@page),a
 133++72B7             >         page_am
 133++72B7 D3 FD       >         out    (#fd),a
 134++72B9 CD 0E 72             call     .run
 135++72BC 3A 21 95             ld       a,(rotoid.run.vpage+1)
 136++72BF                      page_a
 136++72BF 32 68 81    >         ld      (@page),a
 136++72C2             >         page_am
 136++72C2 D3 FD       >         out    (#fd),a
 137++72C4 C3 0E 72             jp       .run
 138++72C7
 139++72C7              ; simple attr fade in/out data maker
 140++72C7              ; hl = where to make data,
 141++72C7              ; d=color
 142++72C7              ; e=difference
 143++72C7              ; b=number of colors
 144++72C7              .make:
 145++72C7 72           1       ld       (hl),d
 145++72C8 23             inc hl
 146++72C9 18 00        .skip:  jr       2F                             ; change (.skip+1) to 0 = double value, 2 = single value
 147++72CB 72           2       ld       (hl),d
 147++72CC 23             inc hl
 148++72CD 36 FF                ld       (hl),#ff                       ; #ff end of table
 149++72CF 7A                   ld       a,d
 150++72D0 83                   add      a,e
 151++72D1 57                   ld       d,a
 152++72D2 F8                   ret      m
 153++72D3 10 F2                djnz     1B
 154++72D5 C9                   ret
 155++72D6
 156++72D6              attwin:
 157++72D6 DC 65 73             call     c,.init
 158++72D9 AF           .run:   xor      a
 159++72DA 32 5E 73             ld       (.rvram+1),a
 160++72DD 3A 68 81             ld       a,(@page)
 161++72E0 08                   ex       af,af
 162++72E1 DD 5E 0A DD          ld       de,(ix+atwin.ptr)
 162++72E5 56 0B
 163++72E7 1A                   ld       a,(de)
 164++72E8 A7                   and      a                              ; mark end of the block
 165++72E9 F2 F4 72             jp       p,1F
 166++72EC
 167++72EC DD CB 06 4E          bit      1,(ix+atwin.mode)              ; repeat sequence
 168++72F0 37                   scf
 169++72F1 20 E3                jr       nz,attwin
 170++72F3 C9                   ret
 171++72F4
 172++72F4 13           1       inc      de
 173++72F5 DD 73 0A DD          ld       (ix+atwin.ptr),de
 173++72F9 72 0B
 174++72FB 5F                   ld       e,a
 175++72FC 57                   ld       d,a
 176++72FD ED 73 5A 73          ld       (.savesp+1),sp
 177++7301 DD 6E 08 DD          ld       hl,(ix+atwin.addr)
 177++7305 66 09
 178++7307
 179++7307 DD CB 06 46          bit      0,(ix+atwin.mode)              ; border as paper
 180++730B 28 07                jr       z,1F
 181++730D 0F                   rrca
 182++730E 0F                   rrca
 183++730F 0F                   rrca
 184++7310 E6 07                and      7
 185++7312 D3 FE                out      (#fe),a
 186++7314              1
 187++7314 DD CB 06 56          bit      2,(ix+atwin.mode)              ; paging used?
 188++7318 28 16                jr       z,2F
 189++731A DD CB 06 5E          bit      3,(ix+atwin.mode)
 190++731E 3E 0A                ld       a,%00001010                    ; xor mask to flip 5/7 + bit 3 (2nd vram)
 191++7320 20 01                jr       nz,1F
 192++7322 AF                   xor      a
 193++7323 DD AE 07     1       xor      (ix+atwin.page)
 194++7326 DD 77 07             ld       (ix+atwin.page),a
 195++7329                      page_am                                 ; won't save to @page variable (cannot be interrupted anyway)
 195++7329 D3 FD       >         out    (#fd),a
 196++732B E6 08                and      8
 197++732D 32 5E 73             ld       (.rvram+1),a
 198++7330
 199++7330 DD 4E 02     2       ld       c,(ix+atwin.width)
 200++7333 CB 29                sra      c
 201++7335 3E 10                ld       a,16
 202++7337 91                   sub      c
 203++7338 32 44 73             ld       (.modjr),a
 204++733B
 205++733B DD 7E 03             ld       a,(ix+atwin.hght)
 206++733E 01 20 00             ld       bc,#20
 207++7341
 208++7341 F9           .loop:  ld       sp,hl
 209++7342 09                   add      hl,bc
 210++7343 18                   db       #18              ; jr
 211++7344 00           .modjr: db       #00
 212++7345                      DUP      16
 213++7345 D5          >          push     de
 213++7346 D5          >          push     de
 213++7347 D5          >          push     de
 213++7348 D5          >          push     de
 213++7349 D5          >          push     de
 213++734A D5          >          push     de
 213++734B D5          >          push     de
 213++734C D5          >          push     de
 213++734D D5          >          push     de
 213++734E D5          >          push     de
 213++734F D5          >          push     de
 213++7350 D5          >          push     de
 213++7351 D5          >          push     de
 213++7352 D5          >          push     de
 213++7353 D5          >          push     de
 213++7354 D5          >          push     de
 214++7355                      EDUP
 215++7355 3D                   dec      a
 216++7356 C2 41 73             jp       nz,.loop
 217++7359              .savesp:
 218++7359 31 55 55             ld       sp,$5555
 219++735C 08                   ex       af,af
 220++735D F6 00        .rvram: or       #00
 221++735F                      page_a
 221++735F 32 68 81    >         ld      (@page),a
 221++7362             >         page_am
 221++7362 D3 FD       >         out    (#fd),a
 222++7364 C9                   ret
 223++7365
 224++7365 DD 6E 04 DD  .init:  ld       hl,(ix+atwin.data)
 224++7369 66 05
 225++736B DD 75 0A DD          ld       (ix+atwin.ptr),hl
 225++736F 74 0B
 226++7371 DD 46 01             ld       b,(ix+atwin.atxy+1)
 227++7374 DD 4E 00             ld       c,(ix+atwin.atxy)
 228++7377 CD F8 6D             call     AtrXY2Adr
 229++737A DD 5E 02             ld       e,(ix+atwin.width)
 230++737D 16 00                ld       d,0
 231++737F 19                   add      hl,de                ; move to end of the line
 232++7380 DD 7E 06             ld       a,(ix+atwin.mode)
 233++7383 E6 80                and      #80
 234++7385 B4                   or       h
 235++7386 DD 75 08             ld       (ix+atwin.addr),l
 236++7389 DD 77 09             ld       (ix+atwin.addr+1),a
 237++738C C9                   ret
 238++738D
 239++738D DD 7D        border: ld       a,xl
 240++738F D3 FE                out      (#fe),a
 241++7391 DD 4C                ld       c,xh
 242++7393 79                   ld       a,c
 243++7394 A7                   and      a
 244++7395 C8                   ret      z
 245++7396 06 0C        .lop2:  ld       b,12
 246++7398 10 FE        .loop:  djnz     .loop
 247++739A 0D                   dec      c
 248++739B 20 F9                jr       nz,.lop2
 249++739D C9                   ret
 250++739E ~            /*
 251++739E ~            b0:     xor a:   jr 1F
 252++739E ~            b1:     ld a,1:  jr 1F
 253++739E ~            b2:     ld a,2:  jr 1F
 254++739E ~            b3:     ld a,3:  jr 1F
 255++739E ~            b4:     ld a,4:  jr 1F
 256++739E ~            b5:     ld a,5:  jr 1F
 257++739E ~            b6:     ld a,6:  jr 1F
 258++739E ~            b7:     ld a,7
 259++739E ~            1       out (#fe),a : ret
 260++739E ~            */
 261++739E
 262++739E              atrFadeHalf:
 263++739E 3A 68 81                ld   a,(@page)
 264++73A1 F5                      push af
 265++73A2 E6 08                   and  8
 266++73A4 3E 55                   ld   a,#55
 267++73A6 28 02                   jr   z,1F
 268++73A8 3E 5F                   ld   a,#57+8
 269++73AA              1          page_a
 269++73AA 32 68 81    >         ld      (@page),a
 269++73AD             >         page_am
 269++73AD D3 FD       >         out    (#fd),a
 270++73AF F5                      push  af
 271++73B0 06 08                   ld   b,8
 272++73B2 D9           .l         exx
 273++73B3 76                      halt
 274++73B4 21 00 D8                ld   hl,#d800
 275++73B7 CD FA 73                call atrFade.hl
 276++73BA D9                      exx
 277++73BB 10 F5                   djnz .l
 278++73BD F1                      pop  af
 279++73BE EE 02                   xor  #02
 280++73C0 1E 00                   ld   e,0
 281++73C2 CD 65 6C                call mmu.clatr0.e
 282++73C5 F1                      pop  af
 283++73C6                         page_a
 283++73C6 32 68 81    >         ld      (@page),a
 283++73C9             >         page_am
 283++73C9 D3 FD       >         out    (#fd),a
 284++73CB C9                      ret
 285++73CC
 286++73CC              atrFadeFull:
 287++73CC                         border 0
 287++73CC 3E 00       >          ld a,0
 287++73CE D3 FE       >  out (#fe),a
 288++73D0 3A 68 81                ld   a,(@page)
 289++73D3 F5                      push af
 290++73D4 CD 8C 6C                call mmu.cpscr
 291++73D7 06 10                   ld   b,#10
 292++73D9 D9           .l:        exx
 293++73DA 76                      halt
 294++73DB 3E 57        .m:        ld   a,#57
 295++73DD EE 0A                   xor  #0a
 296++73DF 32 DC 73                ld   (.m+1),a
 297++73E2                         page_a
 297++73E2 32 68 81    >         ld      (@page),a
 297++73E5             >         page_am
 297++73E5 D3 FD       >         out    (#fd),a
 298++73E7 21 00 D8                ld   hl,#d800
 299++73EA CD FA 73                call atrFade.hl
 300++73ED D9                      exx
 301++73EE 10 E9                   djnz .l
 302++73F0 F1                      pop  af
 303++73F1                         page_a
 303++73F1 32 68 81    >         ld      (@page),a
 303++73F4             >         page_am
 303++73F4 D3 FD       >         out    (#fd),a
 304++73F6 C9                      ret
 305++73F7
 306++73F7              ; atr fade out
 307++73F7              ; ix=vram addr (5800|d800)
 308++73F7              ; Ped7G Jan 10 2021
 309++73F7              atrFade:
 310++73F7 DD E5 E1                ld   hl,ix
 311++73FA 1E 09        .hl:       ld   e,%00'001'001
 312++73FC CD 02 74                 call .doThird
 313++73FF CD 02 74                 call .doThird
 314++7402              .doThird:
 315++7402 7E                       ld a,(hl)
 316++7403 57                       ld d,a
 317++7404 1F                       rra
 318++7405 B2                       or d
 319++7406 1F                       rra
 320++7407 B2                       or d
 321++7408 A3                       and e   ; A = +8 / +1 for PAPER/INK when PAPER/INK is non-zero
 322++7409 92                       sub d
 323++740A ED 44                    neg     ; A = A - (+8/+1) (--PAPER, --INK)
 324++740C 77                       ld (hl),a
 325++740D 2C                       inc l
 326++740E C2 02 74                 jp nz,.doThird
 327++7411 24                       inc h
 328++7412 C9                      ret
 329++7413
 330++7413              ;-------------------------------------------------------------------------------
 331++7413              atrFadeInFull:
 332++7413 3A 68 81             ld      a,(@page)
 333++7416 F5                   push    af
 334++7417 3E 5F                ld      a,#57+8
 335++7419                      page_a
 335++7419 32 68 81    >         ld      (@page),a
 335++741C             >         page_am
 335++741C D3 FD       >         out    (#fd),a
 336++741E
 337++741E 21 00 40             ld      hl,#4000                      ; copy pixels to vram1
 338++7421 11 00 C0             ld      de,#c000
 339++7424 01 00 18             ld      bc,#1800
 340++7427 ED B0                ldir
 341++7429              ;---
 342++7429 CD 73 74             call    egl.atrFadeIn.ini
 343++742C 06 08                ld      b,#08                         ; fade in
 344++742E D9           2       exx
 345++742F 76                   halt
 346++7430 76                   halt
 347++7431 3A 00 58             ld      a,(#5800)
 348++7434 0F                   rrca
 349++7435 0F                   rrca
 350++7436 0F                   rrca
 351++7437 E6 07                and     7
 352++7439 D3 FE                out     (#fe),a
 353++743B CD 48 74             call    egl.atrFadeIn.run
 354++743E D9                   exx
 355++743F 10 ED                djnz    2B
 356++7441
 357++7441 F1                   pop     af
 358++7442                      page_a
 358++7442 32 68 81    >         ld      (@page),a
 358++7445             >         page_am
 358++7445 D3 FD       >         out    (#fd),a
 359++7447 C9                   ret
 360++7448
 361++7448              ;--------------------------------------------
 362++7448              ; fade in, working-buffer attrs are in #5800
 363++7448              ; target-value attrs are in #d800
 364++7448              ; limited to fade-in from "less/equal" value-per-component (than target)
 365++7448              atrFadeIn:
 366++7448              .run:
 367++7448 11 00 58                 ld      de,$5800
 368++744B 21 00 D8                 ld      hl,$D800
 369++744E 0E 49                    ld      c,%01'001'001
 370++7450 CD 56 74                 call    .doThird
 371++7453 CD 56 74                 call    .doThird
 372++7456              .doThird:
 373++7456 1A                       ld      a,(de)
 374++7457 1C                       inc     e
 375++7458 AE                       xor     (hl)    ; A = xor-difference between source/target value
 376++7459 47                       ld      b,a
 377++745A 1F                       rra
 378++745B B0                       or      b
 379++745C 1F                       rra
 380++745D B0                       or      b
 381++745E A1                       and     c       ; A = +64/+8/+1 for B+F/PAPER/INK when xor-diff is non-zero
 382++745F 86                       add     a,(hl)
 383++7460 77                       ld      (hl),a
 384++7461 2C                       inc     l
 385++7462                          ; second attribute (optimization to have one JP less)
 386++7462 1A                       ld      a,(de)
 387++7463 1C                       inc     e
 388++7464 AE                       xor     (hl)    ; A = xor-difference between source/target value
 389++7465 47                       ld      b,a
 390++7466 1F                       rra
 391++7467 B0                       or      b
 392++7468 1F                       rra
 393++7469 B0                       or      b
 394++746A A1                       and     c       ; A = +64/+8/+1 for B+F/PAPER/INK when xor-diff is non-zero
 395++746B 86                       add     a,(hl)
 396++746C 77                       ld      (hl),a
 397++746D 2C                       inc     l
 398++746E C2 56 74                 jp      nz,.doThird
 399++7471 14                       inc     d
 400++7472 24                       inc     h
 401++7473 C9           .ini:       ret
 402++7474
 403++7474 ~            /*
 404++7474 ~            ;--------------------------------------------
 405++7474 ~            ; fade in - single iteration
 406++7474 ~            ; source attrs are in #5800
 407++7474 ~            ; destination attrs are in #d800
 408++7474 ~            ; ini - initializes bright
 409++7474 ~            ; run - performs iteration between source and target
 410++7474 ~            ; limited to fade from black
 411++7474 ~
 412++7474 ~            atrFadeIn:
 413++7474 ~            .ini:
 414++7474 ~                       ld      hl,#5800
 415++7474 ~                       ld      de,#d800
 416++7474 ~                       ld      bc,#300
 417++7474 ~            1          ld      a,(hl)
 418++7474 ~                       and     #40
 419++7474 ~                       ld      (de),a
 420++7474 ~                       inc     de
 421++7474 ~                       cpi
 422++7474 ~                       jp      pe,1B
 423++7474 ~                       ret
 424++7474 ~            .run:
 425++7474 ~                       ld      hl,#d800
 426++7474 ~                       ld      de,#5800
 427++7474 ~                       ld      c,%00111000
 428++7474 ~
 429++7474 ~            .l1:
 430++7474 ~                       ld      a,(de)   ; get source data
 431++7474 ~                       and     7        ; mask ink
 432++7474 ~                       ld      b,a
 433++7474 ~                       ld      a,(hl)   ; get target
 434++7474 ~                       and     7
 435++7474 ~                       cp      b        ; compare inks
 436++7474 ~                       jr      z,1F     ; same = do nothing
 437++7474 ~                       inc     (hl)     ; increase target
 438++7474 ~
 439++7474 ~            1          ld      a,(de)     ; get source data
 440++7474 ~                       and     c          ; mask paper
 441++7474 ~                       ld      b,a
 442++7474 ~                       ld      a,(hl)
 443++7474 ~                       and     c
 444++7474 ~                       cp      b
 445++7474 ~                       jr      z,1F
 446++7474 ~                       ld      a,(hl)
 447++7474 ~                       add     a,8
 448++7474 ~                       ld      (hl),a     ; inc paper target
 449++7474 ~
 450++7474 ~            1          inc     hl
 451++7474 ~                       inc     de
 452++7474 ~                       ld      a,d
 453++7474 ~                       cp      #5b
 454++7474 ~                       jp      nz,.l1
 455++7474 ~                       ret
 456++7474 ~            */
 457++7474
 458++7474              ;-------------------------------------------------------------------------------
 459++7474                  ; 61B -> 60B, worst case inner loop 122T -> 103T. skip-case is 54T -> 42T
 460++7474              atrSetMaskColor:
 461++7474 67           .bias:     ld      h,a                       ; bias = -7...7
 462++7475                                                           ; fixed= 8...15 (bit 3)
 463++7475 2E C6                   ld      l,  #c6                  ; "add a,n" for bias
 464++7477 D6 08                   sub     8
 465++7479 FA 7F 74                jp      m,1F                      ; bias (-7..+7)
 466++747C 67                      ld      h,a                       ; adjusted fixed value to 0..7
 467++747D 2E 3E                   ld      l,  #3e                   ; "ld a,n" for fixed
 468++747F                      ; ^ entry modified to save 5B (includin -1 for "ld (.bs),hl")
 469++747F 22 99 74     1          ld      (.bs),hl
 470++7482 11 55 55     .sdata:    ld      de,#5555                  ; data
 471++7485 21 55 55     .svram:    ld      hl,#5555                  ; vram
 472++7488 0E 07                   ld      c,7
 473++748A CD 90 74                call    .doThird
 474++748D CD 90 74                call    .doThird
 475++7490              .doThird:
 476++7490              .l1:
 477++7490 1A                      ld      a,(de)
 478++7491 E6 C0                   and     %11000000                 ; test of bit 7 + extract bright value
 479++7493 FA A5 74                jp      m,.s1                     ; mark = skip attribute
 480++7496 47                      ld      b,a                       ; save bright value
 481++7497 1A                      ld      a,(de)
 482++7498 A1                      and     c                         ; 7, mask ink only
 483++7499 C6 55        .bs:       add     a,#55                     ; bias (negative number) ; add a,* / ld a,* (fixed)
 484++749B FA AD 74                jp      m,.s3                     ; if <0 then black
 485++749E B9                      cp      c                         ; if >7 then 7
 486++749F DA A3 74                jp      c,.s2 ; ? "jr" for better worst case?
 487++74A2 79                      ld      a,c
 488++74A3 B0           .s2:       or      b                         ; or bright
 489++74A4 77           .s22:      ld      (hl),a                    ; save final color
 490++74A5 1C           .s1:       inc     e
 491++74A6 2C                      inc     l
 492++74A7 C2 90 74                jp      nz,.l1       ; x256
 493++74AA 14                      inc     d            ; +256 for next third
 494++74AB 24                      inc     h
 495++74AC C9                      ret
 496++74AD 70           .s3:       ld      (hl),b       ; black + bright
 497++74AE 18 F5                   jr      .s1  ; ? "jp" for -2T when clamping to 0?
 498++74B0                         ; or even unroll tail (+5B)
 499++74B0
 500++74B0              ; de=vram addr
 501++74B0              ; hl=attr data (paper color is used for selection of area)
 502++74B0              ; a =area number (max 8 areas)
 503++74B0              ; call init first to reset 7 th bit of data for area that will be displayed
 504++74B0              ; area that won't be displayed will have 7th bit set
 505++74B0 22 83 74     .init:     ld      (.sdata+1),hl
 506++74B3 ED 53 86 74             ld      (.svram+1),de
 507++74B7 C9                      ret  ; why? can't you call single ".init" with HL+DE+A every time? (-4B *here*)
 508++74B8 2A 83 74     .inia:     ld      hl,(.sdata+1)    ; can be removed if only ".init" is called every time
 509++74BB 5F                      ld      e,a
 510++74BC 01 00 03                ld      bc,#300
 511++74BF 7E           .ilp:      ld      a,(hl)
 512++74C0 E6 38                   and     %00111000
 513++74C2 BB                      cp      e
 514++74C3 CB FE                   set     7,(hl)
 515++74C5 20 02                   jr      nz,1F    ; needs flipped meaning for atrSetMaskColor: reset -> display, set -> skip
 516++74C7 CB BE                   res     7,(hl)   ; also more bytes to skip than to display -> faster init in this way
 517++74C9 ED A1        1          cpi
 518++74CB EA BF 74                jp      pe,.ilp
 519++74CE C9                      ret
 520++74CF
 521++74CF ~            /*
 522++74CF ~            atrSetMaskColor:
 523++74CF ~            .bias:     ld      b,a                       ; bias = -7...7
 524++74CF ~                                                         ; fixed= 8...15 (bit 3)
 525++74CF ~                       and     a
 526++74CF ~                       ld      c,_addan                  ; negatives = bias
 527++74CF ~                       jp      m,1F
 528++74CF ~                       and     8
 529++74CF ~                       jr      z,1F                      ; positive & <8 = bias
 530++74CF ~                       ld      c,_ldan                   ; positive & > 8 = fixed offset
 531++74CF ~                       res     3,b
 532++74CF ~            1          ld      (.bs),bc
 533++74CF ~
 534++74CF ~            .shl:      ld      hl,#5555                  ; data
 535++74CF ~            .sde:      ld      de,#5555                  ; vram
 536++74CF ~            ;           ld      bc,#0300
 537++74CF ~                       ld      c,7
 538++74CF ~
 539++74CF ~            .l1:
 540++74CF ~                       ld      a,(hl)
 541++74CF ~                       and     a                         ; test of bit 7
 542++74CF ~                       jp      p,.s1                     ; no mark = skip attribute
 543++74CF ~
 544++74CF ~                       and     %01000000
 545++74CF ~                       ld      b,a                       ; save bright value
 546++74CF ~
 547++74CF ~                       ld      a,(hl)
 548++74CF ~                       and     c                         ; 7, mask ink only
 549++74CF ~
 550++74CF ~            .bs:       add     a,#55                     ; bias (negative number)
 551++74CF ~                       jp      m,.s3                     ; if <0 then black
 552++74CF ~
 553++74CF ~                       cp      c                         ; if >7 then 7
 554++74CF ~                       jp      c,.s2
 555++74CF ~                       ld      a,c
 556++74CF ~
 557++74CF ~            .s2:       or      b                         ; or bright
 558++74CF ~            .s22:      ld      (de),a                    ; save final color
 559++74CF ~
 560++74CF ~            .s1:       inc     de
 561++74CF ~                       inc     hl
 562++74CF ~                       ld      a,h
 563++74CF ~            .ce:       cp      #55                       ; check end attribute
 564++74CF ~                       jp      nz,.l1
 565++74CF ~                       ret
 566++74CF ~
 567++74CF ~            .s3:       xor     a
 568++74CF ~                       jr      .s22
 569++74CF ~
 570++74CF ~            ; de=vram addr
 571++74CF ~            ; hl=attr data (paper color is used for selection of area)
 572++74CF ~            ; a =area number (max 8 areas)
 573++74CF ~            ; call init first to set 7 th bit of data for area that will be displayed
 574++74CF ~            ; area that won't be displayed will have 7th bit reset
 575++74CF ~
 576++74CF ~            .init:     ld      (.shl+1),hl
 577++74CF ~                       ld      (.sde+1),de
 578++74CF ~                       ld      a,h
 579++74CF ~                       add     a,3
 580++74CF ~                       ld      (.ce+1),a
 581++74CF ~                       ret
 582++74CF ~
 583++74CF ~            .inia:     ld      hl,(.shl+1)
 584++74CF ~                       ld      de,(.sde+1)
 585++74CF ~                       ld      (.cp+1),a
 586++74CF ~                       ld      bc,#300
 587++74CF ~
 588++74CF ~            .ilp:      ld      a,(hl)
 589++74CF ~                       and     %00111000
 590++74CF ~            .cp:       cp      #55
 591++74CF ~                       set     7,(hl)
 592++74CF ~                       jr      z,1F
 593++74CF ~                       res     7,(hl)
 594++74CF ~            1          cpi
 595++74CF ~                       jp      pe,.ilp
 596++74CF ~                       ret
 597++74CF ~            */
 598++74CF                         ENDMODULE
# file closed: ./libs/egl_atrplay.a80
  14+ 74CF                      display " attrpl:",$-s
  15+ 74CF              ;        include "libs/egl_iterate.a80"
  16+ 74CF              s: = $
  17+ 74CF                      include "libs/egl_draw.a80"
# file opened: ./libs/egl_draw.a80
   1++74CF                      MODULE egl
   2++74CF
   3++74CF ~            /*
   4++74CF ~                      STRUCT hdi
   5++74CF ~            bwidth:   db     0
   6++74CF ~            height:   db     0
   7++74CF ~            atrsize:  db     0
   8++74CF ~                      ENDS
   9++74CF ~            */
  10++74CF                        STRUCT drwhdi
  11++74CF ~            vram:     dw     #4000
  12++74CF ~            pgfx:     dw     #0000
  13++74CF ~            mode:     db     0                      ; 0=blit, 1=or, 2=xor
  14++74CF ~            posx:     db     0
  15++74CF ~            cury:     db     0
  16++74CF                        ENDS
  17++74CF
  18++74CF              drawLineHdi:
  19++74CF 30 04                  jr     nc,1F
  20++74D1 DD 36 06 00            ld     (ix+drwhdi.cury),0     ; initialize current line
  21++74D5
  22++74D5 3A 82 80     1         ld     a,(@isUnpackedHdi)       ; test if data are ready and unpacked
  23++74D8 A7                     and    a
  24++74D9 C8                     ret    z
  25++74DA
  26++74DA 3A 68 81               ld     a,(@page)
  27++74DD 08                     ex     af,af
  28++74DE
  29++74DE 3A 3B BC               ld     a,(@ivram)
  30++74E1 F6 57                  or     #57
  31++74E3                        page_am
  31++74E3 D3 FD       >         out    (#fd),a
  32++74E5
  33++74E5 DD 6E 02 DD            ld     hl,(ix+drwhdi.pgfx)
  33++74E9 66 03
  34++74EB 7E                     ld     a,(hl)
  34++74EC 23             inc hl        ; width
  35++74ED 32 0F 75               ld     (.wdt+1),a
  36++74F0 5F                     ld     e,a
  37++74F1 DD 7E 06               ld     a,(ix+drwhdi.cury)     ; current drawn line
  38++74F4 BE                     cp     (hl)
  38++74F5 23             inc hl        ; height
  39++74F6 23                     inc    hl                     ; skip attr size.
  40++74F7 C8                     ret    z
  41++74F8 E5                     push   hl                     ; HL=gfx HDI addr
  42++74F9 CD 71 AD               call   @rotoid.math.mul0808   ; hl=e*a
  43++74FC D1                     pop    de
  44++74FD 19                     add    hl,de                   ; hl = addr of gfx
  45++74FE DD 34 06               inc    (ix+drwhdi.cury)       ; increment current line
  46++7501 DD 7E 00               ld     a,(ix+drwhdi.vram)
  47++7504 32 2E 75               ld     (.cpe+1),a             ; save low vram byte
  48++7507 DD 86 05               add    a,(ix+drwhdi.posx)
  49++750A 5F                     ld     e,a
  50++750B DD 56 01               ld     d,(ix+drwhdi.vram+1)
  51++750E
  52++750E 01 00 00     .wdt:     ld     bc,0
  53++7511 DD 7E 04               ld     a,(ix+drwhdi.mode)
  54++7514 E6 7F                  and    #7f
  55++7516 28 22                  jr     z,.blt0
  56++7518 3D                     dec    a
  57++7519 28 09                  jr     z,.blt1
  58++751B 3D                     dec    a
  59++751C 28 02                  jr     z,.blt2
  60++751E 18 2C                  jr     .ret
  61++7520
  62++7520 3E AE        .blt2:    ld     a, #ae
  63++7522 18 02                  jr     1F
  64++7524
  65++7524 3E B6        .blt1:    ld     a,  #b6
  66++7526 32 32 75     1         ld     (.mod),a
  67++7529
  68++7529 41                     ld     b,c
  69++752A 7B           1         ld     a,e
  70++752B E6 E0                  and    #e0
  71++752D FE 55        .cpe:     cp     #55
  72++752F 20 03                  jr     nz,.nodrw
  73++7531
  74++7531 1A                     ld     a,(de)
  75++7532 B6           .mod:     or     (hl)
  76++7533 12                     ld     (de),a
  77++7534
  78++7534              ;          bit    7,(ix+drwhdi.mode)     ; test of drawing to 2nd vram #c000
  79++7534              ;          jr     z,.nodrw
  80++7534              ;          set    7,d
  81++7534              ;          ld     (de),a
  82++7534              ;          res    7,d
  83++7534
  84++7534 23           .nodrw:   inc    hl
  85++7535 13                     inc    de
  86++7536 10 F2        3         djnz   1B
  87++7538 18 12                  jr     .ret
  88++753A
  89++753A E5 D5 C5     .blt0:    push   hl,de,bc
  90++753D ED B0                  ldir
  91++753F C1 D1 E1               pop    bc,de,hl
  92++7542
  93++7542 DD CB 04 7E            bit    7,(ix+drwhdi.mode)     ; shall be line copied to #c000? (titles)
  94++7546 28 04                  jr     z,.ret
  95++7548 CB FA                  set    7,d
  96++754A ED B0                  ldir
  97++754C
  98++754C 08           .ret      ex     af,af
  99++754D                        page_am
  99++754D D3 FD       >         out    (#fd),a
 100++754F C9                     ret
 101++7550
 102++7550 ~            /*
 103++7550 ~            draw_gfx:
 104++7550 ~                    call  c,.init
 105++7550 ~                    ld    a,(ix+gfx.hght)
 106++7550 ~                    and   a
 107++7550 ~                    ret   z
 108++7550 ~                    dec   a
 109++7550 ~                    ld    (ix+gfx.hght),a
 110++7550 ~                    ld    a,(@page)
 111++7550 ~                    ex    af,af
 112++7550 ~                    ld    a,(ix+gfx.page)
 113++7550 ~                    and   #7f
 114++7550 ~                    page_am
 115++7550 ~                    ld    de,(ix+gfx.vram)
 116++7550 ~                    ld    hl,(ix+gfx.data)
 117++7550 ~                    ld    bc,(ix+gfx.wdth)
 118++7550 ~                    push  de
 119++7550 ~                    ld    a,(ix+gfx.mode)
 120++7550 ~                    cp    2
 121++7550 ~                    ld    a,#b0          ; poke LDIR
 122++7550 ~                    jp    nc,.ldxr
 123++7550 ~                    ld    a,#b8          ; poke LDDR
 124++7550 ~            .ldxr:  ld    (.lmd),a
 125++7550 ~                    db    #ed
 126++7550 ~            .lmd:   db    #55
 127++7550 ~                    ex    af,af
 128++7550 ~                    page_am
 129++7550 ~                    ld    a,(ix+gfx.mode)
 130++7550 ~                    cp    4
 131++7550 ~                    jr    z,.spop
 132++7550 ~                    pop   de
 133++7550 ~            .spop:  ld    (ix+gfx.data),hl
 134++7550 ~                    ex    de,hl
 135++7550 ~                    and   a
 136++7550 ~                    jr    z,.fup
 137++7550 ~                    cp    1
 138++7550 ~                    ld    bc,-#20
 139++7550 ~                    jr    z,.a1
 140++7550 ~                    cp    2
 141++7550 ~                    jr    z,.fdown
 142++7550 ~                    cp    3
 143++7550 ~                    jr    z,.a2
 144++7550 ~                    ld    (ix+gfx.vram+0),hl
 145++7550 ~            ;        pop   hl
 146++7550 ~                    ret
 147++7550 ~
 148++7550 ~            .a2:    ld    bc,#20
 149++7550 ~            .a1:    add   hl,bc
 150++7550 ~                    jr    .rest
 151++7550 ~
 152++7550 ~            .fup:   call  PixUppAdr
 153++7550 ~            .rest:  ld    (ix+gfx.vram),hl
 154++7550 ~                    ret
 155++7550 ~
 156++7550 ~            .fdown: call  vid
 157++7550 ~                    ld    (ix+gfx.vram),hl
 158++7550 ~                    ret
 159++7550 ~
 160++7550 ~            .init:  ld       bc,(ix+gfx.atxy)
 161++7550 ~                    bit      0,(ix+gfx.mode)
 162++7550 ~                    call     z,PixCY2Adr
 163++7550 ~                    bit      0,(ix+gfx.mode)
 164++7550 ~                    call     nz,AtrXY2Adr
 165++7550 ~                    ld       a,(ix+gfx.page)
 166++7550 ~                    and      #80
 167++7550 ~                    or       h
 168++7550 ~                    ld       (ix+gfx.vram),l
 169++7550 ~                    ld       (ix+gfx.vram+1),a
 170++7550 ~                    ld       hl,(ix+gfx.pdata)
 171++7550 ~                    ld       (ix+gfx.data),hl
 172++7550 ~                    ld       a,(ix+gfx.phght)
 173++7550 ~                    ld       (ix+gfx.hght),a
 174++7550 ~                    ret
 175++7550 ~            */
 176++7550
 177++7550              blit_gfx:
 178++7550 DC C7 75             call     c,.init
 179++7553 DD 7E 0B             ld       a,(ix+blit.cstp)
 180++7556 3D                   dec      a
 181++7557 F8                   ret      m
 182++7558 DD 77 0B             ld       (ix+blit.cstp),a
 183++755B
 184++755B 3A 68 81             ld       a,(@page)
 185++755E 08                   ex       af,af
 186++755F DD 7E 08             ld       a,(ix+blit.page)
 187++7562 E6 7F                and      #7f
 188++7564                      page_am
 188++7564 D3 FD       >         out    (#fd),a
 189++7566
 190++7566 DD 5E 09 DD          ld       de,(ix+blit.vram)
 190++756A 56 0A
 191++756C DD 6E 02 DD          ld       hl,(ix+blit.pdata)
 191++7570 66 03
 192++7572 D9                   exx
 193++7573 DD 46 05             ld       b,(ix+blit.hght)
 194++7576 D9           .lp1:   exx
 195++7577 DD 4E 04             ld       c,(ix+blit.wdth)
 196++757A 06 00                ld       b,0
 197++757C 7B                   ld       a,e
 198++757D ED B0                ldir
 199++757F 5F                   ld       e,a
 200++7580 CD B8 6D             call     vidd
 201++7583 D9                   exx
 202++7584 10 F0                djnz     .lp1
 203++7586
 204++7586 D9                   exx
 205++7587 08                   ex       af,af
 206++7588                      page_am
 206++7588 D3 FD       >         out    (#fd),a
 207++758A
 208++758A DD 7E 07             ld       a,(ix+blit.dir)
 209++758D E6 7F                and      #7f
 210++758F 3D                   dec      a
 211++7590 FA 9F 75             jp       m,.up          ;a=0
 212++7593 CA AF 75             jp       z,.down        ;a=1
 213++7596 3D                   dec      a
 214++7597 CA BF 75             jp       z,.left        ;a=2
 215++759A 3D                   dec      a
 216++759B CA C3 75             jp       z,.right       ;a=3
 217++759E C9                   ret
 218++759F ~            /*
 219++759F ~                    jr       z,.up
 220++759F ~                    cp       1
 221++759F ~                    jr       z,.down
 222++759F ~                    cp       2
 223++759F ~                    jr       z,.left
 224++759F ~                    cp       3
 225++759F ~                    jr       z,.right
 226++759F ~                    ret
 227++759F ~            */
 228++759F
 229++759F DD 6E 09 DD  .up:    ld       hl,(ix+blit.vram)
 229++75A3 66 0A
 230++75A5 CD E7 6D             call     PixUppAdr
 231++75A8 DD 75 09 DD          ld       (ix+blit.vram),hl
 231++75AC 74 0A
 232++75AE C9                   ret
 233++75AF
 234++75AF
 235++75AF DD 6E 09 DD  .down:  ld       hl,(ix+blit.vram)
 235++75B3 66 0A
 236++75B5 CD C7 6D             call     vid
 237++75B8 DD 75 09 DD          ld       (ix+blit.vram),hl
 237++75BC 74 0A
 238++75BE C9                   ret
 239++75BF
 240++75BF DD 35 09     .left:  dec      (ix+blit.vram)
 241++75C2 C9                   ret
 242++75C3
 243++75C3 DD 34 09     .right: inc      (ix+blit.vram)
 244++75C6 C9                   ret
 245++75C7
 246++75C7              .init:
 247++75C7              ;        ld_bc_x  ix,blit.atxy
 248++75C7 DD 4E 00 DD          ld       bc,(ix+blit.atxy)
 248++75CB 46 01
 249++75CD CD 95 6D             call     PixCY2Adr
 250++75D0 DD 7E 08             ld       a,(ix+blit.page)
 251++75D3 E6 80                and      #80
 252++75D5 B4                   or       h
 253++75D6 DD 75 09             ld       (ix+blit.vram),l
 254++75D9 DD 77 0A             ld       (ix+blit.vram+1),a
 255++75DC DD 7E 06             ld       a,(ix+blit.stps)
 256++75DF DD 77 0B             ld       (ix+blit.cstp),a
 257++75E2 C9                   ret
 258++75E3
 259++75E3              pixwin:
 260++75E3 DC 6B 76             call     c,.init
 261++75E6
 262++75E6 DD 7E 10             ld       a,(ix+pxwin.cnt)
 263++75E9 3D                   dec      a
 264++75EA F8                   ret      m
 265++75EB DD 77 10             ld       (ix+pxwin.cnt),a
 266++75EE D9                   exx
 267++75EF DD 6E 0C DD          ld       hl,(ix+pxwin.vram)
 267++75F3 66 0D
 268++75F5 06 00                ld       b,0
 269++75F7 DD 4E 02             ld       c,(ix+pxwin.widt)
 270++75FA D9                   exx
 271++75FB DD 5E 0E DD          ld       de,(ix+pxwin.ptr)
 271++75FF 56 0F
 272++7601 1A                   ld       a,(de)
 273++7602 13                   inc      de
 274++7603 DD 73 0E DD          ld       (ix+pxwin.ptr),de
 274++7607 72 0F
 275++7609
 276++7609 ED 73 60 76          ld       (.savesp+1),sp
 277++760D 5F                   ld       e,a
 278++760E 57                   ld       d,a
 279++760F
 280++760F 3A 68 81             ld       a,(@page)
 281++7612 08                   ex       af,af
 282++7613
 283++7613 DD CB 06 46          bit      0,(ix+pxwin.mode)   ; bit 0 - paging
 284++7617 28 05                jr       z,1F
 285++7619 DD 7E 07             ld       a,(ix+pxwin.page)
 286++761C                      page_am
 286++761C D3 FD       >         out    (#fd),a
 287++761E DD 4E 02     1       ld       c,(ix+pxwin.widt)
 288++7621 CB 29                sra      c
 289++7623 3E 10                ld       a,16
 290++7625 91                   sub      c
 291++7626 32 48 76             ld       (.modjr),a
 292++7629 DD 46 03             ld       b,(ix+pxwin.hght)
 293++762C DD 4E 02             ld       c,(ix+pxwin.widt)
 294++762F
 295++762F D9           .loop:  exx
 296++7630 54                   ld       d,h
 297++7631 5D                   ld       e,l
 298++7632 09                   add      hl,bc
 299++7633 F9                   ld       sp,hl
 300++7634 6B                   ld       l,e
 301++7635 62                   ld       h,d
 302++7636
 303++7636 24                   inc      h
 304++7637 7C                   ld       a,h
 305++7638 E6 07                and      7
 306++763A 20 0A                jr       nz,.l2
 307++763C 7D                   ld       a,l
 308++763D C6 20                add      a,32
 309++763F 6F                   ld       l,a
 310++7640 38 04                jr       c,.l2
 311++7642 7C                   ld       a,h
 312++7643 D6 08                sub      8
 313++7645 67                   ld       h,a
 314++7646
 315++7646 D9           .l2:    exx
 316++7647 18                   db       #18                   ; jr
 317++7648 00           .modjr: db       #00
 318++7649                      DUP      16
 319++7649 D5          >          push     de
 319++764A D5          >          push     de
 319++764B D5          >          push     de
 319++764C D5          >          push     de
 319++764D D5          >          push     de
 319++764E D5          >          push     de
 319++764F D5          >          push     de
 319++7650 D5          >          push     de
 319++7651 D5          >          push     de
 319++7652 D5          >          push     de
 319++7653 D5          >          push     de
 319++7654 D5          >          push     de
 319++7655 D5          >          push     de
 319++7656 D5          >          push     de
 319++7657 D5          >          push     de
 319++7658 D5          >          push     de
 320++7659                      EDUP
 321++7659 00 00        .modh:  dw       0
 322++765B 00 00        .modl:  dw       0                     ; modifier, nop, roll data every line
 323++765D 10 D0                djnz     .loop
 324++765F              .savesp:
 325++765F 31 55 55             ld       sp,$5555
 326++7662 DD CB 06 46          bit      0,(ix+pxwin.mode)     ; ret without paging
 327++7666 C8                   ret      z
 328++7667 08                   ex       af,af
 329++7668                      page_am
 329++7668 D3 FD       >         out    (#fd),a
 330++766A C9                   ret
 331++766B
 332++766B DD 6E 04 DD  .init:  ld       hl,(ix+pxwin.data)
 332++766F 66 05
 333++7671 7E                   ld       a,(hl)
 334++7672 DD 77 10             ld       (ix+pxwin.cnt),a
 335++7675 23                   inc      hl
 336++7676 DD 75 0E DD          ld       (ix+pxwin.ptr),hl
 336++767A 74 0F
 337++767C DD 46 01             ld       b,(ix+pxwin.atxy+1)
 338++767F DD 4E 00             ld       c,(ix+pxwin.atxy)
 339++7682 CD 95 6D             call     PixCY2Adr
 340++7685              ;        ld       a,l
 341++7685              ;        add      a,(ix+pxwin.widt)
 342++7685 DD 75 0C             ld       (ix+pxwin.vram),l
 343++7688 DD 7E 06             ld       a,(ix+pxwin.mode)     ; bit 7 vram is #40 or #c0
 344++768B E6 80                and      #80
 345++768D B4                   or       h
 346++768E DD 77 0D             ld       (ix+pxwin.vram+1),a
 347++7691 DD 6E 08 DD          ld       hl,(ix+pxwin.modh)
 347++7695 66 09
 348++7697 22 59 76             ld       (.modh),hl
 349++769A DD 6E 0A DD          ld       hl,(ix+pxwin.modl)
 349++769E 66 0B
 350++76A0 22 5B 76             ld       (.modl),hl
 351++76A3 C9                   ret
 352++76A4
 353++76A4                      ENDMODULE
# file closed: ./libs/egl_draw.a80
  18+ 76A4                      display "   draw:",$-s
  19+ 76A4              s: = $
  20+ 76A4                      include "libs/egl_funscr.a80"
# file opened: ./libs/egl_funscr.a80
   1++76A4                       MODULE egl
   2++76A4
   3++76A4              copyRight:
   4++76A4 21 00 40              ld        hl,#4000
   5++76A7 11 00 C0              ld        de,#c000
   6++76AA              copyRightHLDE:
   7++76AA DD 2E C0              ld        xl,192
   8++76AD 32 BA 76              ld        (.f),a
   9++76B0
  10++76B0 06 20        2        ld        b,32
  11++76B2 E5 D5                 push      hl,de
  12++76B4 A7                    and       a
  13++76B5 4E           1        ld        c,(hl)
  14++76B6 CB 19                 rr        c
  15++76B8 08                    ex        af,af
  16++76B9 1A                    ld        a,(de)
  17++76BA B1           .f:      or        c
  18++76BB 12                    ld        (de),a
  19++76BC 08                    ex        af,af
  20++76BD 23                    inc       hl
  21++76BE 13                    inc       de
  22++76BF 10 F4                 djnz      1B
  23++76C1 D1 E1                 pop       de,hl
  24++76C3 CD C7 6D              call      vid
  25++76C6 CD B8 6D              call      vidd
  26++76C9 DD 2D                 dec       xl
  27++76CB 20 E3                 jr        nz,2B
  28++76CD C9                    ret
  29++76CE
  30++76CE              copyLeft:
  31++76CE 21 1F 40              ld        hl,#401f
  32++76D1 11 1F C0              ld        de,#c01f
  33++76D4              copyLeftHLDE:
  34++76D4 DD 2E C0              ld        xl,192
  35++76D7 32 E4 76              ld        (.f),a
  36++76DA
  37++76DA 06 20        2        ld        b,32
  38++76DC E5 D5                 push      hl,de
  39++76DE A7                    and       a
  40++76DF 4E           1        ld        c,(hl)
  41++76E0 CB 11                 rl        c
  42++76E2 08                    ex        af,af
  43++76E3 1A                    ld        a,(de)
  44++76E4 B1           .f:      or        c
  45++76E5 12                    ld        (de),a
  46++76E6 08                    ex        af,af
  47++76E7 2B                    dec       hl
  48++76E8 1B                    dec       de
  49++76E9 10 F4                 djnz      1B
  50++76EB D1 E1                 pop       de,hl
  51++76ED CD C7 6D              call      vid
  52++76F0 CD B8 6D              call      vidd
  53++76F3 DD 2D                 dec       xl
  54++76F5 20 E3                 jr        nz,2B
  55++76F7 C9                    ret
  56++76F8
  57++76F8              copyFunc:
  58++76F8 21 00 40              ld        hl,#4000
  59++76FB 11 00 C0              ld        de,#c000
  60++76FE              .HLDE:
  61++76FE 0E C0                 ld        c,192
  62++7700              .HLDEC:
  63++7700 32 08 77              ld        (.f),a
  64++7703 06 20        2        ld        b,32
  65++7705 E5 D5                 push      hl,de
  66++7707 1A           1        ld        a,(de)
  67++7708 A6           .f:      and       (hl)
  68++7709 12                    ld        (de),a
  69++770A 23                    inc       hl
  70++770B 13                    inc       de
  71++770C 10 F9                 djnz      1B
  72++770E D1 E1                 pop       de,hl
  73++7710 CD C7 6D              call      vid
  74++7713 CD B8 6D              call      vidd
  75++7716 7C                    ld        a,h
  76++7717 E6 7F                 and       #7f
  77++7719 FE 58                 cp        #58
  78++771B D0                    ret       nc
  79++771C 7A                    ld        a,d
  80++771D E6 7F                 and       #7f
  81++771F FE 58                 cp        #58
  82++7721 D0                    ret       nc
  83++7722 0D           1        dec       c
  84++7723 C2 03 77              jp        nz,2B
  85++7726 C9                    ret
  86++7727
  87++7727                       ENDMODULE
# file closed: ./libs/egl_funscr.a80
  21+ 7727                      display "  sfunc:",$-s
  22+ 7727
  23+ 7727                      display "egl len:",$-_eglstart
# file closed: Q:\Development\Dev-ZX\demo_cats\libs/egl.a80
  88  7727                      include "libs/rsc.a80"
# file opened: Q:\Development\Dev-ZX\demo_cats\libs/rsc.a80
   1+ 7727                      MODULE  rsc
   2+ 7727
   3+ 7727                      MACRO    rscLoad _rno, _rtb
   4+ 7727 ~                     ld      a,_rno
   5+ 7727 ~                     ld      de,_rtb
   6+ 7727 ~                     call    rsc.load
   7+ 7727                      ENDM
   8+ 7727
   9+ 7727                      MACRO    rscUnpack _rno, _rtb
  10+ 7727 ~                     ld      a,_rno
  11+ 7727 ~                     ld      de,_rtb
  12+ 7727 ~                     call    rsc.unpack
  13+ 7727                      ENDM
  14+ 7727
  15+ 7727                      MACRO    rscUnpackTMP _rno, _rtb
  16+ 7727 ~                     ld      a,_rno
  17+ 7727 ~                     ld      de,_rtb
  18+ 7727 ~                     call    rsc.unpacktmp
  19+ 7727                      ENDM
  20+ 7727
  21+ 7727                      MACRO    rscRun _rno, _rtb
  22+ 7727 ~                     ld      a,_rno
  23+ 7727 ~                     ld      de,_rtb
  24+ 7727 ~                     call    rsc.run
  25+ 7727                      ENDM
  26+ 7727
  27+ 7727                      MACRO    rscRunPg _rno, _rtb
  28+ 7727 ~                     ld      a,_rno
  29+ 7727 ~                     ld      de,_rtb
  30+ 7727 ~                     call    rsc.runPg
  31+ 7727                      ENDM
  32+ 7727
  33+ 7727                      MACRO    rscRunIX _rno, _rtb, _rix
  34+ 7727 ~                     ld      a,_rno
  35+ 7727 ~                     ld      de,_rtb
  36+ 7727 ~                     ld      hl,_rix
  37+ 7727 ~                     call    rsc.runhl2ix
  38+ 7727                      ENDM
  39+ 7727
  40+ 7727                      MACRO    rscRunIXPg _rno, _rtb, _rix
  41+ 7727 ~                     ld      a,_rno
  42+ 7727 ~                     ld      de,_rtb
  43+ 7727 ~                     ld      hl,_rix
  44+ 7727 ~                     call    rsc.runhl2ixPg
  45+ 7727                      ENDM
  46+ 7727
  47+ 7727                      STRUCT  rscb    ; resource block
  48+ 7727 ~            spg:    db      0       ; source page
  49+ 7727 ~            dpg:    db      0       ; destination page
  50+ 7727 ~            src:    dw      0       ; source data
  51+ 7727 ~            len:    dw      0       ; data len
  52+ 7727 ~            dst:    dw      0       ; destination data / parametter block for executables
  53+ 7727 ~            run:    dw      0       ; execution address
  54+ 7727                      ENDS
  55+ 7727
  56+ 7727              ;resource run /in place/. Action: page-in memory bank with resource and call run address
  57+ 7727              ;"dst" is loaded to IX - could be used to pass data to executable. (or via stack)
  58+ 7727 CD 4D 78     run:    call    getptr
  59+ 772A DD 7E 00             ld      a,(ix+rscb.spg)
  60+ 772D DD 5E 06 DD          ld      de,(ix+rscb.dst)
  60+ 7731 56 07
  61+ 7733 DD 6E 08 DD          ld      hl,(ix+rscb.run)
  61+ 7737 66 09
  62+ 7739 DD 62 DD 6B          ld      ix,de
  63+ 773D                      page_a
  63+ 773D 32 68 81    >         ld      (@page),a
  63+ 7740             >         page_am
  63+ 7740 D3 FD       >         out    (#fd),a
  64+ 7742 E9                   jp      (hl)
  65+ 7743
  66+ 7743              ; run from page, ret to page
  67+ 7743 CD 4D 78     runPg:  call    getptr
  68+ 7746 3A 68 81             ld      a,(@page)
  69+ 7749 32 6B 77             ld      (.page+1),a
  70+ 774C 21 69 77             ld      hl,.ret
  71+ 774F E5                   push    hl
  72+ 7750 DD 7E 00             ld      a,(ix+rscb.spg)
  73+ 7753 DD 5E 06 DD          ld      de,(ix+rscb.dst)
  73+ 7757 56 07
  74+ 7759 DD 6E 08 DD          ld      hl,(ix+rscb.run)
  74+ 775D 66 09
  75+ 775F DD 62 DD 6B          ld      ix,de
  76+ 7763                      page_a
  76+ 7763 32 68 81    >         ld      (@page),a
  76+ 7766             >         page_am
  76+ 7766 D3 FD       >         out    (#fd),a
  77+ 7768 E9                   jp      (hl)
  78+ 7769 F5           .ret:   push    af
  79+ 776A 3E 55        .page:  ld      a,#55
  80+ 776C                      page_a
  80+ 776C 32 68 81    >         ld      (@page),a
  80+ 776F             >         page_am
  80+ 776F D3 FD       >         out    (#fd),a
  81+ 7771 F1                   pop     af
  82+ 7772 C9                   ret
  83+ 7773
  84+ 7773              runhl2ix:
  85+ 7773 E5                   push    hl
  86+ 7774 CD 4D 78             call    getptr
  87+ 7777              ;--
  88+ 7777 3A 3B BC             ld      a,(@ivram)
  89+ 777A DD B6 00             or      (ix+rscb.spg)
  90+ 777D              ;---
  91+ 777D              ;        ld      a,(ix+rscb.spg)
  92+ 777D DD 6E 08 DD          ld      hl,(ix+rscb.run)
  92+ 7781 66 09
  93+ 7783 DD E1                pop     ix
  94+ 7785                      page_a
  94+ 7785 32 68 81    >         ld      (@page),a
  94+ 7788             >         page_am
  94+ 7788 D3 FD       >         out    (#fd),a
  95+ 778A E9                   jp      (hl)
  96+ 778B
  97+ 778B              ; run from page, ret to page
  98+ 778B              runhl2ixPg:
  99+ 778B 22 A6 77             ld      (.popix+2),hl
 100+ 778E CD 4D 78             call    getptr
 101+ 7791 3A 68 81             ld      a,(@page)
 102+ 7794 32 B0 77             ld      (.page+1),a
 103+ 7797 21 AE 77             ld      hl,.ret
 104+ 779A E5                   push    hl
 105+ 779B DD 7E 00             ld      a,(ix+rscb.spg)
 106+ 779E DD 6E 08 DD          ld      hl,(ix+rscb.run)
 106+ 77A2 66 09
 107+ 77A4 DD 21 55 55  .popix: ld      ix,#5555
 108+ 77A8                      page_a
 108+ 77A8 32 68 81    >         ld      (@page),a
 108+ 77AB             >         page_am
 108+ 77AB D3 FD       >         out    (#fd),a
 109+ 77AD E9                   jp      (hl)
 110+ 77AE F5           .ret:   push    af
 111+ 77AF 3E 55        .page:  ld      a,#55
 112+ 77B1                      page_a
 112+ 77B1 32 68 81    >         ld      (@page),a
 112+ 77B4             >         page_am
 112+ 77B4 D3 FD       >         out    (#fd),a
 113+ 77B6 F1                   pop     af
 114+ 77B7 C9                   ret
 115+ 77B8
 116+ 77B8
 117+ 77B8              ;load and run. Action: move resource to new location and run it.
 118+ 77B8 CD CA 77     lrun:   call    load
 119+ 77BB DD 6E 08 DD          ld      hl,(ix+rscb.run)
 119+ 77BF 66 09
 120+ 77C1 DD 7E 01             ld      a,(ix+rscb.dpg)
 121+ 77C4                      page_a
 121+ 77C4 32 68 81    >         ld      (@page),a
 121+ 77C7             >         page_am
 121+ 77C7 D3 FD       >         out    (#fd),a
 122+ 77C9 E9                   jp      (hl)
 123+ 77CA
 124+ 77CA              ;load resource. Action: move resource to new location.
 125+ 77CA CD 4D 78     load:   call    getptr
 126+ 77CD DD 4E 00             ld      c,(ix+rscb.spg)
 127+ 77D0 DD 46 01             ld      b,(ix+rscb.dpg)
 128+ 77D3 DD E5                push    ix
 129+ 77D5 C5                   push    bc
 130+ 77D6 DD 6E 02 DD          ld      hl,(ix+rscb.src)
 130+ 77DA 66 03
 131+ 77DC DD 5E 06 DD          ld      de,(ix+rscb.dst)
 131+ 77E0 56 07
 132+ 77E2 DD 4E 04 DD          ld      bc,(ix+rscb.len)
 132+ 77E6 46 05
 133+ 77E8 DD E1                pop     ix
 134+ 77EA CD AE 6C             call    mmu.copy
 135+ 77ED DD E1                pop     ix
 136+ 77EF C9                   ret
 137+ 77F0
 138+ 77F0 CD 4D 78     unpack: call    getptr
 139+ 77F3 DD 5E 06 DD          ld      de,(ix+rscb.dst)
 139+ 77F7 56 07
 140+ 77F9 DD 6E 02 DD  .dest:  ld      hl,(ix+rscb.src)
 140+ 77FD 66 03
 141+ 77FF
 142+ 77FF              ;        ld      a,(ix+rscb.spg)      ; original
 143+ 77FF
 144+ 77FF 3A 68 81             ld      a,(@page)             ; mod to maintain vram
 145+ 7802 E6 08                and     8                     ;
 146+ 7804 B7 DD B6 00          or      a,(ix+rscb.spg)       ;
 147+ 7808
 148+ 7808                      page_a
 148+ 7808 32 68 81    >         ld      (@page),a
 148+ 780B             >         page_am
 148+ 780B D3 FD       >         out    (#fd),a
 149+ 780D              ;        ld      (@page),a
 150+ 780D              ;        ld      bc,#7ffd
 151+ 780D              ;        res     6,a
 152+ 780D              ;        out     (c),a
 153+ 780D CD 61 78             call    dzx7s
 154+ 7810
 155+ 7810 DD 7E 01             ld      a,(ix+rscb.dpg)
 156+ 7813                      page_a
 156+ 7813 32 68 81    >         ld      (@page),a
 156+ 7816             >         page_am
 156+ 7816 D3 FD       >         out    (#fd),a
 157+ 7818              ;        ld      (@page),a
 158+ 7818              ;        ld      bc,#7ffd
 159+ 7818              ;        res     6,a
 160+ 7818              ;        out     (c),a
 161+ 7818 C9                   ret
 162+ 7819
 163+ 7819 ~            /*
 164+ 7819 ~            unpack: call    getptr
 165+ 7819 ~                    ld      a,(ix+rscb.spg)
 166+ 7819 ~                    page_a
 167+ 7819 ~                    ld      hl,(ix+rscb.src)
 168+ 7819 ~                    ld      de,(ix+rscb.dst)
 169+ 7819 ~                    call    dzx7s
 170+ 7819 ~                    ld      a,(ix+rscb.dpg)
 171+ 7819 ~                    page_a
 172+ 7819 ~                    ret
 173+ 7819 ~            */
 174+ 7819              unpacktmp:
 175+ 7819 CD 4D 78             call    getptr
 176+ 781C DD 7E 01             ld      a,(ix+rscb.dpg)       ; destination page is set
 177+ 781F                      page_a
 177+ 781F 32 68 81    >         ld      (@page),a
 177+ 7822             >         page_am
 177+ 7822 D3 FD       >         out    (#fd),a
 178+ 7824 DD 6E 06 DD          ld      hl,(ix+rscb.dst)      ; dst address serves as temp address of data in memory
 178+ 7828 66 07
 179+ 782A DD 5E 08 DD          ld      de,(ix+rscb.run)      ; run address is new destination for depacker
 179+ 782E 56 09
 180+ 7830 C3 61 78             jp      dzx7s
 181+ 7833
 182+ 7833              ; input hl:address, bc=length/2
 183+ 7833              reverse:
 184+ 7833 E5                   push    hl
 185+ 7834 09                   add     hl,bc
 186+ 7835 E5 DD E1             ld      ix,hl
 187+ 7838 E1                   pop     hl
 188+ 7839 CB 28                sra     b
 189+ 783B CB 11                rl      c
 190+ 783D DD 2B        .loop:  dec     ix
 191+ 783F 5E                   ld      e,(hl)
 192+ 7840 DD 56 00             ld      d,(ix+0)
 193+ 7843 72                   ld      (hl),d
 194+ 7844 DD 73 00             ld      (ix+0),e
 195+ 7847 ED A1                cpi
 196+ 7849 EA 3D 78             jp      pe,.loop
 197+ 784C C9                   ret
 198+ 784D
 199+ 784D 0E 0A        getptr: ld      c,rscb
 200+ 784F CD 57 78             call    smul
 201+ 7852 19                   add     hl,de
 202+ 7853 E5                   push    hl
 203+ 7854 DD E1                pop     ix
 204+ 7856 C9                   ret
 205+ 7857
 206+ 7857              ; smul - stupid multiplication
 207+ 7857              ; c-multiplicant, a-multiplier, hl-result
 208+ 7857              smul:
 209+ 7857 06 00                ld      b,0
 210+ 7859 60                   ld      h,b
 211+ 785A 68                   ld      l,b
 212+ 785B A7           .l1:    and     a
 213+ 785C C8                   ret     z
 214+ 785D 09                   add     hl,bc
 215+ 785E 3D                   dec     a
 216+ 785F 18 FA                jr      .l1
 217+ 7861
 218+ 7861              dzx7s:   ; _standard:
 219+ 7861                      include "libs/dzx7_standard.asm"
# file opened: ./libs/dzx7_standard.asm
   1++7861              ; -----------------------------------------------------------------------------
   2++7861              ; ZX7 decoder by Einar Saukas, Antonio Villena & Metalbrain
   3++7861              ; "Standard" version (69 bytes only)
   4++7861              ; -----------------------------------------------------------------------------
   5++7861              ; Parameters:
   6++7861              ;   HL: source address (compressed data)
   7++7861              ;   DE: destination address (decompressing)
   8++7861              ; -----------------------------------------------------------------------------
   9++7861
  10++7861              dzx7_standard:
  11++7861 3E 80                ld      a, $80
  12++7863              dzx7s_copy_byte_loop:
  13++7863 ED A0                ldi                             ; copy literal byte
  14++7865              dzx7s_main_loop:
  15++7865 CD A0 78             call    dzx7s_next_bit
  16++7868 30 F9                jr      nc, dzx7s_copy_byte_loop ; next bit indicates either literal or sequence
  17++786A
  18++786A              ; determine number of bits used for length (Elias gamma coding)
  19++786A D5                   push    de
  20++786B 01 00 00             ld      bc, 0
  21++786E 50                   ld      d, b
  22++786F              dzx7s_len_size_loop:
  23++786F 14                   inc     d
  24++7870 CD A0 78             call    dzx7s_next_bit
  25++7873 30 FA                jr      nc, dzx7s_len_size_loop
  26++7875
  27++7875              ; determine length
  28++7875              dzx7s_len_value_loop:
  29++7875 D4 A0 78             call    nc, dzx7s_next_bit
  30++7878 CB 11                rl      c
  31++787A CB 10                rl      b
  32++787C 38 1F                jr      c, dzx7s_exit           ; check end marker
  33++787E 15                   dec     d
  34++787F 20 F4                jr      nz, dzx7s_len_value_loop
  35++7881 03                   inc     bc                      ; adjust length
  36++7882
  37++7882              ; determine offset
  38++7882 5E                   ld      e, (hl)                 ; load offset flag (1 bit) + offset value (7 bits)
  39++7883 23                   inc     hl
  40++7884 CB 33                defb    $cb, $33                ; opcode for undocumented instruction "SLL E" aka "SLS E"
  41++7886 30 0C                jr      nc, dzx7s_offset_end    ; if offset flag is set, load 4 extra bits
  42++7888 16 10                ld      d, $10                  ; bit marker to load 4 bits
  43++788A              dzx7s_rld_next_bit:
  44++788A CD A0 78             call    dzx7s_next_bit
  45++788D CB 12                rl      d                       ; insert next bit into D
  46++788F 30 F9                jr      nc, dzx7s_rld_next_bit  ; repeat 4 times, until bit marker is out
  47++7891 14                   inc     d                       ; add 128 to DE
  48++7892 CB 3A                srl     d                       ; retrieve fourth bit from D
  49++7894              dzx7s_offset_end:
  50++7894 CB 1B                rr      e                       ; insert fourth bit into E
  51++7896
  52++7896              ; copy previous sequence
  53++7896 E3                   ex      (sp), hl                ; store source, restore destination
  54++7897 E5                   push    hl                      ; store destination
  55++7898 ED 52                sbc     hl, de                  ; HL = destination - offset - 1
  56++789A D1                   pop     de                      ; DE = destination
  57++789B ED B0                ldir
  58++789D              dzx7s_exit:
  59++789D E1                   pop     hl                      ; restore source address (compressed data)
  60++789E 30 C5                jr      nc, dzx7s_main_loop
  61++78A0              dzx7s_next_bit:
  62++78A0 87                   add     a, a                    ; check next bit
  63++78A1 C0                   ret     nz                      ; no more bits left?
  64++78A2 7E                   ld      a, (hl)                 ; load another group of 8 bits
  65++78A3 23                   inc     hl
  66++78A4 17                   rla
  67++78A5 C9                   ret
  68++78A6
  69++78A6              ; -----------------------------------------------------------------------------
  70++78A6
# file closed: ./libs/dzx7_standard.asm
 220+ 78A6
 221+ 78A6                      ENDMODULE
# file closed: Q:\Development\Dev-ZX\demo_cats\libs/rsc.a80
  89  78A6
  90  78A6              ;--- demo data
  91  78A6                      include "demo/demo_dat.a80"
# file opened: Q:\Development\Dev-ZX\demo_cats\demo/demo_dat.a80
   1+ 78A6              ; demo data
   2+ 78A6              atrMaskTab1:
   3+ 78A6              ; halts between each block
   4+ 78A6 02                    db    2                               ; number of halts between each mask
   5+ 78A7              ; demo group text
   6+ 78A7              ;         db    24,0
   7+ 78A7              ;         db    24,-7
   8+ 78A7              ; invader monster
   9+ 78A7 28 FF                 db    40,-1
  10+ 78A9 28 F9                 db    40,-7
  11+ 78AB              ; teeth
  12+ 78AB 10 00                 db    16,0
  13+ 78AD 10 F9                 db    16,-7
  14+ 78AF              ; invaders text
  15+ 78AF 20 00                 db    32,0
  16+ 78B1 20 F9                 db    32,-7
  17+ 78B3              ; background gradient
  18+ 78B3              ;         db    8, 0
  19+ 78B3              ;         db    8, -7
  20+ 78B3              ; background gradient
  21+ 78B3 08 FF                 db    8, -1
  22+ 78B5              ; teeth
  23+ 78B5 10 00                 db    16,0
  24+ 78B7              ; demo group text
  25+ 78B7 18 00                 db    24,0
  26+ 78B9              ; invaders text
  27+ 78B9 20 00                 db    32,0
  28+ 78BB              ; invader monster
  29+ 78BB 28 FF                 db    40,-1
  30+ 78BD              ; end of block, number of halts
  31+ 78BD 80 00                 db    #80, 0
  32+ 78BF
  33+ 78BF              atrMaskTab2:
  34+ 78BF              ; halts between each block
  35+ 78BF 00                    db    0
  36+ 78C0              ; background gradient
  37+ 78C0 08 00                 db    8, 0
  38+ 78C2              ; teeth
  39+ 78C2 10 00                 db    16,0
  40+ 78C4              ; demo group text
  41+ 78C4 18 01                 db    24,1
  42+ 78C6              ; invaders text
  43+ 78C6 20 01                 db    32,1
  44+ 78C8              ; invader monster
  45+ 78C8 28 00                 db    40,0
  46+ 78CA              ; end of block, number of halts
  47+ 78CA 80 00                 db    #80, 0
  48+ 78CC
  49+ 78CC              atrMaskTab3:
  50+ 78CC              ; halts between each block
  51+ 78CC 00                    db    0
  52+ 78CD              ; demo group text
  53+ 78CD 18 00                 db    24,0
  54+ 78CF              ; invaders text
  55+ 78CF 20 00                 db    32,0
  56+ 78D1              ; end of block, number of halts
  57+ 78D1 80 00                 db    #80, 0
  58+ 78D3              blk = 2                    ; blink counter
  59+ 78D3              atrMaskTab5:               ; solar system
  60+ 78D3 02                    db    2            ; wait in halts between changes
  61+ 78D4              ; sun
  62+ 78D4                       dup  blk
  63+ 78D4 30 F9       >         db    48,-7
  64+ 78D6 30 00       >         db    48,0
  63+ 78D8 30 F9       >         db    48,-7
  64+ 78DA 30 00       >         db    48,0
  65+ 78DC                       edup
  66+ 78DC
  67+ 78DC              ; earth
  68+ 78DC                       dup blk
  69+ 78DC 08 FB       >         db    8,-5
  70+ 78DE 08 00       >         db    8, 0
  69+ 78E0 08 FB       >         db    8,-5
  70+ 78E2 08 00       >         db    8, 0
  71+ 78E4                       edup
  72+ 78E4
  73+ 78E4              ; inner ring
  74+ 78E4                       dup blk
  75+ 78E4 10 F9       >         db    16,-7
  76+ 78E6 10 00       >         db    16,-0
  75+ 78E8 10 F9       >         db    16,-7
  76+ 78EA 10 00       >         db    16,-0
  77+ 78EC                       edup
  78+ 78EC
  79+ 78EC              ; outer planets
  80+ 78EC                       dup blk
  81+ 78EC 20 FC       >         db    32,-4
  82+ 78EE 20 00       >         db    32,-0
  81+ 78F0 20 FC       >         db    32,-4
  82+ 78F2 20 00       >         db    32,-0
  83+ 78F4                       edup
  84+ 78F4
  85+ 78F4              ; outer ring
  86+ 78F4                       dup   2
  87+ 78F4 18 FE       >         db    24,-2
  88+ 78F6 18 00       >         db    24,-0
  87+ 78F8 18 FE       >         db    24,-2
  88+ 78FA 18 00       >         db    24,-0
  89+ 78FC                       edup
  90+ 78FC              ; stars
  91+ 78FC 28 F9                 db    40, -7
  92+ 78FE 28 00                 db    40, 0
  93+ 7900
  94+ 7900 ~            /*
  95+ 7900 ~            ; earth
  96+ 7900 ~                     dup  8
  97+ 7900 ~                     db    8, 7
  98+ 7900 ~                     db    8, -7
  99+ 7900 ~                     edup
 100+ 7900 ~
 101+ 7900 ~                     db    8, 0
 102+ 7900 ~            */
 103+ 7900
 104+ 7900              ; end of block, number of halts
 105+ 7900 80 40                 db    #80, #40
 106+ 7902
 107+ 7902              atrMaskTab6:               ; earth blink
 108+ 7902 02                    db    2            ; wait in halts between changes
 109+ 7903              ; stars
 110+ 7903 28 00                 db    40, 0
 111+ 7905 28 09                 db    40, #08+1
 112+ 7907              ; outer ring
 113+ 7907 18 00                 db    24, 0
 114+ 7909 18 09                 db    24, #08+1
 115+ 790B              ; outer planets
 116+ 790B 20 00                 db    32, 0
 117+ 790D 20 09                 db    32, #08+1
 118+ 790F              ; inner ring
 119+ 790F 10 00                 db    16, 0
 120+ 7911 10 09                 db    16, #08+1
 121+ 7913              ; earth
 122+ 7913 08 00                 db    8, 0
 123+ 7915 08 09                 db    8, #08+1
 124+ 7917              ; sun
 125+ 7917              ;         db    48, 0
 126+ 7917              ;         db    48, #08+6
 127+ 7917              ; earth
 128+ 7917                       dup  8
 129+ 7917 08 07       >         db    8, 7
 130+ 7919 08 09       >         db    8, #08+1
 129+ 791B 08 07       >         db    8, 7
 130+ 791D 08 09       >         db    8, #08+1
 129+ 791F 08 07       >         db    8, 7
 130+ 7921 08 09       >         db    8, #08+1
 129+ 7923 08 07       >         db    8, 7
 130+ 7925 08 09       >         db    8, #08+1
 129+ 7927 08 07       >         db    8, 7
 130+ 7929 08 09       >         db    8, #08+1
 129+ 792B 08 07       >         db    8, 7
 130+ 792D 08 09       >         db    8, #08+1
 129+ 792F 08 07       >         db    8, 7
 130+ 7931 08 09       >         db    8, #08+1
 129+ 7933 08 07       >         db    8, 7
 130+ 7935 08 09       >         db    8, #08+1
 131+ 7937                       edup
 132+ 7937 08 00                 db    8, 0
 133+ 7939              ;end
 134+ 7939 80 00                 db    #80, 0
 135+ 793B
 136+ 793B              atrMaskTab7:               ; earth blink
 137+ 793B 04                    db    4            ; wait in halts between changes
 138+ 793C              ; earth
 139+ 793C                       dup  4
 140+ 793C 08 07       >         db    8, 7
 141+ 793E 08 09       >         db    8, #08+1
 140+ 7940 08 07       >         db    8, 7
 141+ 7942 08 09       >         db    8, #08+1
 140+ 7944 08 07       >         db    8, 7
 141+ 7946 08 09       >         db    8, #08+1
 140+ 7948 08 07       >         db    8, 7
 141+ 794A 08 09       >         db    8, #08+1
 142+ 794C                       edup
 143+ 794C 08 00                 db    8, 0
 144+ 794E              ;end
 145+ 794E 80 00                 db    #80, 0
 146+ 7950
 147+ 7950              atrMaskTab8:
 148+ 7950 04                    db    4            ; wait in halts between changes
 149+ 7951              ; stars
 150+ 7951 28 08                 db    40, #08
 151+ 7953              ; outer ring
 152+ 7953 18 08                 db    24, #08
 153+ 7955              ; outer planets
 154+ 7955 20 08                 db    32, #08
 155+ 7957              ; inner ring
 156+ 7957 10 09                 db    16, #08+1
 157+ 7959              ; earth
 158+ 7959 08 08                 db    8,  #08
 159+ 795B              ; sun
 160+ 795B 30 09                 db    48, #08+1
 161+ 795D              ; earth
 162+ 795D                       dup  8
 163+ 795D 08 07       >         db    8, 7
 164+ 795F 08 09       >         db    8, #08+1
 163+ 7961 08 07       >         db    8, 7
 164+ 7963 08 09       >         db    8, #08+1
 163+ 7965 08 07       >         db    8, 7
 164+ 7967 08 09       >         db    8, #08+1
 163+ 7969 08 07       >         db    8, 7
 164+ 796B 08 09       >         db    8, #08+1
 163+ 796D 08 07       >         db    8, 7
 164+ 796F 08 09       >         db    8, #08+1
 163+ 7971 08 07       >         db    8, 7
 164+ 7973 08 09       >         db    8, #08+1
 163+ 7975 08 07       >         db    8, 7
 164+ 7977 08 09       >         db    8, #08+1
 163+ 7979 08 07       >         db    8, 7
 164+ 797B 08 09       >         db    8, #08+1
 165+ 797D                       edup
 166+ 797D 08 07                 db    8, 7
 167+ 797F              ;end
 168+ 797F 80 00                 db    #80, 0
 169+ 7981
 170+ 7981              blk = 1                    ; blink counter
 171+ 7981              atrMaskRotoid:
 172+ 7981 02                    db    2            ; wait in halts between changes
 173+ 7982
 174+ 7982              ; powered
 175+ 7982                       dup  blk+1
 176+ 7982 30 F9       >         db    6*8,-7 ; dot rotoid
 177+ 7984 30 00       >         db    6*8,0
 176+ 7986 30 F9       >         db    6*8,-7 ; dot rotoid
 177+ 7988 30 00       >         db    6*8,0
 178+ 798A                       edup
 179+ 798A
 180+ 798A                       dup  blk+1
 181+ 798A 38 F9       >         db    7*8,-7 ; dot engine
 182+ 798C 38 00       >         db    7*8,0
 181+ 798E 38 F9       >         db    7*8,-7 ; dot engine
 182+ 7990 38 00       >         db    7*8,0
 183+ 7992                       edup
 184+ 7992
 185+ 7992              c = 5
 186+ 7992                       dup  blk
 187+ 7992 28 F9       >         db    c*8,-7
 188+ 7994 28 09       >         db    c*8,8+1
 189+ 7996                       edup
 190+ 7996
 191+ 7996 08 00                 db    1*8,0  ; rotoid
 192+ 7998 18 00                 db    3*8,0  ; rotoid i
 193+ 799A
 194+ 799A 10 00                 db    2*8,0  ; engine
 195+ 799C 20 00                 db    4*8,0  ; engine i
 196+ 799E
 197+ 799E              ; end of block, number of halts
 198+ 799E 80 00                 db    #80, #00
 199+ 79A0
 200+ 79A0              blk=2
 201+ 79A0              atrMaskVoid:
 202+ 79A0 02                    db    2            ; wait in halts between changes
 203+ 79A1
 204+ 79A1              c = 1
 205+ 79A1                       dup  blk
 206+ 79A1 08 F9       >         db    c*8,-7
 207+ 79A3 08 00       >         db    c*8,0
 206+ 79A5 08 F9       >         db    c*8,-7
 207+ 79A7 08 00       >         db    c*8,0
 208+ 79A9                       edup
 209+ 79A9
 210+ 79A9              c = 2
 211+ 79A9                       dup  blk
 212+ 79A9 10 F9       >         db    c*8,-7
 213+ 79AB 10 00       >         db    c*8,0
 212+ 79AD 10 F9       >         db    c*8,-7
 213+ 79AF 10 00       >         db    c*8,0
 214+ 79B1                       edup
 215+ 79B1
 216+ 79B1              c = 3
 217+ 79B1                       dup  blk
 218+ 79B1 18 F9       >         db    c*8,-7
 219+ 79B3 18 00       >         db    c*8,0
 218+ 79B5 18 F9       >         db    c*8,-7
 219+ 79B7 18 00       >         db    c*8,0
 220+ 79B9                       edup
 221+ 79B9
 222+ 79B9              c = 4
 223+ 79B9                       dup  blk
 224+ 79B9 20 F9       >         db    c*8,-7
 225+ 79BB 20 00       >         db    c*8,0
 224+ 79BD 20 F9       >         db    c*8,-7
 225+ 79BF 20 00       >         db    c*8,0
 226+ 79C1                       edup
 227+ 79C1              c = 5
 228+ 79C1                       dup  blk
 229+ 79C1 28 F9       >         db    c*8,-7
 230+ 79C3 28 00       >         db    c*8,0
 229+ 79C5 28 F9       >         db    c*8,-7
 230+ 79C7 28 00       >         db    c*8,0
 231+ 79C9                       edup
 232+ 79C9              c = 6
 233+ 79C9                       dup  blk
 234+ 79C9 30 F9       >         db    c*8,-7
 235+ 79CB 30 00       >         db    c*8,0
 234+ 79CD 30 F9       >         db    c*8,-7
 235+ 79CF 30 00       >         db    c*8,0
 236+ 79D1                       edup
 237+ 79D1              c = 7
 238+ 79D1                       dup  blk
 239+ 79D1 38 F9       >         db    c*8,-7
 240+ 79D3 38 00       >         db    c*8,0
 239+ 79D5 38 F9       >         db    c*8,-7
 240+ 79D7 38 00       >         db    c*8,0
 241+ 79D9                       edup
 242+ 79D9
 243+ 79D9              ; end of block, number of halts
 244+ 79D9 80 00                 db    #80, #00
 245+ 79DB
 246+ 79DB                                      ; width, height, data for each line....
 247+ 79DB 20 06 55 FF  dtaPatt:        db      #20,#06,#55,#ff,#55,#ff,#55,#aa
 247+ 79DF 55 FF 55 AA
 248+ 79E3
 249+ 79E3              ;dtaWater:       db      #20,#07,#43,#43,#43,#43,#0a,#4a,#4a
 250+ 79E3 20 0A 04 44  dtaWater:       db      #20,#0a,#04,#44,#47,#06,#05,#45,#45,#4d,#4d,#0d
 250+ 79E7 47 06 05 45
 250+ 79EB 45 4D 4D 0D
 251+ 79EF 20 09 07 07  dtaSky:         db      #20,#09,#07,#07,#07,#07,#07,#07,#07,#47,#46
 251+ 79F3 07 07 07 07
 251+ 79F7 07 47 46
 252+ 79FA
 253+ 79FA 20 20        dtaPlanet:      db      #20,#20
 254+ 79FC 00 55 00 55                  db      #00, #55,#00,#55,#00,#55,#aa,#55,#aa,#55,#ff,#55,#ff,#ff,#ff,#ff
 254+ 7A00 00 55 AA 55
 254+ 7A04 AA 55 FF 55
 254+ 7A08 FF FF FF FF
 255+ 7A0C FF FF FF FF                  db      #ff,#ff,#ff,#ff,#ff,#ff,#ff,#ff,#ff,#ff,#ff,#ff,#ff,#ff,#ff,#ff
 255+ 7A10 FF FF FF FF
 255+ 7A14 FF FF FF FF
 255+ 7A18 FF FF FF FF
 256+ 7A1C
 257+ 7A1C 20 0C        dtaCity:        db      #20,12
 258+ 7A1E FF FF 55 AA                  db      #ff,#ff,#55,#aa,#00,#55,#aa,#00,#aa,#00,#00,#55
 258+ 7A22 00 55 AA 00
 258+ 7A26 AA 00 00 55
 259+ 7A2A
 260+ 7A2A 05 06        dtaCalpis:      db      #05,#06
 261+ 7A2C 00 00 00...                  ds      #06,#00
 262+ 7A32
 263+ 7A32                                      ;from: posx, posy, to: posx, posy, width, height, mode
 264+ 7A32 00 A0 00 AF  mirrLine:       mirr    0,#a0,0,#af,#20,#07,%11000000
 264+ 7A36 20 07 C0 00
 265+ 7A3A
 266+ 7A3A ~            /*
 267+ 7A3A ~            ;------------- init screen
 268+ 7A3A ~            bpx_intrd:     atwin   #0606,17,11,bpx_intrd.dta, 0, o0
 269+ 7A3A ~            .dta:          db      #3f,1*9
 270+ 7A3A ~                           db      1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6,7,7,7
 271+ 7A3A ~                           db      6,7,6,5,6,5,4,5
 272+ 7A3A ~                           db      #ff
 273+ 7A3A ~
 274+ 7A3A ~                           db      #07,#47,#07,#47,#06,#46,#06,#46
 275+ 7A3A ~                           db      #ff
 276+ 7A3A ~                           db      #05,#45,#05,#45,#04,#04,#04,#04
 277+ 7A3A ~                           db      #43,#03,#43,#03,#42,#42,#42,#42
 278+ 7A3A ~                           db      #01
 279+ 7A3A ~                           db      #ff
 280+ 7A3A ~
 281+ 7A3A ~            bpx_intro:     clatt   0, 24, bpx_intro.dta, 1, o0
 282+ 7A3A ~            .dta:          db      1*9, 1, #80
 283+ 7A3A ~            ;.data:         db      7*9, 5*9, 1*9, 1, #80
 284+ 7A3A ~            */
 285+ 7A3A
 286+ 7A3A              scr_intro:
 287+ 7A3A 00 18 4E 7A  .clatr:        clatt   0, 24, .flash, 1, #50
 287+ 7A3E 01 50 00 00
 287+ 7A42 00 00
 288+ 7A44 00 18 5C 7A  .clout:        clatt   0, 24, .flout, 1, #50
 288+ 7A48 01 50 00 00
 288+ 7A4C 00 00
 289+ 7A4E 3F 7F 3F 7F  .flash:        db      63,127,63,127,63,55,47,39,31,23,15,2+64,3,#80
 289+ 7A52 3F 37 2F 27
 289+ 7A56 1F 17 0F 42
 289+ 7A5A 03 80
 290+ 7A5C 42 03 04 03  .flout:        db      2+64,3,4,3,4,5,5,4,5,4,5,5,6,5,6,5,6,7,7,6,6,5,4,3,3,2,0,0,1,0,1,0,0,#80
 290+ 7A60 04 05 05 04
 290+ 7A64 05 04 05 05
 290+ 7A68 06 05 06 05
 290+ 7A6C 06 07 07 06
 290+ 7A70 06 05 04 03
 290+ 7A74 03 02 00 00
 290+ 7A78 01 00 01 00
 290+ 7A7C 00 80
 291+ 7A7E
 292+ 7A7E              yp: = 7
 293+ 7A7E              hg: = 2
 294+ 7A7E              ;atrDarkness1:  clatt   yp + 0*hg, hg, clattDark, 0, o0
 295+ 7A7E              ;atrDarkness2:  clatt   yp + 1*hg, hg, clattDark, 0, o0
 296+ 7A7E              ;atrDarkness3:  clatt   yp + 2*hg, hg, clattDark, 0, o0
 297+ 7A7E              ;atrDarkness4:  clatt   yp + 3*hg, hg, clattDark, 0, o0
 298+ 7A7E
 299+ 7A7E              ;clattDark:     db      1,2,3,4,5,6,7,#47,#46,#45,#45,#45,#45,#45,5,4,#43,#2,#ff
 300+ 7A7E
 301+ 7A7E              ;atrDarknessf:  clatt   0,24, clattDarkf, 1, o0
 302+ 7A7E              ;clattDarkf:    db      #38,#37,#47,#45,#42,#03,#02,#01,#00,#ff
 303+ 7A7E
 304+ 7A7E              ;atrDarknessw:  atwin   #0d12, 8, 2, atrDarkw, 0, o0
 305+ 7A7E              ;atrDarkw:      db      #42,#42,#42,#43,#43,#44,#44,#45,#45,#46,#47,#ff
 306+ 7A7E
 307+ 7A7E              ;atrDarknessw2: atwin   #0d12, 8, 2, atrDarkw2, 0, o0
 308+ 7A7E              ;atrDarkw2:     db      #47,#47,#47,#47,#47,#47,#47,#47,#47,#47,#47,#ff
 309+ 7A7E
 310+ 7A7E              ;atrDarknessw3: atwin   #0d12, 8, 2, atrDarkw3, 0, o0
 311+ 7A7E              ;atrDarkw3:     db      #47,#46,6,5,4,3,2,1,0,#ff
 312+ 7A7E
 313+ 7A7E              ;-------------- generic flash
 314+ 7A7E 00 18 88 7A  atrFlash:       clatt  0, 24, atrFlashDta, %10001101, #55
 314+ 7A82 8D 55 00 00
 314+ 7A86 00 00
 315+ 7A88 7F 7F        atrFlashDta:    db     #7f,#7f
 316+ 7A8A 45 45 FF     atrFlashCol:    db     #45, #45, #ff
 317+ 7A8D
 318+ 7A8D              ;-------------- vtxt flash
 319+ 7A8D 00 18 97 7A  atrVtxtFlash:   clatt  0, 24, atrVtxtFlash.dta, %00000001, #50
 319+ 7A91 01 50 00 00
 319+ 7A95 00 00
 320+ 7A97 6D 7F 6D 45  .dta:           db     #6d, #7f, #6d, #45, #05, #ff
 320+ 7A9B 05 FF
 321+ 7A9D
 322+ 7A9D              ;-------------- screen flash
 323+ 7A9D 00 18 A7 7A  atrScrFlash:    clatt  0,24, dataSF, %10000001,#55
 323+ 7AA1 81 55 00 00
 323+ 7AA5 00 00
 324+ 7AA7 00 00 00...  dataSF:         ds     17
 325+ 7AB8
 326+ 7AB8              ;-------------- boot alien eye
 327+ 7AB8 0A 07 08 06  atrMachine:     atwin   #070a,8,6,atrMachineData, %00000010, #50
 327+ 7ABC C4 7A 02 50
 327+ 7AC0 00 00 00 00
 328+ 7AC4 02 00 00 FF  atrMachineData: db      #02,0,0,#ff
 329+ 7AC8
 330+ 7AC8 ~            /*
 331+ 7AC8 ~            ;rectangle fill
 332+ 7AC8 ~                    STRUCT rctf
 333+ 7AC8 ~            posx:   db     0         ; char
 334+ 7AC8 ~            posy:   db     0
 335+ 7AC8 ~            wdth:   db     0         ; char
 336+ 7AC8 ~            hght:   db     0
 337+ 7AC8 ~            fill:   db     0
 338+ 7AC8 ~            mode:   db     0         ; 0-1  00 - put, 01 - or, 10 - and, 11 xor
 339+ 7AC8 ~                                     ; 2    vram addr : 0=#4000, 1=#c000
 340+ 7AC8 ~                                     ; 3    rotate gfx: 0=don't, 1=rrc <fill> every next line
 341+ 7AC8 ~                                     ; 4    attributes
 342+ 7AC8 ~                    ENDS
 343+ 7AC8 ~            */
 344+ 7AC8
 345+ 7AC8              ;-------------------------------------------------------------------------------
 346+ 7AC8              ; map HUD
 347+ 7AC8              ;-------------------------------------------------------------------------------
 348+ 7AC8
 349+ 7AC8              ;.sunrct:  rctf .px,.py,.wh,#05,#47,%00010000
 350+ 7AC8
 351+ 7AC8 12 08 0E 02  rctScale1:  rctf  #12,#08,#0e,#02,#45,%00010000
 351+ 7ACC 45 10
 352+ 7ACE 00 10 02 0A  rctScale2:  rctf  #00,#10,#02,#0a,#43,%00010000
 352+ 7AD2 43 10
 353+ 7AD4 00 70 18 06  rctTrace:   rctf  #00,#70,#18,#06,#04,%00010000
 353+ 7AD8 04 10
 354+ 7ADA 1A 70 06 06  rctGraph:   rctf  #1a,#70,#06,#06,#44,%00010000
 354+ 7ADE 44 10
 355+ 7AE0 0B 18 0A 0B  rctPyram:   rctf  #0b,#18,#0a,#0b,#46,%00010000
 355+ 7AE4 46 10
 356+ 7AE6 0B 18 0A 0B  rctPyrm2:   rctf  #0b,#18,#0a,#0b,#43,%00010000
 356+ 7AEA 43 10
 357+ 7AEC
 358+ 7AEC              ;               clatt  b.posy, b.hght, w.data, b.mode, b.page
 359+ 7AEC              ; mode: bit 0=0 - no border,  =1 - border as paper
 360+ 7AEC              ;       bit 1=0 - no repeat,  =1 - repeat sequence
 361+ 7AEC              ;       bit 2=0 - no page,    =1 - page out memory
 362+ 7AEC              ;       bit 3=0 - no flip vrm =1 - flip vram (xor page value with %00001011)
 363+ 7AEC              ;       bit 7=0 - addr #5800  =1  #d8 addressing
 364+ 7AEC              atrComp:
 365+ 7AEC 00 13 F6 7A  .vram:         clatt   0, 19, .vd1, %00000010, #55
 365+ 7AF0 02 55 00 00
 365+ 7AF4 00 00
 366+ 7AF6 04 01 00 00  .vd1:          db      4,1,0,0,4,#44,0,0,4,4,0,1,4,0,4,6,4,4,4,0,4,#ff
 366+ 7AFA 04 44 00 00
 366+ 7AFE 04 04 00 01
 366+ 7B02 04 00 04 06
 366+ 7B06 04 04 04 00
 366+ 7B0A 04 FF
 367+ 7B0C
 368+ 7B0C              ;-------------------------------------------------------------------------------
 369+ 7B0C              ; main subtitles
 370+ 7B0C              ;-------------------------------------------------------------------------------
 371+ 7B0C
 372+ 7B0C 00 A8 20 03  rctSubAt:   rctf  #00,#a8,#20,#03,#00,%00010000
 372+ 7B10 00 10
 373+ 7B12 00 A8 20 03  rctSubAt2:  rctf  #00,#a8,#20,#03,#00,%00010100
 373+ 7B16 00 14
 374+ 7B18 00 A8 20 18  rctSubPx:   rctf  #00,#a8,#20,#18,#00,%00000000
 374+ 7B1C 00 00
 375+ 7B1E 00 A8 20 18  rctSubPx2:  rctf  #00,#a8,#20,#18,#00,%00000100
 375+ 7B22 00 04
 376+ 7B24
 377+ 7B24                              ;      pos,wdt,hght, data_ptr, mode, page, l_mod, h_mod
 378+ 7B24 00 A8 20 18  tit_win:        pxwin  #a800, 32, 24, px_clear_dt, %10000001, #57,     #00,     #00
 378+ 7B28 35 7B 81 57
 378+ 7B2C 00 00 00 00
 378+ 7B30 00 00 00 00
 378+ 7B34 00
 379+ 7B35                              ; number of bytes, data...
 380+ 7B35 02 00 00     px_clear_dt:    db     02,#00,#00
 381+ 7B38
 382+ 7B38 00 00 20 A8  rctSubPx3:    rctf  #00,#00,#20,#a8,#00,%00000000  ; clear pixel window for hollistown
 382+ 7B3C 00 00
 383+ 7B3E 00 00 20 14  rctSubAt3:    rctf  #00,#00,#20,#14,#08,%00010100  ; clear attrs top    / sky
 383+ 7B42 08 14
 384+ 7B44 00 A0 20 04  rctSubAt4:    rctf  #00,#a0,#20,#04,#00,%00010100  ; clear attrs bottom / town
 384+ 7B48 00 14
 385+ 7B4A
 386+ 7B4A              ;-------------------------------------------------------------------------------
 387+ 7B4A              ; crater scene
 388+ 7B4A              ;-------------------------------------------------------------------------------
 389+ 7B4A              ;.sunrct:  rctf .px,.py,.wh,#05,#47,%00010000
 390+ 7B4A
 391+ 7B4A 09 30 10 06  rctDrop1:   rctf  #09    ,#08*6,#10,#06,#45,%00010000
 391+ 7B4E 45 10
 392+ 7B50 0A 40 02 02  rctDropL:   rctf  #0a    ,#08*8,#02,#02,#55,%00010000
 392+ 7B54 55 10
 393+ 7B56 16 40 02 02  rctDropR:   rctf  #0a+12 ,#08*8,#02,#02,#55,%00010000
 393+ 7B5A 55 10
 394+ 7B5C 10 40 02 02  rctDropM:   rctf  #0a+6  ,#08*8,#02,#02,#15,%00010000
 394+ 7B60 15 10
 395+ 7B62
 396+ 7B62
 397+ 7B62 ~            /*
 398+ 7B62 ~                          STRUCT  atwin
 399+ 7B62 ~            ;atx           db     0
 400+ 7B62 ~            ;aty           db     0
 401+ 7B62 ~            atxy:          dw     0
 402+ 7B62 ~            width:         db     0
 403+ 7B62 ~            hght:          db     0
 404+ 7B62 ~            data:          dw     0
 405+ 7B62 ~            mode:          db     0
 406+ 7B62 ~            ; mode: bit 0=0 - no border,  =1 - border as paper
 407+ 7B62 ~            ;       bit 1=0 - no repeat,  =1 - repeat sequence
 408+ 7B62 ~            ;       bit 2=0 - no page,    =1 - page out memory
 409+ 7B62 ~            ;       bit 3=0 - no flip vrm =1 - flip vram (xor page value with %00001011)
 410+ 7B62 ~            ;       bit 7=0 - addr #5800  =1  #d8 addressing
 411+ 7B62 ~            page:          db     0
 412+ 7B62 ~            addr:          dw     0
 413+ 7B62 ~            ptr:           dw     0
 414+ 7B62 ~            */
 415+ 7B62
 416+ 7B62 00 15 20 03  atrSubFadeIn:     atwin #1500, #20, 3, atrSubFadeIn.dta, %10000000, #55
 416+ 7B66 6E 7B 80 55
 416+ 7B6A 00 00 00 00
 417+ 7B6E 01 01 02 02  .dta:             db    1,1,2,2,3,3,4,4,5,5,6,6,7,7,#47,#47,#46,6,#45,5,5,#ff
 417+ 7B72 03 03 04 04
 417+ 7B76 05 05 06 06
 417+ 7B7A 07 07 47 47
 417+ 7B7E 46 06 45 05
 417+ 7B82 05 FF
 418+ 7B84
 419+ 7B84 00 15 20 03  atrSubFadeOut:    atwin #1500, #20, 3, atrSubFadeOut.dta, %10000000, #55
 419+ 7B88 90 7B 80 55
 419+ 7B8C 00 00 00 00
 420+ 7B90 06 45 05 05  .dta:             db    6,#45,5,5,5,#41,#41,3,2,2,1,1,0,0,#ff
 420+ 7B94 05 41 41 03
 420+ 7B98 02 02 01 01
 420+ 7B9C 00 00 FF
 421+ 7B9F
 422+ 7B9F 00 08 20 08  atrTitFadeIn:     atwin #0800, #20, 8, atrTitFadeIn.dta, %00000000, #55
 422+ 7BA3 AB 7B 00 55
 422+ 7BA7 00 00 00 00
 423+ 7BAB 01 02 03 04  .dta:             db    1,2,3,4,5,6,7,#47,#45,#ff
 423+ 7BAF 05 06 07 47
 423+ 7BB3 45 FF
 424+ 7BB5
 425+ 7BB5 00 08 20 08  atrTitFadeOut:    atwin #0800, #20, 8, atrTitFadeOut.dta, %00000000, #55
 425+ 7BB9 C1 7B 00 55
 425+ 7BBD 00 00 00 00
 426+ 7BC1 47 07 06 05  .dta:             db    #47,7,6,5,4,3,2,3,2,1,2,1,0,1,0,#ff
 426+ 7BC5 04 03 02 03
 426+ 7BC9 02 01 02 01
 426+ 7BCD 00 01 00 FF
 427+ 7BD1
 428+ 7BD1              ;-- Station
 429+ 7BD1              x=4
 430+ 7BD1              y=96 - 18*4
 431+ 7BD1 04 03 04 0A  atrVtxt1:         atwin x+y*32, 4, 10, vtxdta, 0, 0
 431+ 7BD5 F5 7B 00 00
 431+ 7BD9 00 00 00 00
 432+ 7BDD
 433+ 7BDD              x=14
 434+ 7BDD              y=128 - 12*4
 435+ 7BDD 0E 0A 04 08  atrVtxt2:         atwin x+y*32, 4, 8, vtxdta, 0, 0
 435+ 7BE1 F5 7B 00 00
 435+ 7BE5 00 00 00 00
 436+ 7BE9
 437+ 7BE9              x=18
 438+ 7BE9              y=64 - 10*4
 439+ 7BE9 12 03 04 07  atrVtxt3:         atwin x+y*32, 4, 7, vtxdta, 0, 0
 439+ 7BED F5 7B 00 00
 439+ 7BF1 00 00 00 00
 440+ 7BF5 08 10 18 20  vtxdta:           db    8,16,24,32,56,1,48,3,7,4,5,#45,#ff
 440+ 7BF9 38 01 30 03
 440+ 7BFD 07 04 05 45
 440+ 7C01 FF
 441+ 7C02
 442+ 7C02              ;-- earth scene (unused)
 443+ 7C02              x=4
 444+ 7C02              y=96 - 18*4
 445+ 7C02 04 03 04 0A  atrVtxt4:         atwin x+y*32, 4, 10, vtxdtb, 0, 0
 445+ 7C06 1A 7C 00 00
 445+ 7C0A 00 00 00 00
 446+ 7C0E
 447+ 7C0E              x=22
 448+ 7C0E              y=156 - 21*4
 449+ 7C0E 16 09 06 0B  atrVtxt5:         atwin x+y*32, 6, 11, vtxdtb, 0, 0
 449+ 7C12 1A 7C 00 00
 449+ 7C16 00 00 00 00
 450+ 7C1A 2F 0D 03 43  vtxdtb:           db    47,13,3,#43,#ff
 450+ 7C1E FF
 451+ 7C1F
 452+ 7C1F              ;-- solar system
 453+ 7C1F              x=3
 454+ 7C1F              y=152 - 14*4
 455+ 7C1F 03 0C 02 07  atrVtxt6:         atwin x+y*32, 2, 7, vtxdta, 0, 0
 455+ 7C23 F5 7B 00 00
 455+ 7C27 00 00 00 00
 456+ 7C2B
 457+ 7C2B              x=19
 458+ 7C2B              y=144 - 12*4
 459+ 7C2B 13 0C 02 06  atrVtxt7:         atwin x+y*32, 2, 6, vtxdta, 0, 0
 459+ 7C2F F5 7B 00 00
 459+ 7C33 00 00 00 00
 460+ 7C37
 461+ 7C37              x=24
 462+ 7C37              y=96 - 12*4
 463+ 7C37 18 06 04 06  atrVtxt8:         atwin x+y*32, 4, 6, vtxdta, 0, 0
 463+ 7C3B F5 7B 00 00
 463+ 7C3F 00 00 00 00
 464+ 7C43
 465+ 7C43              ;----
 466+ 7C43
 467+ 7C43 00 18 4D 7C  atrVoidscrFI:     clatt #00,#18,atrVoidscrFI.dta,%10001100,#57
 467+ 7C47 8C 57 00 00
 467+ 7C4B 00 00
 468+ 7C4D 00 00 01 01  .dta:             db    0,0,1,1,#41,#41,#45,#45,#46,#46,#47,#47,#80
 468+ 7C51 41 41 45 45
 468+ 7C55 46 46 47 47
 468+ 7C59 80
 469+ 7C5A 00 18 64 7C  atrVoidscrFO:     clatt #00,#18,atrVoidscrFO.dta,%10001100,#57
 469+ 7C5E 8C 57 00 00
 469+ 7C62 00 00
 470+ 7C64 46 06 05 45  .dta:             db    #46,6,5,#45,4,#44,#43,3,2,#42,#41,1,0,1,0,#80
 470+ 7C68 04 44 43 03
 470+ 7C6C 02 42 41 01
 470+ 7C70 00 01 00 80
 471+ 7C74 06 0B 7E 7C  atrVoidtxt:       clatt #06,#0b,atrVoidtxt.dta,%00000000,#55
 471+ 7C78 00 55 00 00
 471+ 7C7C 00 00
 472+ 7C7E 01 00 00 00  .dta:             db    1,0,0,0,#41,0,2,0,0,0,0,3,0,0,0,5,5,5,0,#47,#80
 472+ 7C82 41 00 02 00
 472+ 7C86 00 00 00 03
 472+ 7C8A 00 00 00 05
 472+ 7C8E 05 05 00 47
 472+ 7C92 80
 473+ 7C93
 474+ 7C93              ;---- object specific executables
 475+ 7C93              engineAttrs:                                               ; rotoid | Nostromo landing scene
 476+ 7C93 11 C6 7C     .mod:   ld     de,atrEngine
 477+ 7C96 21 0A 59             ld     hl,#5800+#20*8+#0a
 478+ 7C99 01 13 00             ld     bc,#20-13
 479+ 7C9C DD 2E 02             ld     xl,2
 480+ 7C9F 1A                   ld     a,(de)
 481+ 7CA0 A7                   and    a
 482+ 7CA1 F2 A8 7C             jp     p,1F
 483+ 7CA4 11 C6 7C             ld     de,atrEngine
 484+ 7CA7 1A                   ld     a,(de)
 485+ 7CA8 13           1       inc    de
 486+ 7CA9 ED 53 94 7C          ld     (.mod+1),de
 487+ 7CAD 77           1       ld     (hl),a
 487+ 7CAE 2C             inc l
 487+ 7CAF 77             ld (hl),a
 488+ 7CB0 2C          > inc    l
 488+ 7CB1 2C          > inc    l
 488+ 7CB2 2C          > inc    l
 488+ 7CB3 2C          > inc    l
 488+ 7CB4 2C          > inc    l
 489+ 7CB5 77                   ld     (hl),a
 489+ 7CB6 2C             inc l
 489+ 7CB7 77             ld (hl),a
 490+ 7CB8 2C          > inc    l
 490+ 7CB9 2C          > inc    l
 490+ 7CBA 2C          > inc    l
 490+ 7CBB 2C          > inc    l
 490+ 7CBC 2C          > inc    l
 491+ 7CBD 77                   ld     (hl),a
 491+ 7CBE 2C             inc l
 491+ 7CBF 77             ld (hl),a
 492+ 7CC0 09                   add    hl,bc
 493+ 7CC1 DD 2D                dec    xl
 494+ 7CC3 20 E8                jr     nz,1B
 495+ 7CC5 C9                   ret
 496+ 7CC6
 497+ 7CC6              atrEngine:
 498+ 7CC6              ;        db     #3f,#3f,#3f,#3f
 499+ 7CC6              ;        db     1,2,3,4,5,6,7,5,4,3,2,1,0,0,0,0
 500+ 7CC6 0D 05 47 07          db     8+5,5,#47,7
 501+ 7CCA              ;        db     2,2,3,2,2,3,3,2,2,3,3,2,2,3,3,2
 502+ 7CCA FF                   db     #ff
 503+ 7CCB
 504+ 7CCB                      MODULE rotoid
 505+ 7CCB 62 21 F2 FA  starCity:         dstar    #2162, #faf2, 32, 0, 128, 0 , 255
 505+ 7CCF 20 00 80 00
 505+ 7CD3 FF
 506+ 7CD4 AD 89 39 28  starPlanet:       dstar    #89ad, #2839, 48, 8, 131, 0 , 255
 506+ 7CD8 30 08 83 00
 506+ 7CDC FF
 507+ 7CDD 62 21 F2 FA  starCalpamos:     dstar    #2162, #faf2, 96, 0, #a0, 0 , 255
 507+ 7CE1 60 00 A0 00
 507+ 7CE5 FF
 508+ 7CE6 62 45 F2 1A  starEscape:       dstar    #4562, #1af2, 64, 0, #a0, 0 , 255
 508+ 7CEA 40 00 A0 00
 508+ 7CEE FF
 509+ 7CEF 10 10 AA AA  starCalpis:       dstar    #1010, #aaaa, 48, 0, #a0, 0 , 80
 509+ 7CF3 30 00 A0 00
 509+ 7CF7 50
 510+ 7CF8 91 72 FD 71  starLanding:      dstar    #7291, #71fd, 64, 8, 167, 96, 255
 510+ 7CFC 40 08 A7 60
 510+ 7D00 FF
 511+ 7D01 71 98 77 11  starCalstat:      dstar    #9871, #1177, 64, 8, 170, 0 , #b0
 511+ 7D05 40 08 AA 00
 511+ 7D09 B0
 512+ 7D0A 28 19 D2 AC  starEarth:        dstar    #1928, #acd2, 96, 8, 167, 0 , 255
 512+ 7D0E 60 08 A7 00
 512+ 7D12 FF
 513+ 7D13 CD AB 5A 5A  starHollis:       dstar    #abcd, #5a5a, 96, 0,  80, 0 , 255
 513+ 7D17 60 00 50 00
 513+ 7D1B FF
 514+ 7D1C
 515+ 7D1C              ; dithering matrices
 516+ 7D1C              dthData:
 517+ 7D1C              .v0:                            ; 4x4 ordered
 518+ 7D1C 01 08 02 0A          db     1,8,2,10         ; 1,... modified matrix to have black and white) 0,... standard matrix
 519+ 7D20 0C 04 0E 06          db     12,4,14,6
 520+ 7D24 03 0B 01 09          db     3,11,1,9
 521+ 7D28 0F 07 0D 05          db     15,7,13,5
 522+ 7D2C
 523+ 7D2C              .v1:                            ; 2X2 ordered
 524+ 7D2C 01 0F 01 0F          db     1,15,1,15
 525+ 7D30 07 03 07 03          db     7,3,7,3
 526+ 7D34 01 0F 01 0F          db     1,15,1,15
 527+ 7D38 07 03 07 03          db     7,3,7,3
 528+ 7D3C
 529+ 7D3C 01 02 03 05  .v2:    db     01,02,03,05         ; 1,... modified matrix to have black and white) 0,... standard matrix
 530+ 7D40 02 03 04 07          db     02,03,04,07
 531+ 7D44 03 04 06 08          db     03,04,06,08
 532+ 7D48 09 05 07 09          db     09,05,07,09
 533+ 7D4C
 534+ 7D4C
 535+ 7D4C              ; -------------
 536+ 7D4C              ; cosinus table
 537+ 7D4C              costab:
 538+ 7D4C 7F 7E 7E 7D          db    #7F, #7E, #7E, #7D, #7C, #7B, #79, #77
 538+ 7D50 7C 7B 79 77
 539+ 7D54 75 72 6F 6C          db    #75, #72, #6F, #6C, #69, #65, #61, #5D
 539+ 7D58 69 65 61 5D
 540+ 7D5C 59 54 4F 4A          db    #59, #54, #4F, #4A, #45, #40, #3A, #35
 540+ 7D60 45 40 3A 35
 541+ 7D64 2F 29 23 1D          db    #2F, #29, #23, #1D, #17, #11, #0A, #04
 541+ 7D68 17 11 0A 04
 542+ 7D6C FE F8 F1 EB          db    #FE, #F8, #F1, #EB, #E5, #DF, #D9, #D3
 542+ 7D70 E5 DF D9 D3
 543+ 7D74 CD C7 C2 BC          db    #CD, #C7, #C2, #BC, #B7, #B2, #AD, #A9
 543+ 7D78 B7 B2 AD A9
 544+ 7D7C A4 A0 9C 98          db    #A4, #A0, #9C, #98, #95, #91, #8E, #8C
 544+ 7D80 95 91 8E 8C
 545+ 7D84 89 87 85 84          db    #89, #87, #85, #84, #82, #81, #81, #81
 545+ 7D88 82 81 81 81
 546+ 7D8C
 547+ 7D8C                      ENDMODULE
 548+ 7D8C
# file closed: Q:\Development\Dev-ZX\demo_cats\demo/demo_dat.a80
  92  7D8C              ;        include "demo/demo_txt.a80"
  93  7D8C
  94  7D8C              lowend: equ     $
  95  7D8C                      display "lowend:",lowend
  96  7D8C
  97  7D8C              music:
  98  7D8C                      IFDEF playmusic
  99  7D8C
 100  7D8C 3E 57        .init:  ld      a,#57
 101  7D8E                      page_a
 101  7D8E 32 68 81    >         ld      (@page),a
 101  7D91             >         page_am
 101  7D91 D3 FD       >         out    (#fd),a
 102  7D93              ;        ld      hl,music_space.initaddr
 103  7D93 C3 00 DB             jp      msx.ini
 104  7D96              ;        ret
 105  7D96
 106  7D96 3A 3B BC     .play:  ld      a,(@ivram)
 107  7D99 F6 57                or      #57                        ; msx page
 108  7D9B                      page_am
 108  7D9B D3 FD       >         out    (#fd),a
 109  7D9D                      debug_border 2
 109  7D9D             >        ifdef debug
 109  7D9D ~           >          push af
 109  7D9D ~           >          ld  a,_value
 109  7D9D ~           >          out (#fe),a
 109  7D9D ~           >          pop af
 109  7D9D             >        endif
 110  7D9D CD 05 DB             call    msx.run
 111  7DA0                      debug_border 0
 111  7DA0             >        ifdef debug
 111  7DA0 ~           >          push af
 111  7DA0 ~           >          ld  a,_value
 111  7DA0 ~           >          out (#fe),a
 111  7DA0 ~           >          pop af
 111  7DA0             >        endif
 112  7DA0 C9                   ret
 113  7DA1
 114  7DA1                      ELSE
 115  7DA1 ~            .play:
 116  7DA1 ~            .init:   ret
 117  7DA1                      ENDIF
 118  7DA1
 119  7DA1              ;-------------------------------------------------------------------------------
 120  7DA1              screen:
 121  7DA1
 122  7DA1              .part2:
 123  7DA1 21 BE C4             ld      hl,rotoid.scrplay.part2
 124  7DA4 CD E7 95             call    rotoid.setScene.init
 125  7DA7 C9                   ret
 126  7DA8
 127  7DA8              .blueprint:
 128  7DA8 3E 58                 ld       a,#50+8
 129  7DAA                       page_a
 129  7DAA 32 68 81    >         ld      (@page),a
 129  7DAD             >         page_am
 129  7DAD D3 FD       >         out    (#fd),a
 130  7DAF                       rscUnpack KRscBlueprint, res_tab
 130  7DAF 3E 05       >         ld      a,KRscBlueprint
 130  7DB1 11 57 B0    >         ld      de,res_tab
 130  7DB4 CD F0 77    >         call    rsc.unpack
 131  7DB7                       WaitF  syncid_008                ;Blueprint fade in
 131  7DB7 CD 66 BF    >          call  wait4FrameInStack
 131  7DBA 00 01       >          dw    syncid_008
 132  7DBC CD 13 74              call     egl.atrFadeInFull
 133  7DBF                       callix   egl.attwin.init, atrBP1
 133  7DBF DD 21 D1 87 >         ld      ix,atrBP1
 133  7DC3 CD 65 73    >         call    egl.attwin.init
 134  7DC6                       callix   egl.attwin.init, atrBP2
 134  7DC6 DD 21 DD 87 >         ld      ix,atrBP2
 134  7DCA CD 65 73    >         call    egl.attwin.init
 135  7DCD                       callix   egl.attwin.init, atrBP3
 135  7DCD DD 21 E9 87 >         ld      ix,atrBP3
 135  7DD1 CD 65 73    >         call    egl.attwin.init
 136  7DD4                       callix   egl.attwin.init, atrBP4
 136  7DD4 DD 21 F5 87 >         ld      ix,atrBP4
 136  7DD8 CD 65 73    >         call    egl.attwin.init
 137  7DDB                       callix   egl.attwin.init, atrBP5
 137  7DDB DD 21 01 88 >         ld      ix,atrBP5
 137  7DDF CD 65 73    >         call    egl.attwin.init
 138  7DE2                       callix   egl.attwin.init, atrBP6
 138  7DE2 DD 21 0D 88 >         ld      ix,atrBP6
 138  7DE6 CD 65 73    >         call    egl.attwin.init
 139  7DE9              ;--
 140  7DE9                       WaitF  syncid_010                ;Texline 1
 140  7DE9 CD 66 BF    >          call  wait4FrameInStack
 140  7DEC 20 02       >          dw    syncid_010
 141  7DEE                       callix   rotoid.fillRct, rcrBP1
 141  7DEE DD 21 33 88 >         ld      ix,rcrBP1
 141  7DF2 CD D8 9B    >         call    rotoid.fillRct
 142  7DF5                       callix   egl.attwin.run, atrBP1
 142  7DF5 DD 21 D1 87 >         ld      ix,atrBP1
 142  7DF9 CD D9 72    >         call    egl.attwin.run
 143  7DFC                       rscRunIX KRscFzxIni, res_tab, fzblueprint1
 143  7DFC 3E 0F       >         ld      a,KRscFzxIni
 143  7DFE 11 57 B0    >         ld      de,res_tab
 143  7E01 21 ED 86    >         ld      hl,fzblueprint1
 143  7E04 CD 73 77    >         call    rsc.runhl2ix
 144  7E07              1        rscRunIX KRscFzxRun, res_tab, fzblueprint1
 144  7E07 3E 10       >         ld      a,KRscFzxRun
 144  7E09 11 57 B0    >         ld      de,res_tab
 144  7E0C 21 ED 86    >         ld      hl,fzblueprint1
 144  7E0F CD 73 77    >         call    rsc.runhl2ix
 145  7E12 30 F3                 jr       nc,1B
 146  7E14
 147  7E14 76           1        halt
 148  7E15 D9                    exx
 149  7E16                       callix   egl.attwin.run, atrBP1
 149  7E16 DD 21 D1 87 >         ld      ix,atrBP1
 149  7E1A CD D9 72    >         call    egl.attwin.run
 150  7E1D D9                    exx
 151  7E1E 30 F4                 jr       nc,1B
 152  7E20              ;--
 153  7E20                       WaitF  syncid_018                ;Texline 2
 153  7E20 CD 66 BF    >          call  wait4FrameInStack
 153  7E23 60 02       >          dw    syncid_018
 154  7E25                       callix   rotoid.fillRct, rcrBP2
 154  7E25 DD 21 39 88 >         ld      ix,rcrBP2
 154  7E29 CD D8 9B    >         call    rotoid.fillRct
 155  7E2C                       callix   egl.attwin.run, atrBP2
 155  7E2C DD 21 DD 87 >         ld      ix,atrBP2
 155  7E30 CD D9 72    >         call    egl.attwin.run
 156  7E33                       rscRunIX KRscFzxIni, res_tab, fzblueprint2
 156  7E33 3E 0F       >         ld      a,KRscFzxIni
 156  7E35 11 57 B0    >         ld      de,res_tab
 156  7E38 21 13 87    >         ld      hl,fzblueprint2
 156  7E3B CD 73 77    >         call    rsc.runhl2ix
 157  7E3E              1        rscRunIX KRscFzxRun, res_tab, fzblueprint2
 157  7E3E 3E 10       >         ld      a,KRscFzxRun
 157  7E40 11 57 B0    >         ld      de,res_tab
 157  7E43 21 13 87    >         ld      hl,fzblueprint2
 157  7E46 CD 73 77    >         call    rsc.runhl2ix
 158  7E49 30 F3                 jr       nc,1B
 159  7E4B
 160  7E4B 76           1        halt
 161  7E4C D9                    exx
 162  7E4D                       callix   egl.attwin.run, atrBP2
 162  7E4D DD 21 DD 87 >         ld      ix,atrBP2
 162  7E51 CD D9 72    >         call    egl.attwin.run
 163  7E54 D9                    exx
 164  7E55 30 F4                 jr       nc,1B
 165  7E57              ;--
 166  7E57                       WaitF  syncid_020                ;Texline 3
 166  7E57 CD 66 BF    >          call  wait4FrameInStack
 166  7E5A A0 02       >          dw    syncid_020
 167  7E5C                       callix   rotoid.fillRct, rcrBP3
 167  7E5C DD 21 3F 88 >         ld      ix,rcrBP3
 167  7E60 CD D8 9B    >         call    rotoid.fillRct
 168  7E63                       callix   egl.attwin.run, atrBP3
 168  7E63 DD 21 E9 87 >         ld      ix,atrBP3
 168  7E67 CD D9 72    >         call    egl.attwin.run
 169  7E6A                       rscRunIX KRscFzxIni, res_tab, fzblueprint3
 169  7E6A 3E 0F       >         ld      a,KRscFzxIni
 169  7E6C 11 57 B0    >         ld      de,res_tab
 169  7E6F 21 3B 87    >         ld      hl,fzblueprint3
 169  7E72 CD 73 77    >         call    rsc.runhl2ix
 170  7E75              1        rscRunIX KRscFzxRun, res_tab, fzblueprint3
 170  7E75 3E 10       >         ld      a,KRscFzxRun
 170  7E77 11 57 B0    >         ld      de,res_tab
 170  7E7A 21 3B 87    >         ld      hl,fzblueprint3
 170  7E7D CD 73 77    >         call    rsc.runhl2ix
 171  7E80 30 F3                 jr       nc,1B
 172  7E82
 173  7E82 76           1        halt
 174  7E83 D9                    exx
 175  7E84                       callix   egl.attwin.run, atrBP3
 175  7E84 DD 21 E9 87 >         ld      ix,atrBP3
 175  7E88 CD D9 72    >         call    egl.attwin.run
 176  7E8B D9                    exx
 177  7E8C 30 F4                 jr       nc,1B
 178  7E8E              ;--
 179  7E8E                       WaitF  syncid_028                ;Texline 4
 179  7E8E CD 66 BF    >          call  wait4FrameInStack
 179  7E91 C0 02       >          dw    syncid_028
 180  7E93                       callix   rotoid.fillRct, rcrBP4
 180  7E93 DD 21 45 88 >         ld      ix,rcrBP4
 180  7E97 CD D8 9B    >         call    rotoid.fillRct
 181  7E9A                       callix   egl.attwin.run, atrBP4
 181  7E9A DD 21 F5 87 >         ld      ix,atrBP4
 181  7E9E CD D9 72    >         call    egl.attwin.run
 182  7EA1                       rscRunIX KRscFzxIni, res_tab, fzblueprint4
 182  7EA1 3E 0F       >         ld      a,KRscFzxIni
 182  7EA3 11 57 B0    >         ld      de,res_tab
 182  7EA6 21 60 87    >         ld      hl,fzblueprint4
 182  7EA9 CD 73 77    >         call    rsc.runhl2ix
 183  7EAC              1        rscRunIX KRscFzxRun, res_tab, fzblueprint4
 183  7EAC 3E 10       >         ld      a,KRscFzxRun
 183  7EAE 11 57 B0    >         ld      de,res_tab
 183  7EB1 21 60 87    >         ld      hl,fzblueprint4
 183  7EB4 CD 73 77    >         call    rsc.runhl2ix
 184  7EB7 30 F3                 jr       nc,1B
 185  7EB9
 186  7EB9 76           1        halt
 187  7EBA D9                    exx
 188  7EBB                       callix   egl.attwin.run, atrBP4
 188  7EBB DD 21 F5 87 >         ld      ix,atrBP4
 188  7EBF CD D9 72    >         call    egl.attwin.run
 189  7EC2 D9                    exx
 190  7EC3 30 F4                 jr       nc,1B
 191  7EC5              ;--
 192  7EC5                       WaitF  syncid_030                ;Texline 5
 192  7EC5 CD 66 BF    >          call  wait4FrameInStack
 192  7EC8 D0 02       >          dw    syncid_030
 193  7ECA                       callix   rotoid.fillRct, rcrBP5
 193  7ECA DD 21 4B 88 >         ld      ix,rcrBP5
 193  7ECE CD D8 9B    >         call    rotoid.fillRct
 194  7ED1                       callix   egl.attwin.run, atrBP5
 194  7ED1 DD 21 01 88 >         ld      ix,atrBP5
 194  7ED5 CD D9 72    >         call    egl.attwin.run
 195  7ED8                       rscRunIX KRscFzxIni, res_tab, fzblueprint5
 195  7ED8 3E 0F       >         ld      a,KRscFzxIni
 195  7EDA 11 57 B0    >         ld      de,res_tab
 195  7EDD 21 86 87    >         ld      hl,fzblueprint5
 195  7EE0 CD 73 77    >         call    rsc.runhl2ix
 196  7EE3              1        rscRunIX KRscFzxRun, res_tab, fzblueprint5
 196  7EE3 3E 10       >         ld      a,KRscFzxRun
 196  7EE5 11 57 B0    >         ld      de,res_tab
 196  7EE8 21 86 87    >         ld      hl,fzblueprint5
 196  7EEB CD 73 77    >         call    rsc.runhl2ix
 197  7EEE 30 F3                 jr       nc,1B
 198  7EF0
 199  7EF0 76           1        halt
 200  7EF1 D9                    exx
 201  7EF2                       callix   egl.attwin.run, atrBP5
 201  7EF2 DD 21 01 88 >         ld      ix,atrBP5
 201  7EF6 CD D9 72    >         call    egl.attwin.run
 202  7EF9 D9                    exx
 203  7EFA 30 F4                 jr       nc,1B
 204  7EFC              ;--
 205  7EFC                       WaitF  syncid_038                ;Texline 6
 205  7EFC CD 66 BF    >          call  wait4FrameInStack
 205  7EFF E0 02       >          dw    syncid_038
 206  7F01                       callix   rotoid.fillRct, rcrBP6
 206  7F01 DD 21 51 88 >         ld      ix,rcrBP6
 206  7F05 CD D8 9B    >         call    rotoid.fillRct
 207  7F08                       callix   egl.attwin.run, atrBP6
 207  7F08 DD 21 0D 88 >         ld      ix,atrBP6
 207  7F0C CD D9 72    >         call    egl.attwin.run
 208  7F0F                       rscRunIX KRscFzxIni, res_tab, fzblueprint6
 208  7F0F 3E 0F       >         ld      a,KRscFzxIni
 208  7F11 11 57 B0    >         ld      de,res_tab
 208  7F14 21 A9 87    >         ld      hl,fzblueprint6
 208  7F17 CD 73 77    >         call    rsc.runhl2ix
 209  7F1A              1        rscRunIX KRscFzxRun, res_tab, fzblueprint6
 209  7F1A 3E 10       >         ld      a,KRscFzxRun
 209  7F1C 11 57 B0    >         ld      de,res_tab
 209  7F1F 21 A9 87    >         ld      hl,fzblueprint6
 209  7F22 CD 73 77    >         call    rsc.runhl2ix
 210  7F25 30 F3                 jr       nc,1B
 211  7F27
 212  7F27 76           1        halt
 213  7F28 D9                    exx
 214  7F29                       callix   egl.attwin.run, atrBP6
 214  7F29 DD 21 0D 88 >         ld      ix,atrBP6
 214  7F2D CD D9 72    >         call    egl.attwin.run
 215  7F30 D9                    exx
 216  7F31 30 F4                 jr       nc,1B
 217  7F33
 218  7F33                       WaitF    syncid_040                ;fadeout
 218  7F33 CD 66 BF    >          call  wait4FrameInStack
 218  7F36 A0 03       >          dw    syncid_040
 219  7F38
 220  7F38                       callix   egl.attwin.init, atrBP6h
 220  7F38 DD 21 19 88 >         ld      ix,atrBP6h
 220  7F3C CD 65 73    >         call    egl.attwin.init
 221  7F3F
 222  7F3F 06 32                 ld       b,50
 223  7F41 D9           1        exx
 224  7F42 76                    halt
 225  7F43 3A 00 58              ld       a,(#5800)
 226  7F46 0F          > rrca
 226  7F47 0F          > rrca
 226  7F48 0F          > rrca
 227  7F49 E6 07                 and      #7
 228  7F4B D3 FE                 out      (#fe),a
 229  7F4D                       callix   egl.atrFade, #5800
 229  7F4D DD 21 00 58 >         ld      ix,#5800
 229  7F51 CD F7 73    >         call    egl.atrFade
 230  7F54                       callix   egl.attwin.run, atrBP6h
 230  7F54 DD 21 19 88 >         ld      ix,atrBP6h
 230  7F58 CD D9 72    >         call    egl.attwin.run
 231  7F5B D9                    exx
 232  7F5C 10 E3                 djnz     1B
 233  7F5E                       callix   mmu.clsix, #00
 233  7F5E DD 21 00 00 >         ld      ix,#00
 233  7F62 CD 43 6C    >         call    mmu.clsix
 234  7F65 C9                    ret
 235  7F66
 236  7F66              .texthighlight:
 237  7F66                       ;hl-address
 238  7F66                       ;b-width, c-height
 239  7F66                       ;a-color
 240  7F66 11 20 00              ld       de,#20
 241  7F69 C5           .l2:     push     bc
 242  7F6A 4D                    ld       c,l
 243  7F6B 77           .l1:     ld       (hl),a
 244  7F6C 2C                    inc      l
 245  7F6D 10 FC                 djnz     .l1
 246  7F6F 69                    ld       l,c
 247  7F70 C1                    pop      bc
 248  7F71 19                    add      hl,de
 249  7F72 0D                    dec      c
 250  7F73 20 F4                 jr       nz,.l2
 251  7F75 C9                    ret
 252  7F76
 253  7F76              .endtitles:
 254  7F76              ;         rscUnpack KRscTitles, res_tab
 255  7F76 CD CC 73              call      egl.atrFadeFull
 256  7F79                       rscLoad   KRscTitles, res_tab
 256  7F79 3E 02       >         ld      a,KRscTitles
 256  7F7B 11 57 B0    >         ld      de,res_tab
 256  7F7E CD CA 77    >         call    rsc.load
 257  7F81                       mmucpy    temp3k, fzTitles2,#400*3,#51,#51                               ; reserve, text has 2431
 257  7F81 21 00 5B    >          ld      hl,temp3k
 257  7F84 11 B7 CB    >          ld      de,fzTitles2
 257  7F87 01 00 0C    >          ld      bc,#400*3
 257  7F8A DD 2E 51    >          ld      xl,#51
 257  7F8D DD 26 51    >          ld      xh,#51
 257  7F90 CD AE 6C    >          call    mmu.copy
 258  7F93
 259  7F93                       HoldVramAfterInterrupt
 259  7F93 3E F7       >          ld    a,#f7
 259  7F95 32 39 BC    >          ld    (@imask),a
 259  7F98 AF          >          xor   a
 259  7F99 32 3B BC    >          ld    (@ivram),a
 260  7F9C CD E1 82              call      vscroll.init
 261  7F9F
 262  7F9F 21 DC 80              ld        hl,exe_titles
 263  7FA2 CD E3 BE              call      execmd.init
 264  7FA5                       rscRunIX KRscFzxIni, res_tab, fzTitles1
 264  7FA5 3E 0F       >         ld      a,KRscFzxIni
 264  7FA7 11 57 B0    >         ld      de,res_tab
 264  7FAA 21 A9 CB    >         ld      hl,fzTitles1
 264  7FAD CD 73 77    >         call    rsc.runhl2ix
 265  7FB0
 266  7FB0 76           1        halt
 267  7FB1                       rscRunIX KRscFzxRun, res_tab, fzTitles1
 267  7FB1 3E 10       >         ld      a,KRscFzxRun
 267  7FB3 11 57 B0    >         ld      de,res_tab
 267  7FB6 21 A9 CB    >         ld      hl,fzTitles1
 267  7FB9 CD 73 77    >         call    rsc.runhl2ix
 268  7FBC F8                    ret       m
 269  7FBD 30 F1                 jr        nc,1B
 270  7FBF 3A 1F 82     2        ld        a,(vscroll.toggle)
 271  7FC2 A7                    and       a
 272  7FC3 28 FA                 jr        z,2B
 273  7FC5 AF                    xor       a
 274  7FC6 32 1F 82              ld        (vscroll.toggle),a
 275  7FC9 76                    halt
 276  7FCA CD B3 82              call      vscroll.clearline
 277  7FCD 18 E1                 jr        1B
 278  7FCF
 279  7FCF              .outline:
 280  7FCF 3A 68 81              ld        a,(@page)
 281  7FD2 F5                    push      af
 282  7FD3 3E 57                 ld        a,#57
 283  7FD5                       page_c
 283  7FD5 CD 5A BF    >         call   @apage
 284  7FD8 3E B1                 ld        a,KScrollOr
 285  7FDA CD A4 76              call      egl.copyRight
 286  7FDD 3E B1                 ld        a,KScrollOr
 287  7FDF CD CE 76              call      egl.copyLeft
 288  7FE2 3E B6                 ld        a,  #b6
 289  7FE4 21 00 41              ld        hl,#4100
 290  7FE7 11 00 C0              ld        de,#c000
 291  7FEA CD FE 76              call      egl.copyFunc.HLDE
 292  7FED 3E B6                 ld        a,  #b6
 293  7FEF 21 00 40              ld        hl,#4000
 294  7FF2 11 00 C1              ld        de,#c100
 295  7FF5 CD FE 76              call      egl.copyFunc.HLDE
 296  7FF8 3E B6        .lf:     ld        a,  #b6
 297  7FFA 21 00 40              ld        hl,#4000
 298  7FFD 11 00 C0              ld        de,#c000
 299  8000 CD FE 76              call      egl.copyFunc.HLDE
 300  8003 F1                    pop       af
 301  8004                       page_c
 301  8004 CD 5A BF    >         call   @apage
 302  8007 C9                    ret
 303  8008
 304  8008
 305  8008              ;-------------------------------------------------------------------------------
 306  8008              segment_editor_init:
 307  8008                      IFDEF seg_ed
 308  8008 ~                    callix editor.init, segment_ed
 309  8008 ~                    ld     a,_anda
 310  8008 ~                    ld     (rotoid.run.scene),a
 311  8008                      ENDIF
 312  8008 C9                   ret
 313  8009              ;-------------------------------------------------------------------------------
 314  8009              scene_editor_init:
 315  8009                      IFDEF sce_ed
 316  8009 ~                    callix editor.init, scene_ed
 317  8009 ~                    ld     a,_anda
 318  8009 ~                    ld     (rotoid.run.scene),a
 319  8009                      ENDIF
 320  8009 C9                   ret
 321  800A
 322  800A              ;-------------------------------------------------------------------------------
 323  800A              delayix:
 324  800A DD 4D                ld      c,xl
 325  800C DD 44                ld      b,xh
 326  800E                      include "libs/delay.a80"          ; Tdelay: wait bc T-cycles (including call; bc>=141)
# file opened: Q:\Development\Dev-ZX\demo_cats\libs/delay.a80
   1+ 800E              ; Z80 delay routine
   2+ 800E              ; by Jan Bobrowski, license GPL
   3+ 800E              ; wait bc T (including call; bc>=141)
   4+ 800E              ; destroys: af, bc, hl
   5+ 800E              Tdelay:
   6+ 800E 21 73 FF     DELAY:  ld      hl,-141
   7+ 8011 09                   add     hl,bc
   8+ 8012 01 E9 FF             ld      bc,-23
   9+ 8015 09           .loop   add     hl,bc
  10+ 8016 38 FD                jr      c,.loop
  11+ 8018 7D                   ld      a,l
  12+ 8019 C6 0F                add     a,15
  13+ 801B 30 06                jr      nc,.g0
  14+ 801D FE 08                cp      8
  15+ 801F 38 03                jr      c,.g1
  16+ 8021 F6 00                or      0
  17+ 8023 23           .g0     inc     hl
  18+ 8024 1F           .g1     rra
  19+ 8025 38 01                jr      c,.b0
  20+ 8027 00                   nop
  21+ 8028 1F           .b0     rra
  22+ 8029 30 02                jr      nc,.b1
  23+ 802B F6 00                or      0
  24+ 802D 1F           .b1     rra
  25+ 802E D0                   ret     nc
  26+ 802F C9                   ret
  27+ 8030
# file closed: Q:\Development\Dev-ZX\demo_cats\libs/delay.a80
 327  8030
 328  8030              ;-------------------------------------------------------------------------------
 329  8030              ; endtitles code to unpack bitmap
 330  8030              unpackHdi:
 331  8030 C5                   push   bc
 332  8031 79                   ld     a,c
 333  8032 32 80 80             ld     (pdrwHdi.posx),a
 334  8035 AF                   xor    a                ; lock drawing of bitmap  (egl.drawLineHdi)
 335  8036 32 82 80             ld     (isUnpackedHdi),a
 336  8039 32 81 80             ld     (pdrwHdi.cury),a
 337  803C
 338  803C 4F                   ld     c,a              ; x=0
 339  803D 06 A3                ld     b,56*3-5         ; pos y
 340  803F CD 95 6D             call   PixCY2Adr
 340  8042
 341  8042 22 7B 80             ld     (pdrwHdi.vram),hl
 342  8045
 343  8045 C1                   pop    bc
 344  8046 78                   ld     a,b              ; b=rsc
 345  8047 11 57 B0             ld     de,res_tab       ; a=resource number, de=resource table
 346  804A CD 4D 78             call   rsc.getptr       ; ix=resource table pointer
 347  804D 11 00 5B             ld     de,temp3k        ; de=destination
 348  8050 CD F9 77             call   rsc.unpack.dest  ; force destination of decompression
 349  8053
 350  8053 3E 01                ld     a,1              ; unlock drawing of bitmap
 351  8055 32 82 80             ld     (@isUnpackedHdi),a
 352  8058 C9                   ret
 353  8059              invHDI:
 354  8059 21 00 5B             ld     hl,temp3k
 355  805C C3 8C AC             jp     rotoid.invMobHDI.headless
 356  805F              ;-----------------------------------------------------
 357  805F              pokeVram:
 358  805F 3A 21 95                 ld     a,(rotoid.run.vpage+1)
 359  8062                          page_am
 359  8062 D3 FD       >         out    (#fd),a
 360  8064 CD 39 6B                 call   poke
 361  8067 3A 68 81                 ld     a,(page)
 362  806A                          page_am
 362  806A D3 FD       >         out    (#fd),a
 363  806C C9                       ret
 364  806D
 365  806D              pokeWVram:
 366  806D 3A 21 95                 ld     a,(rotoid.run.vpage+1)
 367  8070                          page_am
 367  8070 D3 FD       >         out    (#fd),a
 368  8072 CD 44 6B                 call   pokew
 369  8075 3A 68 81                 ld     a,(page)
 370  8078                          page_am
 370  8078 D3 FD       >         out    (#fd),a
 371  807A C9                       ret
 372  807B
 373  807B              ;-----------------------------------------------------
 374  807B              pdrwHdi:
 375  807B 00 40        .vram:      dw     #4000
 376  807D 00 5B        .pgfx:      dw     temp3k
 377  807F 81           .mode:      db     #81              ; 0=blit, 1=or, 2=xor
 378  8080 00           .posx:      db     0                ; x-offset (can be negative and over #1f)
 379  8081 00           .cury:      db     0
 380  8082 00           isUnpackedHdi: db  0                ; variable for end titles. 0=bitmap NOT ready
 381  8083              ;-----------------------------------------------------
 382  8083
 383  8083              ; poke definitions
 384  8083 95 BC        infinite_frm:    dw  ExeFrames
 384  8085 FF             db #ff
 385  8086 65 81        reset_frames:    dw  frames
 385  8088 00 00          dw #0000
 386  808A 3B BC        set_vram0:       dw  ivram
 386  808C 00             db 0
 387  808D 3B BC        set_vram1:       dw  ivram
 387  808F 08             db 8
 388  8090              ; launchpad blink
 389  8090 68 D8        set_led6:        dw  #d868
 389  8092 2E             db 46
 390  8093 68 D8        set_led2:        dw  #d868
 390  8095 29             db 41
 391  8096
 392  8096              ; list of calls executed after kernel initialization prior interrupt is enabled
 393  8096              ; format        dw pc,ix       load ix, call pc
 394  8096              ;               dw 0           end of table, ret
 395  8096              exp:
 396  8096              .main:
 397  8096 FF 6F 00 00          dw  setup,       0
 398  809A 8C 7D 00 00          dw  music.init,  0
 399  809E              ; end of the list
 400  809E 00 00                dw  0
 401  80A0
 402  80A0              ; list of calls that are executed every interrupt
 403  80A0              exl:
 404  80A0              .blank:
 405  80A0 00 00                dw      0
 406  80A2              .interrupt:
 407  80A2 96 7D                dw      music.play
 408  80A4 00 00                dw      0
 409  80A6
 410  80A6              ; executor language list
 411  80A6              exe:
 412  80A6              .demo:
 413  80A6                     Config
 413  80A6             >        FrameStart  1,0
 413  80A6 01 00 00 00 >         dw 1, 0
 413  80AA 08          >        db                8
 414  80AB              ;        HaltDisable
 415  80AB                      HaltEnable
 415  80AB             >        PatchByte mainloop.hlt,   118
 415  80AB 02          >        db    2
 415  80AC 6C BC       >        dw    mainloop.hlt
 415  80AE 76          >        db    118
 416  80AF                      AsyncEnable
 416  80AF             >        PatchByte mainloop.mod ,   #a7
 416  80AF 02          >        db    2
 416  80B0 54 BC       >        dw    mainloop.mod
 416  80B2 A7          >        db    #a7
 416  80B3             >        PatchByte imrut.mod+1  ,   #a7
 416  80B3 02          >        db    2
 416  80B4 2D BC       >        dw    imrut.mod+1
 416  80B6 A7          >        db    #a7
 417  80B7                      AsyncCall  dummy
 417  80B7             >        PatchWord mainloop.int+1 ,dummy
 417  80B7 01          >        db    1
 417  80B8 61 BC       >        dw    mainloop.int+1
 417  80BA 0E BF       >        dw    dummy
 418  80BC                     EndC
 418  80BC 00          >        db    0
 419  80BD
 420  80BD ~            /*
 421  80BD ~                   Frame #100,0
 422  80BD ~                     ExeRun   egl.border,#0107
 423  80BD ~                     ExeRun   egl.border,#0003
 424  80BD ~                   EndF
 425  80BD ~                   Restart
 426  80BD ~
 427  80BD ~                   IFDEF  vfadeTest
 428  80BD ~                     Frame #ffff,0
 429  80BD ~            ;          ExeRun  vfade.run1,   vfade.data
 430  80BD ~                      ExeRun  vfade.run2, 0
 431  80BD ~            ;          ExeRun  vfade.seqRun, vfade.sqTest
 432  80BD ~                     EndF
 433  80BD ~                     Idle
 434  80BD ~                   ENDIF
 435  80BD ~            */
 436  80BD
 437  80BD                     MCall rotoid.init
 437  80BD             >         FrameStart      #ffff,rotoid.init         ; set length of frame
 437  80BD FF FF A5 94 >         dw #ffff, rotoid.init
 437  80C1             >         ExeRun          mcall.ret, 1       ; when routine at ADDR is completed, 1 overwrites #ffff and sequence ends.
 437  80C1 01          >        db              1                ; executor command number
 437  80C2 7F BC 01 00 >        dw     mcall.ret,1
 437  80C6             >         FrameEnd
 437  80C6 00          >         db     0                ; executor command number
 438  80C7
 439  80C7                     Config
 439  80C7             >        FrameStart  1,0
 439  80C7 01 00 00 00 >         dw 1, 0
 439  80CB 08          >        db                8
 440  80CC                      AsyncCall  rotoid.run
 440  80CC             >        PatchWord mainloop.int+1 ,rotoid.run
 440  80CC 01          >        db    1
 440  80CD 61 BC       >        dw    mainloop.int+1
 440  80CF 20 95       >        dw    rotoid.run
 441  80D1                     EndC
 441  80D1 00          >        db    0
 442  80D2
 443  80D2                     IFUSED sce_ed
 444  80D2 ~                     MCall scene_editor_init
 445  80D2 ~
 446  80D2 ~                     Frame #ffff,0
 447  80D2 ~                       ExeRun      poke, infinite_frm
 448  80D2 ~                       ExeSwapPC   editor.run, dummy, scene_ed, 1,4,1
 449  80D2 ~                     EndF
 450  80D2                     ENDIF
 451  80D2
 452  80D2                     IFUSED seg_ed
 453  80D2 ~                     MCall segment_editor_init
 454  80D2 ~
 455  80D2 ~            ;         Frame 1,0
 456  80D2 ~            ;           ExeRun  editor.init, segment_ed
 457  80D2 ~            ;           ExeRun  rotoid.setScene, rotoid.scenes.edit
 458  80D2 ~            ;         EndF
 459  80D2 ~
 460  80D2 ~                     Frame #ffff, 0
 461  80D2 ~                       ExeRun      poke, infinite_frm
 462  80D2 ~                       ExeSwapPC   editor.run, dummy, segment_ed, 1,4,1
 463  80D2 ~                     EndF
 464  80D2                     ENDIF
 465  80D2
 466  80D2                     Wait #ffff
 466  80D2             >        FrameStart      #ffff,0
 466  80D2 FF FF 00 00 >         dw #ffff, 0
 466  80D6             >        ExeRun          dummy,0
 466  80D6 01          >        db              1                ; executor command number
 466  80D7 0E BF 00 00 >        dw     dummy,0
 466  80DB             >        FrameEnd
 466  80DB 00          >         db     0                ; executor command number
 467  80DC
 468  80DC              ;=============== ENDTITLES =========================
 469  80DC              exe_titles:
 470  80DC                     Frame #ffff,0
 470  80DC             >          FrameStart #ffff,0
 470  80DC FF FF 00 00 >         dw #ffff, 0
 471  80E0              ;        ExeRun     egl.border,#0101
 472  80E0                      ExeRun     vscroll.run, 0                              ; vertical scroller
 472  80E0 01          >        db              1                ; executor command number
 472  80E1 2A 82 00 00 >        dw     vscroll.run,0
 473  80E5              ;        ExeSwapPC  vscroll.stars, dummy,         0, 1,11,0     ; draw stars - (sum shall be divisible by 6 (6 = move of screen by 2 pix))
 474  80E5                      ExeSwapPC  egl.drawLineHdi, dummy, pdrwHdi, 1, 5,0      ; draw bitmap gfx
 474  80E5             >          ExeLoop egl.drawLineHdi,dummy,pdrwHdi,1,5,0
 474  80E5 02          >        db              2
 474  80E6 01 05 00 01 >        db      1,5,0,1
 474  80EA 0E BF CF 74 >        dw      dummy,egl.drawLineHdi,pdrwHdi
 474  80EE 7B 80       >
 475  80F0              ;        ExeRun     egl.border,#0100
 476  80F0                     EndAtFrame  syncid_061
 476  80F0             >          ExeAt mcall.saveFrames, 1, syncid_061
 476  80F0 05          >        db                5
 476  80F1 96 19 85 BC >        dw      syncid_061,mcall.saveFrames,1
 476  80F5 01 00       >
 476  80F7             >          FrameEnd
 476  80F7 00          >         db     0                ; executor command number
 477  80F8
 478  80F8              ;       Frame #100,0
 479  80F8              ;        ExeRun     egl.border,#2005
 480  80F8              ;        ExeRun     egl.border,#2000
 481  80F8              ;       EndF
 482  80F8                     Idle
 482  80F8 00 00 01 00 >        dw     0,1
 483  80FC              ;--
 484  80FC                     Wait        #80
 484  80FC             >        FrameStart      #80,0
 484  80FC 80 00 00 00 >         dw #80, 0
 484  8100             >        ExeRun          dummy,0
 484  8100 01          >        db              1                ; executor command number
 484  8101 0E BF 00 00 >        dw     dummy,0
 484  8105             >        FrameEnd
 484  8105 00          >         db     0                ; executor command number
 485  8106                     Frame       #20,0
 485  8106             >          FrameStart #20,0
 485  8106 20 00 00 00 >         dw #20, 0
 486  810A                      ExeRun     poke, set_vram0
 486  810A 01          >        db              1                ; executor command number
 486  810B 39 6B 8A 80 >        dw     poke,set_vram0
 487  810F                      ExeRun     egl.clearatr,scr_intro.clout
 487  810F 01          >        db              1                ; executor command number
 487  8110 0B 72 44 7A >        dw     egl.clearatr,scr_intro.clout
 488  8114                     EndF
 488  8114             >          FrameEnd
 488  8114 00          >         db     0                ; executor command number
 489  8115                     Idle
 489  8115 00 00 01 00 >        dw     0,1
 490  8119              ;================================================
 491  8119              exe_launchpad:
 492  8119                     WaitUntil   syncid_04a
 492  8119             >        FrameStart       $ffff,0
 492  8119 FF FF 00 00 >         dw $ffff, 0
 492  811D             >         ExeAfter        execmd.service, .jumpHere,syncid_04a
 492  811D 07          >        db             7
 492  811E 4C 04 FD BE >        dw      syncid_04a,execmd.service,.jumpHere
 492  8122 25 81       >
 492  8124             >        EndF
 492  8124             >          FrameEnd
 492  8124 00          >         db     0                ; executor command number
 492  8125             >.jumpHere:
 493  8125                     Frame 480,0                                              ; divisable by sum of framecounts in exeswap
 493  8125             >          FrameStart 480,0
 493  8125 E0 01 00 00 >         dw 480, 0
 494  8129                      ExeSwapIX  pokeVram, set_led6, set_led2, 30, 10, 0
 494  8129             >          ExeSwap pokeVram,set_led6,set_led2,30,10,0
 494  8129 04          >        db              4
 494  812A 1E 0A 00 01 >        db      30,10,0,1
 494  812E 5F 80 90 80 >        dw      pokeVram,set_led6,set_led2
 494  8132 93 80       >
 495  8134                     EndF
 495  8134             >          FrameEnd
 495  8134 00          >         db     0                ; executor command number
 496  8135              ;       EndAtFrame  syncid_049
 497  8135                     Idle
 497  8135 00 00 01 00 >        dw     0,1
 498  8139              ;================================================
 499  8139
 500  8139              rtDummy:
 501  8139                     Wait #ffff
 501  8139             >        FrameStart      #ffff,0
 501  8139 FF FF 00 00 >         dw #ffff, 0
 501  813D             >        ExeRun          dummy,0
 501  813D 01          >        db              1                ; executor command number
 501  813E 0E BF 00 00 >        dw     dummy,0
 501  8142             >        FrameEnd
 501  8142 00          >         db     0                ; executor command number
 502  8143
 503  8143
 504  8143              rtFlash:
 505  8143                     WaitUntil   #f0f0                         ; syncid_10E
 505  8143             >        FrameStart       $ffff,0
 505  8143 FF FF 00 00 >         dw $ffff, 0
 505  8147             >         ExeAfter        execmd.service, .jumpHere,#f0f0
 505  8147 07          >        db             7
 505  8148 F0 F0 FD BE >        dw      #f0f0,execmd.service,.jumpHere
 505  814C 4F 81       >
 505  814E             >        EndF
 505  814E             >          FrameEnd
 505  814E 00          >         db     0                ; executor command number
 505  814F             >.jumpHere:
 506  814F              .now:  Frame #100,0
 506  814F             >          FrameStart #100,0
 506  814F 00 01 00 00 >         dw #100, 0
 507  8153                      ExeSwapPC  egl.clearatr.init, egl.clearatr.run2, atrScrFlash, 1,#1f,1
 507  8153             >          ExeLoop egl.clearatr.init,egl.clearatr.run2,atrScrFlash,1,#1f,1
 507  8153 02          >        db              2
 507  8154 01 1F 01 01 >        db      1,#1f,1,1
 507  8158 AF 72 8A 72 >        dw      egl.clearatr.run2,egl.clearatr.init,atrScrFlash
 507  815C 9D 7A       >
 508  815E                     EndF
 508  815E             >          FrameEnd
 508  815E 00          >         db     0                ; executor command number
 509  815F                     Idle
 509  815F 00 00 01 00 >        dw     0,1
 510  8163
 511  8163
 512  8163              .atFrame:   = rtFlash + 5               ; wait when FRAMES=atFrame
 513  8163              .rtLength:  = rtFlash + 12              ; duration of flash effect (when one blink is required then gap shall be the same +1)
 514  8163              .fPulse:    = rtFlash + 17              ; shall be 1
 515  8163              .fGap:      = rtFlash + 18              ; duration of one blink (can be longer, when short then it repeats)
 516  8163              .fState:    = rtFlash + 19              ; shall be 1
 517  8163
 518  8163              ;-------------------------------------------------------------------------------
 519  8163 00           machine:  db     0
 520  8164 00           .cpu:     db     0
 521  8165 00 00        frames:   dw     0
 522  8167 00           fps:      db     0
 523  8168 00           page:     db     0
 524  8169 00 00        memReads: dw     0                ; speed of bank1
 525  816B              dbg:
 526  816B 00           .border:  db     0
 527  816C              ;-------------------------------------------------------------------------------
 528  816C 00 00 00...  regsp:    ds     #40
 529  81AC 00 00 00...  stackInt: ds     #40
 530  81EC              stackStart:
 531  81EC              ;-------------------------------------------------------------------------------
 532  81EC
 533  81EC                      include "demo/vscroll/vscroll.a80"
# file opened: Q:\Development\Dev-ZX\demo_cats\demo/vscroll/vscroll.a80
   1+ 81EC                          MODULE vscroll
   2+ 81EC              width:  = 32
   3+ 81EC              height: = 56
   4+ 81EC              cpos:   = (32-width)>>1     ; constant starting x pos
   5+ 81EC              ypos:   = 8                 ; constant starting y pos
   6+ 81EC              ; print/copy line height
   7+ 81EC              line:   = 16
   8+ 81EC              ; line gap
   9+ 81EC              lgap:   = line+0
  10+ 81EC
  11+ 81EC              ; scroll split table
  12+ 81EC              tabvscroll:
  13+ 81EC              ;vram 0
  14+ 81EC 5D                       db     #55+8                                    ; page
  15+ 81ED 38                       db     height
  16+ 81EE                          dw1_CY cpos,ypos-1                             ; destination
  16+ 81EE             >        ad_XY cpos<<3,ypos-1
  16+ 81EE             >ad      = (ypos-1 and %00000111) * 256 + (ypos-1 and %11000000) * 32 + (ypos-1 and %00111000) * 4 + (cpos<<3>>3)
  16+ 81EE 00 C7       >        dw    ad+#c000
  17+ 81F0                          dw1_CY cpos,ypos+0                             ; source
  17+ 81F0             >        ad_XY cpos<<3,ypos+0
  17+ 81F0             >ad      = (ypos+0 and %00000111) * 256 + (ypos+0 and %11000000) * 32 + (ypos+0 and %00111000) * 4 + (cpos<<3>>3)
  17+ 81F0 20 C0       >        dw    ad+#c000
  18+ 81F2
  19+ 81F2 5D                       db     #55+8
  20+ 81F3 38                       db     height
  21+ 81F4                          dw1_CY cpos,ypos-1 + height
  21+ 81F4             >        ad_XY cpos<<3,ypos-1 + height
  21+ 81F4             >ad      = (ypos-1 + height and %00000111) * 256 + (ypos-1 + height and %11000000) * 32 + (ypos-1 + height and %00111000) * 4 + (cpos<<3>>3)
  21+ 81F4 E0 C7       >        dw    ad+#c000
  22+ 81F6                          dw1_CY cpos,ypos+0 + height
  22+ 81F6             >        ad_XY cpos<<3,ypos+0 + height
  22+ 81F6             >ad      = (ypos+0 + height and %00000111) * 256 + (ypos+0 + height and %11000000) * 32 + (ypos+0 + height and %00111000) * 4 + (cpos<<3>>3)
  22+ 81F6 00 C8       >        dw    ad+#c000
  23+ 81F8
  24+ 81F8 5D                       db     #55+8
  25+ 81F9 38                       db     height
  26+ 81FA                          dw1_CY cpos,ypos-1 + height*2
  26+ 81FA             >        ad_XY cpos<<3,ypos-1 + height*2
  26+ 81FA             >ad      = (ypos-1 + height*2 and %00000111) * 256 + (ypos-1 + height*2 and %11000000) * 32 + (ypos-1 + height*2 and %00111000) * 4 + (cpos<<3>>3)
  26+ 81FA C0 CF       >        dw    ad+#c000
  27+ 81FC                          dw1_CY cpos,ypos+0 + height*2
  27+ 81FC             >        ad_XY cpos<<3,ypos+0 + height*2
  27+ 81FC             >ad      = (ypos+0 + height*2 and %00000111) * 256 + (ypos+0 + height*2 and %11000000) * 32 + (ypos+0 + height*2 and %00111000) * 4 + (cpos<<3>>3)
  27+ 81FC E0 C8       >        dw    ad+#c000
  28+ 81FE
  29+ 81FE              ;vram 1
  30+ 81FE 57                       db     #57
  31+ 81FF 38                       db     height
  32+ 8200                          dw1_CY cpos,ypos
  32+ 8200             >        ad_XY cpos<<3,ypos
  32+ 8200             >ad      = (ypos and %00000111) * 256 + (ypos and %11000000) * 32 + (ypos and %00111000) * 4 + (cpos<<3>>3)
  32+ 8200 20 C0       >        dw    ad+#c000
  33+ 8202                          dw1_CY cpos,ypos+1
  33+ 8202             >        ad_XY cpos<<3,ypos+1
  33+ 8202             >ad      = (ypos+1 and %00000111) * 256 + (ypos+1 and %11000000) * 32 + (ypos+1 and %00111000) * 4 + (cpos<<3>>3)
  33+ 8202 20 C1       >        dw    ad+#c000
  34+ 8204
  35+ 8204 57                       db     #57
  36+ 8205 38                       db     height
  37+ 8206                          dw1_CY cpos,ypos-0 + height
  37+ 8206             >        ad_XY cpos<<3,ypos-0 + height
  37+ 8206             >ad      = (ypos-0 + height and %00000111) * 256 + (ypos-0 + height and %11000000) * 32 + (ypos-0 + height and %00111000) * 4 + (cpos<<3>>3)
  37+ 8206 00 C8       >        dw    ad+#c000
  38+ 8208                          dw1_CY cpos,ypos+1 + height
  38+ 8208             >        ad_XY cpos<<3,ypos+1 + height
  38+ 8208             >ad      = (ypos+1 + height and %00000111) * 256 + (ypos+1 + height and %11000000) * 32 + (ypos+1 + height and %00111000) * 4 + (cpos<<3>>3)
  38+ 8208 00 C9       >        dw    ad+#c000
  39+ 820A
  40+ 820A 57                       db     #57
  41+ 820B 38                       db     height
  42+ 820C                          dw1_CY cpos,ypos-0 + height*2
  42+ 820C             >        ad_XY cpos<<3,ypos-0 + height*2
  42+ 820C             >ad      = (ypos-0 + height*2 and %00000111) * 256 + (ypos-0 + height*2 and %11000000) * 32 + (ypos-0 + height*2 and %00111000) * 4 + (cpos<<3>>3)
  42+ 820C E0 C8       >        dw    ad+#c000
  43+ 820E                          dw1_CY cpos,ypos+1 + height*2
  43+ 820E             >        ad_XY cpos<<3,ypos+1 + height*2
  43+ 820E             >ad      = (ypos+1 + height*2 and %00000111) * 256 + (ypos+1 + height*2 and %11000000) * 32 + (ypos+1 + height*2 and %00111000) * 4 + (cpos<<3>>3)
  43+ 820E E0 C9       >        dw    ad+#c000
  44+ 8210
  45+ 8210 00                       db     0
  46+ 8211
  47+ 8211              ;copy new line from screen 0 to 1
  48+ 8211              line01:
  49+ 8211 57                       db     #57
  50+ 8212 01                       db     1
  51+ 8213                          dw1_CY cpos,ypos-line-1 + height*3
  51+ 8213             >        ad_XY cpos<<3,ypos-line-1 + height*3
  51+ 8213             >ad      = (ypos-line-1 + height*3 and %00000111) * 256 + (ypos-line-1 + height*3 and %11000000) * 32 + (ypos-line-1 + height*3 and %00111000) * 4 + (cpos<<3>>3)
  51+ 8213 60 D7       >        dw    ad+#c000
  52+ 8215                          dw0_CY cpos,ypos-line-1 + height*3
  52+ 8215             >        ad_XY cpos<<3,ypos-line-1 + height*3
  52+ 8215             >ad      = (ypos-line-1 + height*3 and %00000111) * 256 + (ypos-line-1 + height*3 and %11000000) * 32 + (ypos-line-1 + height*3 and %00111000) * 4 + (cpos<<3>>3)
  52+ 8215 60 57       >        dw    ad+#4000
  53+ 8217
  54+ 8217              ;enter / next line
  55+ 8217              tabenter:
  56+ 8217 55                       db     #55
  57+ 8218 10                       db     line
  58+ 8219                          dw1_CY cpos,ypos-line + height*3
  58+ 8219             >        ad_XY cpos<<3,ypos-line + height*3
  58+ 8219             >ad      = (ypos-line + height*3 and %00000111) * 256 + (ypos-line + height*3 and %11000000) * 32 + (ypos-line + height*3 and %00111000) * 4 + (cpos<<3>>3)
  58+ 8219 80 D0       >        dw    ad+#c000
  59+ 821B                          dw0_CY cpos,ypos+0 + height*3
  59+ 821B             >        ad_XY cpos<<3,ypos+0 + height*3
  59+ 821B             >ad      = (ypos+0 + height*3 and %00000111) * 256 + (ypos+0 + height*3 and %11000000) * 32 + (ypos+0 + height*3 and %00111000) * 4 + (cpos<<3>>3)
  59+ 821B C0 50       >        dw    ad+#4000
  60+ 821D
  61+ 821D
  62+ 821D EC 81        ptvs:       dw     tabvscroll
  63+ 821F 00           toggle:     db     0
  64+ 8220 00           endmark:    db     0                    ; #ff when fzxprint ff is processed
  65+ 8221
  66+ 8221 32 A0 82     run0:       ld     (run.mlgap+1),a
  67+ 8224 21 EC 81                 ld     hl,tabvscroll
  68+ 8227 22 1D 82                 ld     (ptvs),hl
  69+ 822A
  70+ 822A 2A 1D 82     run:        ld     hl,(ptvs)             ; scroller
  71+ 822D 7E           .go:        ld     a,(hl)
  71+ 822E 23             inc hl      ; page number (0=reload table)
  72+ 822F A7                       and    a
  73+ 8230 28 67                    jr     z,.reload
  74+ 8232                          page_am                     ; do not store page number into @page
  74+ 8232 D3 FD       >         out    (#fd),a
  75+ 8234 E6 08                    and    8
  76+ 8236 32 3B BC                 ld     (@ivram),a           ; keep vram when returned from interrupt
  77+ 8239 7E                       ld     a,(hl)
  77+ 823A 23             inc hl      ; height
  78+ 823B DD 6F                    ld     xl,a
  79+ 823D 5E                       ld     e,(hl)
  79+ 823E 23             inc hl
  80+ 823F 56                       ld     d,(hl)
  80+ 8240 23             inc hl
  81+ 8241 4E                       ld     c,(hl)
  81+ 8242 23             inc hl
  82+ 8243 46                       ld     b,(hl)
  82+ 8244 23             inc hl
  83+ 8245 22 1D 82                 ld     (ptvs),hl
  84+ 8248 60 69                    ld     hl,bc
  85+ 824A              .copy:
  86+ 824A E5 D5        1           push   hl,de
  87+ 824C              3           REPT   width
  88+ 824C ED A0       >              ldi
  88+ 824E ED A0       >              ldi
  88+ 8250 ED A0       >              ldi
  88+ 8252 ED A0       >              ldi
  88+ 8254 ED A0       >              ldi
  88+ 8256 ED A0       >              ldi
  88+ 8258 ED A0       >              ldi
  88+ 825A ED A0       >              ldi
  88+ 825C ED A0       >              ldi
  88+ 825E ED A0       >              ldi
  88+ 8260 ED A0       >              ldi
  88+ 8262 ED A0       >              ldi
  88+ 8264 ED A0       >              ldi
  88+ 8266 ED A0       >              ldi
  88+ 8268 ED A0       >              ldi
  88+ 826A ED A0       >              ldi
  88+ 826C ED A0       >              ldi
  88+ 826E ED A0       >              ldi
  88+ 8270 ED A0       >              ldi
  88+ 8272 ED A0       >              ldi
  88+ 8274 ED A0       >              ldi
  88+ 8276 ED A0       >              ldi
  88+ 8278 ED A0       >              ldi
  88+ 827A ED A0       >              ldi
  88+ 827C ED A0       >              ldi
  88+ 827E ED A0       >              ldi
  88+ 8280 ED A0       >              ldi
  88+ 8282 ED A0       >              ldi
  88+ 8284 ED A0       >              ldi
  88+ 8286 ED A0       >              ldi
  88+ 8288 ED A0       >              ldi
  88+ 828A ED A0       >              ldi
  89+ 828C                          ENDR
  90+ 828C D1 E1                    pop    de,hl
  91+ 828E CD C7 6D                 call   vid
  92+ 8291 CD B8 6D                 call   vidd
  93+ 8294 DD 2D                    dec    xl
  94+ 8296 20 B2                    jr     nz,1B
  95+ 8298 C9                       ret
  96+ 8299
  97+ 8299 21 11 82     .reload:    ld     hl,line01
  98+ 829C CD 2D 82                 call   run.go
  99+ 829F
 100+ 829F 3E 10        .mlgap:     ld     a,lgap
 101+ 82A1 3D                       dec    a
 102+ 82A2 C2 21 82                 jp     nz,run0
 103+ 82A5              ;            border 4
 104+ 82A5 21 17 82                 ld     hl,tabenter
 105+ 82A8 CD 2D 82                 call   run.go
 106+ 82AB              ;            border 0
 107+ 82AB 3E 10        .mlg:       ld     a,lgap                           ; modify to change gap between lines
 108+ 82AD 32 1F 82                 ld     (toggle),a
 109+ 82B0 C3 21 82                 jp     run0
 110+ 82B3
 111+ 82B3              lineGap: = run.mlg+1
 112+ 82B3
 113+ 82B3              clearline:
 114+ 82B3              ;            border 4
 115+ 82B3 ED 73 DE 82              ld     (spp+1),sp
 116+ 82B7                          ad_CY  #1f,ypos + height*3
 116+ 82B7             >        ad_XY #1f<<3,ypos + height*3
 116+ 82B7             >ad      = (ypos + height*3 and %00000111) * 256 + (ypos + height*3 and %11000000) * 32 + (ypos + height*3 and %00111000) * 4 + (#1f<<3>>3)
 117+ 82B7 21 DF 50                 ld     hl,ad + #4000
 118+ 82BA 11 00 00                 ld     de,#00
 119+ 82BD 0E 10                    ld     c,line
 120+ 82BF 06 04        2           ld     b,4
 121+ 82C1 23                       inc    hl
 122+ 82C2 F9                       ld     sp,hl
 123+ 82C3 2B                       dec    hl
 124+ 82C4              1
 125+ 82C4 D5          > push   de
 125+ 82C5 D5          > push   de
 125+ 82C6 D5          > push   de
 125+ 82C7 D5          > push   de
 126+ 82C8 10 FA                    djnz   1B
 127+ 82CA
 128+ 82CA 24                       inc    h
 129+ 82CB 7C                       ld     a,h
 130+ 82CC E6 07                    and    7
 131+ 82CE 20 0A                    jr     nz,1F
 132+ 82D0 7D                       ld     a,l
 133+ 82D1 C6 20                    add    a,32
 134+ 82D3 6F                       ld     l,a
 135+ 82D4 38 04                    jr     c,1F
 136+ 82D6 7C                       ld     a,h
 137+ 82D7 D6 08                    sub    8
 138+ 82D9 67                       ld     h,a
 139+ 82DA 0D           1           dec    c
 140+ 82DB 20 E2                    jr     nz,2B
 141+ 82DD
 142+ 82DD 31 55 55     spp:        ld     sp,#5555
 143+ 82E0              ;            border 4
 144+ 82E0 C9                       ret
 145+ 82E1              init:
 146+ 82E1                          callix mmu.clsxi, #4700                     ; xl-pix xh-attr
 146+ 82E1 DD 21 00 47 >         ld      ix,#4700
 146+ 82E5 CD 2F 6C    >         call    mmu.clsxi
 147+ 82E8
 148+ 82E8 21 80 5A                 ld     hl,#5b00-#80
 149+ 82EB 54 5D                    ld     d,h,e,l
 150+ 82ED 13                       inc    de
 151+ 82EE 01 7F 00                 ld     bc,#7f
 152+ 82F1 36 00                    ld     (hl),#00
 153+ 82F3 ED B0                    ldir
 154+ 82F5 21 20 58                 ld     hl,#5820
 155+ 82F8 11 60 5A                 ld     de,#5a60
 156+ 82FB DD 21 00 58              ld     ix,#5800
 157+ 82FF 06 20                    ld     b,32
 158+ 8301 3E 03                    ld     a,#03
 159+ 8303 77           1           ld     (hl),a
 160+ 8304 12                       ld     (de),a
 161+ 8305 DD 36 00 00              ld     (ix),0
 162+ 8309 DD 2C                    inc    xl
 163+ 830B 2C                       inc    l
 164+ 830C 1C                       inc    e
 165+ 830D 10 F4                    djnz   1B
 166+ 830F CD 88 6C                 call   mmu.cpscr57
 167+ 8312 AF                       xor    a
 168+ 8313 32 1F 82                 ld     (toggle),a
 169+ 8316 C9                       ret
 170+ 8317
 171+ 8317 3A 3B BC     stars:      ld     a,(@ivram)
 172+ 831A F6 57                    or     #57
 173+ 831C                          page_am
 173+ 831C D3 FD       >         out    (#fd),a
 174+ 831E ED 5F                    ld     a,r
 175+ 8320 6F                       ld     l,a
 176+ 8321 E6 3F                    and    #3f
 177+ 8323 26 00                    ld     h,0
 178+ 8325 6E                       ld     l,(hl)
 179+ 8326 66                       ld     h,(hl)
 180+ 8327 11 01 01     .seed:      ld     de,#0101
 181+ 832A 19                       add    hl,de
 182+ 832B 22 28 83                 ld     (.seed+1),hl
 183+ 832E
 184+ 832E                          ad_CY  0,56*3-5         ; pos y
 184+ 832E             >        ad_XY 0<<3,56*3-5
 184+ 832E             >ad      = (56*3-5 and %00000111) * 256 + (56*3-5 and %11000000) * 32 + (56*3-5 and %00111000) * 4 + (0<<3>>3)
 185+ 832E 11 80 53                 ld     de,ad+#4000
 186+ 8331
 187+ 8331 7C                       ld     a,h
 188+ 8332 A7                       and    a
 189+ 8333 F8                       ret    m
 190+ 8334 7D                       ld     a,l
 191+ 8335 07                       rlca
 192+ 8336 07                       rlca
 193+ 8337 07                       rlca
 194+ 8338 E6 1F                    and    #1f
 195+ 833A B3                       or     e
 196+ 833B 5F                       ld     e,a
 197+ 833C 7D                       ld     a,l
 198+ 833D E6 07                    and   7
 199+ 833F 87                       add   a,a
 200+ 8340 87                       add   a,a
 201+ 8341 87                       add   a,a
 202+ 8342 C6 C6        .rs:        add   a,#c6         ; set 0,a | c7-a, c6-(hl)
 203+ 8344 32 4A 83                 ld    (.set),a
 204+ 8347 AF                       xor   a
 205+ 8348 EB                       ex    de,hl
 206+ 8349 CB                       db    #cb           ; cb prefix
 207+ 834A 55           .set:       db    #55
 208+ 834B C9                       ret
 209+ 834C
 210+ 834C                          ENDMODULE
 211+ 834C
# file closed: Q:\Development\Dev-ZX\demo_cats\demo/vscroll/vscroll.a80
 534  834C                      include "libs/vram_fade.a80"
# file opened: Q:\Development\Dev-ZX\demo_cats\libs/vram_fade.a80
   1+ 834C                          MODULE vfade
   2+ 834C              ;--------- lines are shown according to data in buffer
   3+ 834C              ; input ix - location of the buffer
   4+ 834C
   5+ 834C              run1:       border 0
   5+ 834C 3E 00       >          ld a,0
   5+ 834E D3 FE       >  out (#fe),a
   6+ 8350 ED 4B 16 85              ld     bc,(vars.curr.fwait1)
   7+ 8354 CD 0E 80                 call   @Tdelay
   8+ 8357 DD E5 E1                 ld     hl,ix                    ; address of data buffer
   9+ 835A 16 50                    ld     d,#50                     ; base page
  10+ 835C 0E 08                    ld     c,#08                    ; and vram
  11+ 835E 1E C0        .hgh:       ld     e,#c0                    ; height
  12+ 8360                          IFDEF  vfadeTest
  13+ 8360 ~                          border 2
  14+ 8360                          ELSE
  15+ 8360                            border 0
  15+ 8360 3E 00       >          ld a,0
  15+ 8362 D3 FE       >  out (#fe),a
  16+ 8364                          ENDIF
  17+ 8364
  18+ 8364 CB 0E        2           rrc    (hl)                     ;15
  19+ 8366 9F                       sbc    a,a                      ;4
  20+ 8367 A1                       and    c                        ;4
  21+ 8368 B2                       or     d                        ;4
  22+ 8369 D3 FD                    out    (#fd),a
  23+ 836B 23                       inc    hl                       ;6
  24+ 836C 06 55        .w10:       ld     b,#55                    ;7
  25+ 836E 10 FE        1           djnz   1B                       ;13/8
  26+ 8370 37                       scf
  27+ 8371 18 FE        .w11:       jr     $
  28+ 8373 00                       nop
  29+ 8374 00                       nop
  30+ 8375 00                       nop
  31+ 8376 D0                       ret    nc
  32+ 8377 D0                       ret    nc
  33+ 8378 1D                       dec    e                        ;4
  34+ 8379 C2 64 83                 jp     nz,2B                    ;10
  35+ 837C                          IFDEF  vfadeTest
  36+ 837C ~                          border 1
  37+ 837C                          ELSE
  38+ 837C                            border 0
  38+ 837C 3E 00       >          ld a,0
  38+ 837E D3 FE       >  out (#fe),a
  39+ 8380                          ENDIF
  40+ 8380 C9                       ret
  41+ 8381
  42+ 8381              ;------ lines are shown according to bitmap data
  43+ 8381              run2:       border 0
  43+ 8381 3E 00       >          ld a,0
  43+ 8383 D3 FE       >  out (#fe),a
  44+ 8385 ED 4B 1A 85              ld     bc,(vars.curr.fwait2)     ; frame wait
  45+ 8389 CD 0E 80                 call   @Tdelay
  46+ 838C D9                       exx
  47+ 838D 1E 55        .w10:       ld     e,#55
  48+ 838F 26 55        .w20:       ld     h,#55
  49+ 8391 06 50                    ld     b,#50
  50+ 8393 0E 08                    ld     c,#08
  51+ 8395 D9                       exx
  52+ 8396
  53+ 8396 2A 12 85                 ld     hl,(vars.cdata)
  54+ 8399 3A 15 85                 ld     a,(vars.height)
  55+ 839C 47                       ld     b,a
  56+ 839D                          IFDEF  vfadeTest
  57+ 839D ~                          border 2
  58+ 839D                          ELSE
  59+ 839D                            border 0
  59+ 839D 3E 00       >          ld a,0
  59+ 839F D3 FE       >  out (#fe),a
  60+ 83A1                          ENDIF
  61+ 83A1
  62+ 83A1 7E           .loop:      ld     a,(hl)            ;7
  63+ 83A2 23                       inc    hl                ;6
  64+ 83A3 D9                       exx                      ;4
  65+ 83A4 6F                       ld     l,a               ;4
  66+ 83A5 DD 2E 07                 ld     xl,7
  67+ 83A8
  68+ 83A8 CB 0D        .llop:      rrc    l               ;8
  69+ 83AA 9F                       sbc    a,a             ;4
  70+ 83AB A1                       and    c               ;4
  71+ 83AC B0                       or     b               ;4
  72+ 83AD D3 FD                    out    (#fd),a         ;12
  73+ 83AF 53                       ld     d,e             ;4      w10
  74+ 83B0 15           1           dec    d               ;4
  75+ 83B1 20 FD                    jr     nz,1B           ;12
  76+ 83B3 18 00        .w11:       jr     1F
  77+ 83B5 00           1           nop
  78+ 83B6 C0          > ret    nz
  78+ 83B7 C0          > ret    nz
  78+ 83B8 C0          > ret    nz
  78+ 83B9 C0          > ret    nz
  79+ 83BA DD 2D                    dec    xl
  80+ 83BC 20 EA                    jr     nz,.llop
  81+ 83BE
  82+ 83BE CB 0D                    rrc    l
  83+ 83C0 9F                       sbc    a,a
  84+ 83C1 A1                       and    c
  85+ 83C2 B0                       or     b
  86+ 83C3 D3 FD                    out    (#fd),a
  87+ 83C5 54                       ld     d,h             ;       w20
  88+ 83C6 15           1           dec    d               ;4
  89+ 83C7 20 FD                    jr     nz,1B           ;12+8   1=4+8=12, 2=4+12+4+8=16+12=28 3=28+16=42
  90+ 83C9
  91+ 83C9 18 00        .w21:       jr     1F
  92+ 83CB 00           1           nop
  93+ 83CC C0          > ret     nz
  93+ 83CD C0          > ret     nz
  93+ 83CE C0          > ret     nz
  93+ 83CF C0          > ret     nz
  94+ 83D0
  95+ 83D0 D9                       exx                      ;4
  96+ 83D1 00                       nop
  97+ 83D2 00                       nop                      ;4
  98+ 83D3 00                       nop
  99+ 83D4
 100+ 83D4 05                       dec     b               ;4
 101+ 83D5
 102+ 83D5 C2 A1 83                 jp       nz,.loop        ;10
 103+ 83D8 3E FF        .rrc:       ld     a,#ff                     ;#f0 ==> controls "speed" of animation
 104+ 83DA 0F                       rrca
 105+ 83DB 32 D9 83                 ld     (.rrc+1),a
 106+ 83DE D0                       ret    nc
 107+ 83DF 3A 14 85                 ld     a,(vars.cfram)
 108+ 83E2 3D                       dec    a
 109+ 83E3 F2 F2 83                 jp     p,1F
 110+ 83E6 3C                       inc    a
 111+ 83E7 32 14 85                 ld     (vars.cfram),a
 112+ 83EA                          IFDEF  vfadeTest
 113+ 83EA ~                          border 3
 114+ 83EA                          ELSE
 115+ 83EA                            border 0
 115+ 83EA 3E 00       >          ld a,0
 115+ 83EC D3 FE       >  out (#fe),a
 116+ 83EE                          ENDIF
 117+ 83EE
 118+ 83EE C9           .cycle:     ret                      ; nop / ret
 119+ 83EF C3 40 84                 jp     restore           ;a=0 --> restore
 120+ 83F2 22 12 85     1           ld     (vars.cdata),hl
 121+ 83F5 32 14 85                 ld     (vars.cfram),a
 122+ 83F8 C9                       ret
 123+ 83F9
 124+ 83F9              ;-----------
 125+ 83F9              ; a=computer type 0-128k, 1-p3, 2-pentagon
 126+ 83F9 0E 0A        init:       ld     c,vfconf
 127+ 83FB CD 57 78                 call   rsc.smul
 128+ 83FE 11 20 85                 ld     de,vars.machines
 129+ 8401 19                       add    hl,de
 130+ 8402 11 16 85                 ld     de,vars.curr
 131+ 8405 ED B0                    ldir
 132+ 8407
 133+ 8407 3A 18 85                 ld     a,(vars.curr.lwait1)
 134+ 840A 32 6D 83                 ld     (run1.w10+1),a
 135+ 840D 3A 19 85                 ld     a,(vars.curr.lwait2)
 136+ 8410 32 72 83                 ld     (run1.w11+1),a
 137+ 8413 3A 1C 85                 ld     a,(vars.curr.lwait3)
 138+ 8416 32 8E 83                 ld     (run2.w10+1),a
 139+ 8419 3A 1D 85                 ld     a,(vars.curr.lwait4)
 140+ 841C 32 90 83                 ld     (run2.w20+1),a
 141+ 841F 3A 1E 85                 ld     a,(vars.curr.lwait5)
 142+ 8422 32 B4 83                 ld     (run2.w11+1),a
 143+ 8425 3A 1F 85                 ld     a,(vars.curr.lwait6)
 144+ 8428 32 CA 83                 ld     (run2.w21+1),a
 145+ 842B              ;            ret
 146+ 842B
 147+ 842B E5           buffClear:  push   hl
 148+ 842C 21 01 00                 ld     hl,1
 149+ 842F 22 6A 84                 ld     (seqRun.frm+1),hl
 150+ 8432 C5                       push   bc
 151+ 8433              ;clear buffer
 152+ 8433 21 00 6A                 ld     hl,data
 153+ 8436 06 00                    ld     b,0
 154+ 8438 36 00        1           ld     (hl),0
 155+ 843A 23                       inc    hl
 156+ 843B 10 FB                    djnz   1B
 157+ 843D C1 E1                    pop    bc,hl
 158+ 843F C9                       ret
 159+ 8440
 160+ 8440 DD 21 55 55  restore:    ld     ix,#5555                  ; this is used for cyclic/repeating bitmap
 161+ 8444              ; ---
 162+ 8444              ; input ix=address of HDI bitmap
 163+ 8444              ;        a=0 animation will cycle, <>0 - won't cycle
 164+ 8444 DD 22 42 84  init2:      ld     (restore+2),ix
 165+ 8448 A7                       and    a
 166+ 8449 28 02                    jr     z,1F
 167+ 844B 3E C9                    ld     a,#c9
 168+ 844D 32 EE 83     1           ld     (run2.cycle),a
 169+ 8450 DD 7E 00                 ld     a,(ix+hdi.bwidth)
 170+ 8453 32 15 85                 ld     (vars.height),a           ; bitmap width = height of fade area
 171+ 8456 DD 7E 01                 ld     a,(ix+hdi.height)
 172+ 8459 32 14 85                 ld     (vars.cfram),a            ; bitmap height = number of animation frames
 173+ 845C 01 03 00                 ld     bc,hdi
 174+ 845F DD 09                    add    ix,bc
 175+ 8461 DD 22 12 85              ld     (vars.cdata),ix
 176+ 8465 C9                       ret
 177+ 8466
 178+ 8466              ; this routine is changing vram line data as timed sequence (specified by IX)
 179+ 8466 DC 2B 84     seqRun:     call   c,buffClear
 180+ 8469 11 00 00     .frm:       ld     de,0                      ; frames
 181+ 846C 7A                       ld     a,d
 182+ 846D B3                       or     e
 183+ 846E 28 06                    jr     z,1F
 184+ 8470
 185+ 8470 1B                       dec    de                        ; only substract frame and ret
 186+ 8471 ED 53 6A 84              ld     (seqRun.frm+1),de
 187+ 8475 C9                       ret
 188+ 8476
 189+ 8476 DD 6E 00 DD  1           ld     hl,(ix+0)
 189+ 847A 66 01
 190+ 847C 4E                       ld     c,(hl)
 190+ 847D 23             inc hl           ; seq frames
 191+ 847E 46                       ld     b,(hl)
 191+ 847F 23             inc hl
 192+ 8480 5E                       ld     e,(hl)
 192+ 8481 23             inc hl           ;     new data vram line
 193+ 8482 56                       ld     d,(hl)
 193+ 8483 23             inc hl
 194+ 8484 79                       ld     a,c
 195+ 8485 B0                       or     b
 196+ 8486 C8                       ret    z                         ; no more data in the table
 197+ 8487 ED 43 6A 84              ld     (seqRun.frm+1),bc         ; save frames
 198+ 848B DD 75 00 DD              ld     (ix+0),hl
 198+ 848F 74 01
 199+ 8491
 200+ 8491 EB                       ex     de,hl
 201+ 8492 7E           2           ld     a,(hl)
 201+ 8493 23             inc hl           ; count of repetitions (0=end)
 202+ 8494 A7                       and    a
 203+ 8495 C8                       ret    z
 204+ 8496
 205+ 8496 06 00        1           ld     b,0
 206+ 8498 4E                       ld     c,(hl)
 206+ 8499 23             inc hl           ; buff offset (data+offset)
 207+ 849A EB                       ex     de,hl
 208+ 849B 21 00 6A                 ld     hl,data
 209+ 849E 09                       add    hl,bc
 210+ 849F EB                       ex     de,hl
 211+ 84A0 E5           1           push   hl
 212+ 84A1 4E                       ld     c,(hl)
 212+ 84A2 23             inc hl           ; seq length
 213+ 84A3 ED B0                    ldir
 214+ 84A5 E1                       pop    hl
 215+ 84A6 3D                       dec    a
 216+ 84A7 20 F7                    jr     nz,1B
 217+ 84A9 4E                       ld     c,(hl)
 217+ 84AA 23             inc hl
 218+ 84AB 09                       add    hl,bc
 219+ 84AC 18 E4                    jr     2B
 220+ 84AE
 221+ 84AE DC 04 85     line:       call   c,.init
 222+ 84B1 DD 6E 00 DD              ld     hl,(ix+vfline.ipos)
 222+ 84B5 66 01
 223+ 84B7 4C                       ld     c,h                       ; current position
 224+ 84B8 DD 7E 05                 ld     a,(ix+vfline.end)
 225+ 84BB BC                       cp     h
 226+ 84BC 20 0B                    jr     nz,1F
 227+ 84BE
 228+ 84BE DD CB 06 46              bit    0,(ix+vfline.mode)        ; test repeat
 229+ 84C2 28 12                    jr     z,3F
 230+ 84C4 DD 66 04                 ld     h,(ix+vfline.start)
 231+ 84C7 2E 00                    ld     l,0
 232+ 84C9
 233+ 84C9 DD 5E 02 DD  1           ld     de,(ix+vfline.incr)
 233+ 84CD 56 03
 234+ 84CF 19                       add    hl,de
 235+ 84D0 DD 75 00 DD              ld     (ix+vfline.ipos),hl
 235+ 84D4 74 01
 236+ 84D6 44           3           ld     b,h
 237+ 84D7 21 00 6A                 ld     hl,data
 238+ 84DA 59                       ld     e,c
 239+ 84DB 16 00                    ld     d,0
 240+ 84DD 19                       add    hl,de
 241+ 84DE              ;-- erase
 242+ 84DE DD 5E 07                 ld     e,(ix+vfline.glen)
 243+ 84E1 DD 7E 08                 ld     a,(ix+vfline.resval)
 244+ 84E4 77           1           ld     (hl),a
 245+ 84E5 23                       inc    hl
 246+ 84E6 1D                       dec    e
 247+ 84E7 20 FB                    jr     nz,1B
 248+ 84E9
 249+ 84E9 21 00 6A                 ld     hl,data
 250+ 84EC 58                       ld     e,b
 251+ 84ED 19                       add    hl,de
 252+ 84EE EB                       ex     de,hl
 253+ 84EF DD E5 E1                 ld     hl,ix               ; addr of struct
 254+ 84F2 01 09 00                 ld     bc,vfline
 255+ 84F5 09                       add    hl,bc               ; address of gfx data (after struct)
 256+ 84F6 DD 46 07                 ld     b,(ix+vfline.glen)  ; length
 257+ 84F9              ;-- draw
 258+ 84F9 7E           1           ld     a,(hl)
 259+ 84FA 0F                       rrca
 260+ 84FB 77                       ld     (hl),a
 261+ 84FC 1A                       ld     a,(de)
 262+ 84FD B6                       or     (hl)
 263+ 84FE 12                       ld     (de),a
 264+ 84FF 13                       inc    de
 265+ 8500 23                       inc    hl
 266+ 8501 10 F6                    djnz   1B
 267+ 8503 C9                       ret
 268+ 8504
 269+ 8504 CD 2B 84     .init:      call   buffClear
 270+ 8507 DD 7E 04                 ld     a,(ix+vfline.start)
 271+ 850A DD 36 00 00              ld     (ix+vfline.ipos+0),0
 272+ 850E DD 77 01                 ld     (ix+vfline.ipos+1),a
 273+ 8511 C9                       ret
 274+ 8512
 275+ 8512                          STRUCT vfline
 276+ 8512 ~            ipos:       dw     0
 277+ 8512 ~            incr:       dw     0
 278+ 8512 ~            start:      db     0
 279+ 8512 ~            end:        db     0
 280+ 8512 ~            mode:       db     0                   ; bit0=1 repeat from start
 281+ 8512 ~            glen:       db     0                   ; data length
 282+ 8512 ~            resval:     db     0                   ; reset value
 283+ 8512 ~                                                   ; data follows end of the structure
 284+ 8512 ~            ;data
 285+ 8512                          ENDS
 286+ 8512
 287+ 8512                          STRUCT vfconf
 288+ 8512 ~            fwait1:     dw     0
 289+ 8512 ~            lwait1:     db     0
 290+ 8512 ~            lwait2:     db     0
 291+ 8512 ~            fwait2:     dw     0
 292+ 8512 ~            lwait3:     db     0
 293+ 8512 ~            lwait4:     db     0
 294+ 8512 ~            lwait5:     db     0
 295+ 8512 ~            lwait6:     db     0
 296+ 8512                          ENDS
 297+ 8512
 298+ 8512              vars:
 299+ 8512 00 00        .cdata:     dw     0
 300+ 8514 00           .cfram:     db     0
 301+ 8515 18           .height:    db     #18
 302+ 8516 00 00 00 00  .curr:      vfconf
 302+ 851A 00 00 00 00
 302+ 851E 00 00
 303+ 8520              .machines:
 304+ 8520              ;-------------------------------------------------------------------
 305+ 8520 34 35 0B 05  .slow:      vfconf 13620, #0b, 5, 13574, #0a, #06, #04, #00
 305+ 8524 06 35 0A 06
 305+ 8528 04 00
 306+ 852A              ; -- configured for execmd
 307+ 852A 34 35 0B 05  .zx128:     vfconf 13620, #0b, 5, 13574, #0a, #06, #04, #00
 307+ 852E 06 35 0A 06
 307+ 8532 04 00
 308+ 8534 34 35 0B 05  .p3:        vfconf 13620, #0b, 5, 13574, #0a, #07, #04, #01
 308+ 8538 06 35 0A 07
 308+ 853C 04 01
 309+ 853E 32 43 0A 01  .pent:      vfconf 17202, #0a, 1, 17194, #0a, #08, #05, #03
 309+ 8542 2A 43 0A 08
 309+ 8546 05 03
 310+ 8548              ; -- not configured
 311+ 8548 32 43 0A 01  .c0:        vfconf 17202, #0a, 1, 17194, #0a, #08, #05, #03
 311+ 854C 2A 43 0A 08
 311+ 8550 05 03
 312+ 8552 32 43 0A 01  .c1:        vfconf 17202, #0a, 1, 17194, #0a, #08, #05, #03
 312+ 8556 2A 43 0A 08
 312+ 855A 05 03
 313+ 855C 32 43 0A 01  .c2:        vfconf 17202, #0a, 1, 17194, #0a, #08, #05, #03
 313+ 8560 2A 43 0A 08
 313+ 8564 05 03
 314+ 8566              ;###################################################################
 315+ 8566 68 85        sqTest:     dw     .s
 316+ 8568              ;-----             frames, vram_line_data
 317+ 8568 88 13 72 85  .s:         dw     5000,  .data0
 318+ 856C 88 13 78 85              dw     5000,  .data1
 319+ 8570 00 00                    dw     0                                                ; end mark
 320+ 8572
 321+ 8572                          ; no of reps, offset, length of rep, data
 322+ 8572 60 00 02 55  .data0:     db     #60,#00,#02,#55,#aa
 322+ 8576 AA
 323+ 8577 00                       db     0
 324+ 8578
 325+ 8578 60 00 02 AA  .data1:     db     #60,#00,#02,#aa,#55
 325+ 857C 55
 326+ 857D 00                       db     0
 327+ 857E
 328+ 857E              ;###################################################################
 329+ 857E 80 85        sqBadpix:   dw     .s
 330+ 8580              ;-----             frames, vram_line_data
 331+ 8580 F4 01 8A 85  .s:         dw     500,  bpd1
 332+ 8584 0A 00 DB 85              dw      10,  dtComp2
 333+ 8588 00 00                    dw     0                                                ; end mark
 334+ 858A
 335+ 858A                          ; no of reps, offset, length of rep, data
 336+ 858A 31 00 02 55  bpd1:       db     #31,#00,#02,#55,#aa                              ; no of reps, offset, length of rep, data
 336+ 858E AA
 337+ 858F 01 62 20                 db     #01,#62,#20
 338+ 8592 FF FF FF 00              db     #ff, #ff, #ff, #00, #ff, #ff, #00, #ff
 338+ 8596 FF FF 00 FF
 339+ 859A 00 00 00 FF              db     #00, #00, #00, #ff, #00, #00, #ff, #ff
 339+ 859E 00 00 FF FF
 340+ 85A2 FF 00 FF FF              db     #ff, #00, #ff, #ff, #00, #ff, #00, #00
 340+ 85A6 00 FF 00 00
 341+ 85AA 00 FF 00 00              db     #00, #ff, #00, #00, #ff, #00, #ff, #ff
 341+ 85AE FF 00 FF FF
 342+ 85B2 00                       db     0                                                ; end of reps
 343+ 85B3
 344+ 85B3              ;###################################################################
 345+ 85B3 B5 85        sqComp:     dw     .s
 346+ 85B5              ;-----             frames, vram_line_data
 347+ 85B5 32 00 CF 85  .s:         dw     50,  dtComp1
 348+ 85B9 19 00 DB 85              dw     25,  dtComp2
 349+ 85BD 0C 00 CF 85              dw     12,  dtComp1
 350+ 85C1 32 00 DB 85              dw     50,  dtComp2
 351+ 85C5 0C 00 CF 85              dw     12,  dtComp1
 352+ 85C9 32 00 DB 85              dw     50,  dtComp2
 353+ 85CD 00 00                    dw     0                                                ; end of reps
 354+ 85CF
 355+ 85CF                          ; no of reps, offset, length of rep, number of data, ...data, 0=end of sequence
 356+ 85CF 02 00 08     dtComp1:    db     #02,#00,#08
 357+ 85D2              _v: = #0001
 358+ 85D2              _i: = 0
 359+ 85D2                             DUP    8
 360+ 85D2 01          >                  db     (_v << _i) and #ff
 361+ 85D3             >_i:               = _i + 1
 360+ 85D3 02          >                  db     (_v << _i) and #ff
 361+ 85D4             >_i:               = _i + 1
 360+ 85D4 04          >                  db     (_v << _i) and #ff
 361+ 85D5             >_i:               = _i + 1
 360+ 85D5 08          >                  db     (_v << _i) and #ff
 361+ 85D6             >_i:               = _i + 1
 360+ 85D6 10          >                  db     (_v << _i) and #ff
 361+ 85D7             >_i:               = _i + 1
 360+ 85D7 20          >                  db     (_v << _i) and #ff
 361+ 85D8             >_i:               = _i + 1
 360+ 85D8 40          >                  db     (_v << _i) and #ff
 361+ 85D9             >_i:               = _i + 1
 360+ 85D9 80          >                  db     (_v << _i) and #ff
 361+ 85DA             >_i:               = _i + 1
 362+ 85DA                             EDUP
 363+ 85DA 00                       db     0                                                ; end of reps
 364+ 85DB
 365+ 85DB 01 40 09     dtComp2:    db     #01,#40,#09
 366+ 85DE 03 03 03 03              db     #03,#03,#03,#03
 367+ 85E2 03 03 03 03              db     #03,#03,#03,#03
 368+ 85E6 03                       db     #03
 369+ 85E7 00                       db     0                                                ; end of reps
 370+ 85E8
 371+ 85E8              ;###################################################################
 372+ 85E8 EA 85        sqHelmet:   dw     .s                                            ; first is pointer to current sequence
 373+ 85EA              ;-----             frames, vram_line_data, start_offset, length
 374+ 85EA 64 00 1E 86  .s:         dw     100, .data3
 375+ 85EE 32 00 23 86              dw     050, .data4
 376+ 85F2 19 00 0C 86              dw     025, .data1
 377+ 85F6 19 00 1E 86              dw     025, .data3
 378+ 85FA 32 00 23 86              dw     050, .data4
 379+ 85FE 19 00 1E 86              dw     025, .data3
 380+ 8602 19 00 0C 86              dw     025, .data1
 381+ 8606 C8 00 12 86              dw     200, .data2
 382+ 860A 00 00                    dw     0                     ; end mark
 383+ 860C
 384+ 860C 20 50 02     .data1:     db     #20,#50,#02
 385+ 860F 55 AA                    db     #55,#aa
 386+ 8611 00                       db     0                     ; end mark
 387+ 8612
 388+ 8612 08 50 08     .data2:     db     #08,#50,#08
 389+ 8615 F0                         db     %11110000
 390+ 8616 78                         db     %01111000
 391+ 8617 3C                         db     %00111100
 392+ 8618 1E                         db     %00011110
 393+ 8619 0F                         db     %00001111
 394+ 861A 87                         db     %10000111
 395+ 861B C3                         db     %11000011
 396+ 861C E1                         db     %11100001
 397+ 861D 00                       db     0                     ; end mark
 398+ 861E
 399+ 861E 40 50 01     .data3:     db     #40,#50,#01
 400+ 8621 00                       db     0
 401+ 8622 00                       db     0                     ; end mark
 402+ 8623
 403+ 8623 40 50 01     .data4:     db     #40,#50,#01
 404+ 8626 FF                       db     #ff
 405+ 8627 00                       db     0                     ; end mark
 406+ 8628
 407+ 8628              ;###################################################################
 408+ 8628 2A 86        sqTitles:   dw     .s
 409+ 862A 00 02 34 86  .s:         dw     #200, .data1
 410+ 862E 00 02 3A 86              dw     #200, .data2
 411+ 8632 00 00                    dw     0
 412+ 8634
 413+ 8634 60 00 02     .data1:     db     #60,00,#02
 414+ 8637 55 AA                    db     #55,#aa
 415+ 8639 00                       db     0                     ; end mark
 416+ 863A
 417+ 863A 60 00 08     .data2:     db     #60,00,#08
 418+ 863D 01 02 04 08              db     1,2,4,8,16,32,64,128
 418+ 8641 10 20 40 80
 419+ 8645 00                       db     0                     ; end mark
 420+ 8646
 421+ 8646              ;###################################################################
 422+ 8646
 423+ 8646                          ;       ipos ,inc,strt, end, mode, len, resval
 424+ 8646 00 90 A0 FF  lnBadpix:   vfline #9000,-#0060,#90,#00,#00,#10,#00
 424+ 864A 90 00 00 10
 424+ 864E 00
 425+ 864F              ;lnBadpix:   vfline #0000,#0060,#00,#90,#00,#10,#00
 426+ 864F FF 00 FF FF              db     #ff,#00,#ff,#ff,#00,#ff,#ff,#ff
 426+ 8653 00 FF FF FF
 427+ 8657 FF FF FF 00              db     #ff,#ff,#ff,#00,#ff,#ff,#00,#ff
 427+ 865B FF FF 00 FF
 428+ 865F
 429+ 865F
 430+ 865F 00 30 30 00  lnDark:     vfline #3000,#0030,#30,#70,#00,#04,#00
 430+ 8663 30 70 00 04
 430+ 8667 00
 431+ 8668 AA 00 FF FF              db     #aa,#00,#ff,#ff
 432+ 866C
 433+ 866C 00 00 00 04  lnComp1:    vfline #0000,#0400,#00,#b4,#00,#10,#00
 433+ 8670 00 B4 00 10
 433+ 8674 00
 434+ 8675 55 FF FF FF              db     #55,#ff,#ff,#ff,#ff,#ff,#ff,#ff
 434+ 8679 FF FF FF FF
 435+ 867D FF FF FF FF              db     #ff,#ff,#ff,#ff,#ff,#ff,#ff,#55
 435+ 8681 FF FF FF 55
 436+ 8685
 437+ 8685 00 00 60 00  lnComp2:    vfline #0000,#0060,#00,#70,#00,#03,#00
 437+ 8689 00 70 00 03
 437+ 868D 00
 438+ 868E 55 FF AA                 db     #55,#ff,#aa
 439+ 8691
 440+ 8691 00 60 80 FF  lnTitles:   vfline #6000,-#0080,#70,#50,#00,#07,#00
 440+ 8695 70 50 00 07
 440+ 8699 00
 441+ 869A AA 00 55 FF              db     #aa,00,#55,#ff,#55,#00,#aa
 441+ 869E 55 00 AA
 442+ 86A1
 443+ 86A1                          ;       ipos ,inc,strt, end, mode, len, resval
 444+ 86A1 00 00 00 FC  lnInvader:  vfline #0000,-#0400,#c0,#00,#00,#10,#00
 444+ 86A5 C0 00 00 10
 444+ 86A9 00
 445+ 86AA FF 00 FF FF              db     #ff,#00,#ff,#ff,#00,#ff,#ff,#ff
 445+ 86AE 00 FF FF FF
 446+ 86B2 FF FF FF 00              db     #ff,#ff,#ff,#00,#ff,#ff,#00,#ff
 446+ 86B6 FF FF 00 FF
 447+ 86BA
 448+ 86BA              ;###################################################################
 449+ 86BA 18 02 00     hdiTest:    hdi    #18,2,0
 450+ 86BD 55 55 55...              ds     #18,#55
 451+ 86D5 AA AA AA...              ds     #18,#aa
 452+ 86ED
 453+ 86ED
 454+ 86ED              data: = @swap
 455+ 86ED              ;data:       ds     #100
 456+ 86ED
 457+ 86ED                          display "vfade:",$-vars
 458+ 86ED                          ENDMODULE
# file closed: Q:\Development\Dev-ZX\demo_cats\libs/vram_fade.a80
 535  86ED                      include  "demo/fzblueprint.a80"
# file opened: Q:\Development\Dev-ZX\demo_cats\demo/fzblueprint.a80
   1+ 86ED              Vy: = 24
   2+ 86ED              Sy: = 24
   3+ 86ED 64 C5 F8 86  fzblueprint1: sfzx ffnt5, fzblueprint1.text, 8, 0
   3+ 86F1 08 00 00 00
   3+ 86F5 00 00 00
   4+ 86F8 16 18 08     .text:  db   22,Vy,8
   5+ 86FB 54 68 65 20          db   "The state of demomaking",#ff
   5+ 86FF 73 74 61 74
   5+ 8703 65 20 6F 66
   5+ 8707 20 64 65 6D
   5+ 870B 6F 6D 61 6B
   5+ 870F 69 6E 67 FF
   6+ 8713              Vy=Vy+Sy
   7+ 8713 64 C5 1E 87  fzblueprint2: sfzx ffnt5, fzblueprint2.text, 8, 0
   7+ 8717 08 00 00 00
   7+ 871B 00 00 00
   8+ 871E 16 30 08     .text:  db   22,Vy,8
   9+ 8721 68 61 73 20          db   "has led to the extinction",#ff
   9+ 8725 6C 65 64 20
   9+ 8729 74 6F 20 74
   9+ 872D 68 65 20 65
   9+ 8731 78 74 69 6E
   9+ 8735 63 74 69 6F
   9+ 8739 6E FF
  10+ 873B              Vy=Vy+Sy
  11+ 873B 64 C5 46 87  fzblueprint3: sfzx ffnt5, fzblueprint3.text, 8, 0
  11+ 873F 08 00 00 00
  11+ 8743 00 00 00
  12+ 8746 16 48 08     .text:  db   22,Vy,8
  13+ 8749 6F 66 20 61          db   "of almost all kittens.",#ff
  13+ 874D 6C 6D 6F 73
  13+ 8751 74 20 61 6C
  13+ 8755 6C 20 6B 69
  13+ 8759 74 74 65 6E
  13+ 875D 73 2E FF
  14+ 8760              Vy=Vy+Sy
  15+ 8760 64 C5 6B 87  fzblueprint4: sfzx ffnt5, fzblueprint4.text, 8, 0
  15+ 8764 08 00 00 00
  15+ 8768 00 00 00
  16+ 876B 16 60 08     .text:  db   22,Vy,8
  17+ 876E 54 68 65 20          db   "The space ark with last",#ff
  17+ 8772 73 70 61 63
  17+ 8776 65 20 61 72
  17+ 877A 6B 20 77 69
  17+ 877E 74 68 20 6C
  17+ 8782 61 73 74 FF
  18+ 8786              Vy=Vy+Sy
  19+ 8786 64 C5 91 87  fzblueprint5: sfzx ffnt5, fzblueprint5.text, 8, 0
  19+ 878A 08 00 00 00
  19+ 878E 00 00 00
  20+ 8791 16 78 08     .text:  db   22,Vy,8
  21+ 8794 73 75 72 76          db   "surviving species is",#ff
  21+ 8798 69 76 69 6E
  21+ 879C 67 20 73 70
  21+ 87A0 65 63 69 65
  21+ 87A4 73 20 69 73
  21+ 87A8 FF
  22+ 87A9              Vy=Vy+Sy
  23+ 87A9 64 C5 B4 87  fzblueprint6: sfzx ffnt5, fzblueprint6.text, 8, 0
  23+ 87AD 08 00 00 00
  23+ 87B1 00 00 00
  24+ 87B4 16 90 08     .text:  db   22,Vy,8
  25+ 87B7 6C 65 61 76          db   "leaving planet Earth now.",#ff
  25+ 87BB 69 6E 67 20
  25+ 87BF 70 6C 61 6E
  25+ 87C3 65 74 20 45
  25+ 87C7 61 72 74 68
  25+ 87CB 20 6E 6F 77
  25+ 87CF 2E FF
  26+ 87D1
  27+ 87D1
  28+ 87D1 ~            /*
  29+ 87D1 ~            ;rectangle fill
  30+ 87D1 ~                    STRUCT rctf
  31+ 87D1 ~            posx:   db     0         ; char
  32+ 87D1 ~            posy:   db     0
  33+ 87D1 ~            wdth:   db     0         ; char
  34+ 87D1 ~            hght:   db     0
  35+ 87D1 ~            fill:   db     0
  36+ 87D1 ~            mode:   db     0         ; 0-1  00 - put, 01 - or, 10 - and, 11 xor
  37+ 87D1 ~                                     ; 2    vram addr : 0=#4000, 1=#c000
  38+ 87D1 ~                                     ; 3    rotate gfx: 0=don't, 1=rrc <fill> every next line
  39+ 87D1 ~                                     ; 4    attributes
  40+ 87D1 ~                    ENDS
  41+ 87D1 ~            */
  42+ 87D1
  43+ 87D1              x=1
  44+ 87D1              y=3
  45+ 87D1              s=3
  46+ 87D1 01 03 18 02  atrBP1: atwin x+y*#100, 24, 2, bpadata, 0, #50
  46+ 87D5 25 88 00 50
  46+ 87D9 00 00 00 00
  47+ 87DD              y=y+s
  48+ 87DD 01 06 16 02  atrBP2: atwin x+y*#100, 22, 2, bpadata, 0, #50
  48+ 87E1 25 88 00 50
  48+ 87E5 00 00 00 00
  49+ 87E9              y=y+s
  50+ 87E9 01 09 12 02  atrBP3: atwin x+y*#100, 18, 2, bpadata, 0, #50
  50+ 87ED 25 88 00 50
  50+ 87F1 00 00 00 00
  51+ 87F5              y=y+s
  52+ 87F5 01 0C 16 02  atrBP4: atwin x+y*#100, 22, 2, bpadata, 0, #50
  52+ 87F9 25 88 00 50
  52+ 87FD 00 00 00 00
  53+ 8801              y=y+s
  54+ 8801 01 0F 12 02  atrBP5: atwin x+y*#100, 18, 2, bpadata, 0, #50
  54+ 8805 25 88 00 50
  54+ 8809 00 00 00 00
  55+ 880D              y=y+s
  56+ 880D 01 12 18 02  atrBP6: atwin x+y*#100, 24, 2, bpadata, 0, #50
  56+ 8811 25 88 00 50
  56+ 8815 00 00 00 00
  57+ 8819
  58+ 8819 01 12 18 02  atrBP6h: atwin x+y*#100, 24, 2, bphilig, %00'00'00'10, #50       ; highlight of last line
  58+ 881D 30 88 02 50
  58+ 8821 00 00 00 00
  59+ 8825
  60+ 8825              bpadata:
  61+ 8825              cl=#40+#3e
  62+ 8825              s =-8
  63+ 8825 7E                   db    cl
  64+ 8826              cl=cl+s
  65+ 8826 76                   db    cl
  66+ 8827              cl=cl+s
  67+ 8827 6E                   db    cl
  68+ 8828              cl=cl+s
  69+ 8828 66                   db    cl
  70+ 8829              cl=cl+s
  71+ 8829 5E                   db    cl
  72+ 882A              cl=cl+s
  73+ 882A 56                   db    cl
  74+ 882B              cl=cl+s
  75+ 882B 4E                   db    cl
  76+ 882C 4E                   db    #08+#46
  77+ 882D 4E                   db    #08+#46
  78+ 882E 4E                   db    cl
  79+ 882F FF                   db    #ff
  80+ 8830
  81+ 8830              bphilig:
  82+ 8830 47 45 FF             db    #47,#45,#ff
  83+ 8833
  84+ 8833
  85+ 8833              x=1
  86+ 8833              y=3*8
  87+ 8833              s=3*8
  88+ 8833 01 18 18 10  rcrBP1:  rctf  x,y,24,16,0,%00000000
  88+ 8837 00 00
  89+ 8839              y=y+s
  90+ 8839 01 30 16 10  rcrBP2:  rctf  x,y,22,16,0,%00000000
  90+ 883D 00 00
  91+ 883F              y=y+s
  92+ 883F 01 48 12 10  rcrBP3:  rctf  x,y,18,16,0,%00000000
  92+ 8843 00 00
  93+ 8845              y=y+s
  94+ 8845 01 60 16 10  rcrBP4:  rctf  x,y,22,16,0,%00000000
  94+ 8849 00 00
  95+ 884B              y=y+s
  96+ 884B 01 78 12 10  rcrBP5:  rctf  x,y,18,16,0,%00000000
  96+ 884F 00 00
  97+ 8851              y=y+s
  98+ 8851 01 90 18 10  rcrBP6:  rctf  x,y,24,16,0,%00000000
  98+ 8855 00 00
  99+ 8857
# file closed: Q:\Development\Dev-ZX\demo_cats\demo/fzblueprint.a80
 536  8857              load:
 537  8857              ;--- rotoid
 538  8857                       include "demo/rotoid/rotoid.a80"
# file opened: Q:\Development\Dev-ZX\demo_cats\demo/rotoid/rotoid.a80
   1+ 8857              ; moving macros and definitions to rotoid_def.inc
   2+ 8857              ; 128k pages
   3+ 8857              pgMult:    = #56       ; multiplication table
   4+ 8857              pgSqrt:    = #54       ; square root table
   5+ 8857              pgScen:    = #50       ; page with scenes and object data
   6+ 8857
   7+ 8857                      MODULE rotoid
   8+ 8857              _rt:
   9+ 8857
  10+ 8857              sqrt:      = #c000
  11+ 8857              mult:      = #c000
  12+ 8857
  13+ 8857              ; perspective focal distance (0=256, 1=128, 2=64...)
  14+ 8857              _focal:    = 3
  15+ 8857              _znear:    = #0100>>_focal
  16+ 8857              ; how far we can see - maximal visible z-distance
  17+ 8857              _far:      = #0180
  18+ 8857              ; fade out distance
  19+ 8857              _fade:     = #0000
  20+ 8857
  21+ 8857              maxradius: = 128
  22+ 8857              angle:     = 16
  23+ 8857
  24+ 8857              ;        ORG     #8000
  25+ 8857 00 00 00...          ALIGN   #100
  26+ 8900              ;----------------
  27+ 8900              ; tables for horizontal line
  28+ 8900 00 00 00...  linetab:  ds    #200    ; address based on Y
  29+ 8B00 00 00 00...  lineadd:  ds    #100    ; add_to_address based on X
  30+ 8C00 00 00 00...  linemr:   ds    #100    ; right side gfx
  31+ 8D00 00 00 00...  lineml:   ds    #100    ; left side gfx
  32+ 8E00 00 00 00...  pwrt:     ds    #200    ; power table
  33+ 9000              ;----------------
  34+ 9000              ; tables for objects: xpos data table
  35+ 9000 00 00 00...  ldata:    ds    #100    ; linedata right
  36+ 9100 00 00 00...  ldatm:    ds    #100    ; mid
  37+ 9200 00 00 00...  ldatl:    ds    #100    ; left
  38+ 9300 00 00 00...  sintab:   ds    #100
  39+ 9400              ; ------------------
  40+ 9400              ; dithering patterns
  41+ 9400              dthPattern:
  42+ 9400 00 00 00...            ds    #40   ; dither pattern
  43+ 9440 00 00 00...  sortzp:   ds    #10     ; space for sorting z-positions
  44+ 9450              ; ------------------
  45+ 9450              ; edge table
  46+ 9450 7F           edtab:    db    %01111111
  47+ 9451 3F                     db    %00111111
  48+ 9452 1F                     db    %00011111
  49+ 9453 0F                     db    %00001111
  50+ 9454 07                     db    %00000111
  51+ 9455 03                     db    %00000011
  52+ 9456 01                     db    %00000001
  53+ 9457 00                     db    %00000000
  54+ 9458
  55+ 9458 00                     db    %00000000
  56+ 9459 80                     db    %10000000
  57+ 945A C0                     db    %11000000
  58+ 945B E0                     db    %11100000
  59+ 945C F0                     db    %11110000
  60+ 945D F8                     db    %11111000
  61+ 945E FC                     db    %11111100
  62+ 945F FE                     db    %11111110
  63+ 9460
  64+ 9460              ; data
  65+ 9460              ;------------------------------------------------------
  66+ 9460              ;          include "demo/data/rotoid/_rt_objects.a80 "
  67+ 9460              ;          include "demo/data/rotoid/_rt_scenes.a80"
  68+ 9460
  69+ 9460              ; system variables
  70+ 9460              ;------------------------------------------------------
  71+ 9460 00 00 00 00  lsxy:     objdef  0                                ; current object variables (modified by setObject)
  71+ 9464 00 00 00 00
  71+ 9468 00 00 00 00
  71+ 946C 00 00 00 00
  71+ 9470 00 00 00 00
  71+ 9474 00 00 00 00
  71+ 9478 00
  72+ 9479
  73+ 9479              vpage:                    ; page with vram bit set
  74+ 9479 00           .mult:    db      0
  75+ 947A 00           .sqrt:    db      0
  76+ 947B 00           .scen:    db      0
  77+ 947C 00           .vram:    db      0
  78+ 947D
  79+ 947D              mob:
  80+ 947D 00 00        .posx:    dw      0
  81+ 947F 00 00        .posy:    dw      0
  82+ 9481 00 00        .posz:    dw      0
  83+ 9483
  84+ 9483              ;-------------------------------start of block stored by scene editor
  85+ 9483              scene:
  86+ 9483 00 00        .posx:    dw      0
  87+ 9485 00 00        .posy:    dw      0
  88+ 9487 00 00        .posz:    dw      0
  89+ 9489 80 01        .far:     dw      _far
  90+ 948B 00 00        .fade:    dw      _fade
  91+ 948D
  92+ 948D              light:
  93+ 948D 00 C0        .posx:    dw      #c000
  94+ 948F 70 00        .posz:    dw      #070
  95+ 9491 00           .bright:  db      #00
  96+ 9492 09           .contrs:  db      #09
  97+ 9493 00           .angle:   db      0
  98+ 9494 00           .leff:    db      0
  99+ 9495 00           .reff:    db      0
 100+ 9496 08           .shade:   db      #08
 101+ 9497 00           .mode:    db      0             ; bit 0: 0 = angle is calculated from high byte of posx
 102+ 9498                                              ;        1 = angle is calculated from low byte of posx
 103+ 9498                                              ; bit 1: 0 = light_z is ignored for brightness
 104+ 9498                                              ;        1 = (object_z - light_z)<0 dark, >0 bright
 105+ 9498              screen:
 106+ 9498 7F 00        .posx:    dw      127
 107+ 949A 40 00        .posy:    dw      64
 108+ 949C 08           .cltop:   db      8
 109+ 949D BF           .clbot:   db      191
 110+ 949E 05           .color:   db      5
 111+ 949F
 112+ 949F              currObj:
 113+ 949F 00 00        .ptr:     dw      0                                ; current object pointer
 114+ 94A1 00           .angle:   db      0
 115+ 94A2 00           .ldata:   db      0                                ; used for left side (store previous pointer)
 116+ 94A3 00 00        .posx16:  dw      0                                ; temporary position x + x_offset of currently drawn segment
 117+ 94A5              ;-----
 118+ 94A5              ;sceneSetup
 119+ 94A5              ;.len:  = sceneSetup - scene
 120+ 94A5
 121+ 94A5              sceneSetup.len = $ - scene
 122+ 94A5
 123+ 94A5              ;-------------------------------end of saved block
 124+ 94A5              ;        display "scene setup length:",sceneSetup.len
 125+ 94A5
 126+ 94A5              init:
 127+ 94A5                      display "rotoid module     :",_rt, " len:",init-_rt
 128+ 94A5                      ReturnVramAfterInterrupt
 128+ 94A5 3E FF       >          ld    a,#ff
 128+ 94A7 32 39 BC    >          ld    (@imask),a
 128+ 94AA AF          >          xor   a
 128+ 94AB 32 3B BC    >          ld    (@ivram),a
 129+ 94AE                      callix  iniDthPattern, dthData.v0
 129+ 94AE DD 21 1C 7D >         ld      ix,dthData.v0
 129+ 94B2 CD 32 AD    >         call    iniDthPattern
 130+ 94B5              ;---
 131+ 94B5              ; rotoid tables to calculate circle and shadow
 132+ 94B5                      callix  scrClear,#0400
 132+ 94B5 DD 21 00 04 >         ld      ix,#0400
 132+ 94B9 CD 41 9C    >         call    scrClear
 133+ 94BC AF                   xor     a
 134+ 94BD D3 FE                out     (#fe),a
 135+ 94BF
 136+ 94BF                      IFDEF _multabXls
 137+ 94BF ~                      rscLoad      KRscMultab, res_tab
 138+ 94BF ~                      rscUnpackTMP KRscMultab, res_tab
 139+ 94BF ~                      ld    a,pgMult
 140+ 94BF ~                      page_c
 141+ 94BF ~                      ld    hl,#c000
 142+ 94BF ~                      ld    bc,#4000
 143+ 94BF ~                      call  rsc.reverse
 144+ 94BF                      ENDIF
 145+ 94BF
 146+ 94BF                      IFDEF _multabBmp
 147+ 94BF                        rscLoad      KRscMultab, res_tab
 147+ 94BF 3E 0E       >         ld      a,KRscMultab
 147+ 94C1 11 57 B0    >         ld      de,res_tab
 147+ 94C4 CD CA 77    >         call    rsc.load
 148+ 94C7                        rscUnpackTMP KRscMultab, res_tab
 148+ 94C7 3E 0E       >         ld      a,KRscMultab
 148+ 94C9 11 57 B0    >         ld      de,res_tab
 148+ 94CC CD 19 78    >         call    rsc.unpacktmp
 149+ 94CF 3E 56                  ld    a,pgMult
 150+ 94D1                        page_c
 150+ 94D1 CD 5A BF    >         call   @apage
 151+ 94D4 CD F6 A6               call    mkmultab_bitmap
 152+ 94D7                      ENDIF
 153+ 94D7
 154+ 94D7                      IFDEF _multabClc
 155+ 94D7 ~                      ld    a,pgMult
 156+ 94D7 ~                      page_c
 157+ 94D7 ~                      call    mkmultab_calc
 158+ 94D7                      ENDIF
 159+ 94D7
 160+ 94D7                      page_ar pgSqrt
 160+ 94D7 3E 54       >        ld      a,pgSqrt
 160+ 94D9             >        page_a
 160+ 94D9 32 68 81    >         ld      (@page),a
 160+ 94DC             >         page_am
 160+ 94DC D3 FD       >         out    (#fd),a
 161+ 94DE CD 13 A1             call    mksqrt
 162+ 94E1 CD F8 A0             call    mkpwrt
 163+ 94E4              ; line routine tables
 164+ 94E4 CD 49 9C             call    mkldeftab_du
 165+ 94E7 CD 68 9C             call    mklinetab
 166+ 94EA 21 00 93             ld      hl,sintab
 167+ 94ED 3E 7F                ld      a,#7f
 168+ 94EF 0E 00                ld      c,00
 169+ 94F1 CD 00 6F             call    @mksnt
 170+ 94F4                      page_ar pgScen
 170+ 94F4 3E 50       >        ld      a,pgScen
 170+ 94F6             >        page_a
 170+ 94F6 32 68 81    >         ld      (@page),a
 170+ 94F9             >         page_am
 170+ 94F9 D3 FD       >         out    (#fd),a
 171+ 94FB 21 AA C4             ld      hl,scrplay.part1
 172+ 94FE              ;        ld      hl,scrplay.sgedit
 173+ 94FE CD E7 95             call    setScene.init
 174+ 9501 C9                   ret
 175+ 9502
 176+ 9502              ; input page where gfx will be drawn
 177+ 9502              ; puts appropriate page numbers into variables
 178+ 9502              ; !! returns in and with A in scene page !!
 179+ 9502              setPageVars:
 180+ 9502 32 21 95             ld      (run.vpage+1),a
 181+ 9505 E6 08                and     8
 182+ 9507 32 7C 94             ld      (vpage.vram),a
 183+ 950A 4F                   ld      c,a
 184+ 950B F6 56                or      pgMult
 185+ 950D 32 79 94             ld      (vpage.mult),a
 186+ 9510 79                   ld      a,c
 187+ 9511 F6 54                or      pgSqrt
 188+ 9513 32 7A 94             ld      (vpage.sqrt),a
 189+ 9516 79                   ld      a,c
 190+ 9517 F6 50                or      pgScen
 191+ 9519 32 7B 94             ld      (vpage.scen),a
 192+ 951C                      page_c
 192+ 951C CD 5A BF    >         call   @apage
 193+ 951F C9                   ret
 194+ 9520              ;---------------------------------
 195+ 9520              run:
 196+ 9520 3E 57        .vpage: ld      a,#57                          ; drawing page & screen
 197+ 9522 EE 0A                xor     #0a                           ; XOR #0a during normal execution
 198+ 9524
 199+ 9524                      if 0>0
 200+ 9524 ~                     ld      a,o5
 201+ 9524                      endif
 202+ 9524 CD 02 95             call    setPageVars
 203+ 9527
 204+ 9527                      debug_border_init
 204+ 9527             >        ifdef debug
 204+ 9527 ~           >          push af
 204+ 9527 ~           >          xor  a
 204+ 9527 ~           >          ld   (dbg.border),a
 204+ 9527 ~           >          out  (#fe),a
 204+ 9527 ~           >          pop  af
 204+ 9527             >        endif
 205+ 9527              ;---------------------------------
 206+ 9527 37           .scene: scf                                   ; cnmScreenplayEnable / Disable
 207+ 9528 DC F9 95             call    c,setScene.run
 208+ 952B
 209+ 952B 21 9B C5     .dptr1: ld      hl,s_edit.erase
 210+ 952E CD 64 6B             call    @exeptr                       ;call always
 211+ 9531
 212+ 9531 21 A1 C5     .dptr2: ld      hl,s_edit.draw
 213+ 9534 CD 64 6B     .dcall: call    @exeptr                       ; modify to run once new scene is initiated
 214+ 9537
 215+ 9537 21 A7 C5     .dptr3: ld      hl,s_edit.anim                ; call animation
 216+ 953A 37           .aonof: scf                                   ; toggle on/off
 217+ 953B DC 64 6B             call    c,@exeptr
 218+ 953E
 219+ 953E 3E 00        .srot:  ld      a,0
 220+ 9540 0F                   rrca
 221+ 9541 32 3F 95             ld      (.srot+1),a
 222+ 9544 D0                   ret     nc                            ; ret until all object are erased
 223+ 9545
 224+ 9545              ;-- set new scene
 225+ 9545 DD 21 55 55  .cont:  ld      ix,#5555                      ; set new object data pointers
 226+ 9549 AF                   xor     a
 227+ 954A 32 3F 95             ld      (run.srot+1),a
 228+ 954D 21 64 6B             ld      hl,@exeptr
 229+ 9550 22 35 95             ld      (run.dcall+1),hl
 230+ 9553              ;---
 231+ 9553 DD 6E 04 DD          ld      hl,(ix+scnptr.erase)
 231+ 9557 66 05
 232+ 9559 22 2C 95             ld      (run.dptr1+1),hl              ; erase
 233+ 955C DD 6E 06 DD          ld      hl,(ix+scnptr.draw)
 233+ 9560 66 07
 234+ 9562 22 32 95             ld      (run.dptr2+1),hl              ; draw
 235+ 9565 22 A3 95             ld      (run.dptr4+1),hl              ; draw in postinit (fade in draw to vram0)
 236+ 9568 DD 6E 08 DD          ld      hl,(ix+scnptr.anim)
 236+ 956C 66 09
 237+ 956E 22 38 95             ld      (run.dptr3+1),hl              ; anim
 238+ 9571 DD 6E 02 DD          ld      hl,(ix+scnptr.pini)
 238+ 9575 66 03
 239+ 9577 22 D8 95             ld      (.pinicall+1),hl
 240+ 957A
 241+ 957A 21 85 95             ld      hl,.postinit
 242+ 957D E5                   push    hl
 243+ 957E DD 6E 00 DD          ld      hl,(ix+scnptr.init)
 243+ 9582 66 01
 244+ 9584 E9                   jp      (hl)                          ; initialize scene
 245+ 9585
 246+ 9585              ;--- fade in
 247+ 9585              .postinit:
 248+ 9585 3E 55                ld      a,#55                         ; modified from setScene (option for scene defined in _rt_scenes.a80)
 249+ 9587 E6 10                and     #10                           ; KSceneFadeIn
 250+ 9589 28 4C                jr      z,.pinicall
 251+ 958B              ;---
 252+ 958B 3E 5D                ld      a,#55+8
 253+ 958D CD 02 95             call    setPageVars
 254+ 9590
 255+ 9590 3E 5F                ld      a,#57+8
 256+ 9592                      page_c
 256+ 9592 CD 5A BF    >         call   @apage
 257+ 9595
 258+ 9595 26 D8                ld      h,#d8
 259+ 9597 1E 00                ld      e,#00
 260+ 9599 CD 67 6C             call    mmu.clatr
 261+ 959C
 262+ 959C 3A 7B 94             ld      a,(vpage.scen)
 263+ 959F                      page_c
 263+ 959F CD 5A BF    >         call   @apage
 264+ 95A2
 265+ 95A2 21 A1 C5     .dptr4: ld      hl,s_edit.draw                ; draw objects on the screen
 266+ 95A5 CD 64 6B             call    @exeptr
 267+ 95A8
 268+ 95A8 3E 5F                ld      a,#57+8
 269+ 95AA                      page_c
 269+ 95AA CD 5A BF    >         call   @apage
 270+ 95AD
 271+ 95AD 21 00 40             ld      hl,#4000                      ; copy pixels to vram1
 272+ 95B0 11 00 C0             ld      de,#c000
 273+ 95B3 01 00 18             ld      bc,#1800
 274+ 95B6 ED B0                ldir
 275+ 95B8
 276+ 95B8 3A 86 95             ld      a,(.postinit+1)               ; KSceneFadeIn check
 277+ 95BB E6 20                and     #20
 278+ 95BD 28 18                jr      z,.pinicall
 279+ 95BF              ;---
 280+ 95BF CD 73 74             call    egl.atrFadeIn.ini
 281+ 95C2 06 08                ld      b,#08                         ; fade in
 282+ 95C4 D9           2       exx
 283+ 95C5 76                   halt
 284+ 95C6 76                   halt
 285+ 95C7 3A 00 58             ld      a,(#5800)
 286+ 95CA 0F                   rrca
 287+ 95CB 0F                   rrca
 288+ 95CC 0F                   rrca
 289+ 95CD E6 07                and     7
 290+ 95CF D3 FE                out     (#fe),a
 291+ 95D1 CD 48 74             call    egl.atrFadeIn.run
 292+ 95D4 D9                   exx
 293+ 95D5 10 ED                djnz    2B
 294+ 95D7
 295+ 95D7              .pinicall:
 296+ 95D7 21 55 55             ld      hl,#5555
 297+ 95DA              ;        debug_border_halt 3
 298+ 95DA 7C                   ld      a,h
 299+ 95DB B5                   or      l
 300+ 95DC C8                   ret     z
 301+ 95DD 3A 7B 94             ld      a,(vpage.scen)
 302+ 95E0                      page_c
 302+ 95E0 CD 5A BF    >         call   @apage
 303+ 95E3 E9                   jp      (hl)
 304+ 95E4
 305+ 95E4              ;---------------------------------
 306+ 95E4              ; input IX
 307+ 95E4              setScene:
 308+ 95E4 DD E5                push    ix
 309+ 95E6 E1                   pop     hl
 310+ 95E7 22 9E C4     .init:  ld      (scrplay),hl
 311+ 95EA 18 1A                jr      .icnt
 312+ 95EC              ;        ld      (run.cont+2),ix
 313+ 95EC              ;--- modify drawing calls to erase both screens
 314+ 95EC              .cont:
 315+ 95EC 3E 04                ld      a,#04
 316+ 95EE 32 3F 95             ld      (run.srot+1),a                ; make sure objects are erased
 317+ 95F1 00           .nodel: nop                                   ; this will be modified to ret for continuous scene cut
 318+ 95F2 21 0E BF             ld      hl,@dummy
 319+ 95F5 22 35 95             ld      (run.dcall+1),hl
 320+ 95F8 C9                   ret
 321+ 95F9
 322+ 95F9 21 00 00     .run:   ld      hl,0                          ; modified
 323+ 95FC 2B                   dec     hl
 324+ 95FD 22 FA 95             ld      (.run+1),hl
 325+ 9600 7C                   ld      a,h
 326+ 9601 B5                   or      l
 327+ 9602 C0                   ret     nz
 328+ 9603
 329+ 9603              .next:
 330+ 9603 2A 9E C4             ld      hl,(scrplay)
 331+ 9606 4E           .icnt:  ld      c,(hl)
 331+ 9607 23             inc hl               ; bc=pointer to scene block
 332+ 9608 46                   ld      b,(hl)
 332+ 9609 23             inc hl
 333+ 960A 5E                   ld      e,(hl)
 333+ 960B 23             inc hl               ; de=scene duration (d-reg 7bit=1 scene is not cleared)
 334+ 960C 56                   ld      d,(hl)
 334+ 960D 23             inc hl
 335+ 960E 79                   ld      a,c
 336+ 960F B0                   or      b
 337+ 9610 C8                   ret     z                             ; end of screenplay
 338+ 9611 ED 43 47 95          ld      (run.cont+2),bc               ; set scene block at main run code
 339+ 9615 ED 53 FA 95          ld      (.run+1),de                   ; store new counter of scene iterations
 340+ 9619
 341+ 9619 4E                   ld      c,(hl)
 341+ 961A 23             inc hl               ; a - scene options
 342+ 961B 22 9E C4             ld      (scrplay),hl
 343+ 961E              ;----
 344+ 961E 79                   ld      a,c
 345+ 961F 32 86 95             ld      (run.postinit+1),a
 346+ 9622 E6 80                and     #80                           ; KSceneNoCut   bit7 = continuous scene - transitions without erasing objects
 347+ 9624 C6 49                add     a,#49                         ; use RET or (LD C,C = NOP)
 348+ 9626 32 F1 95             ld      (.nodel),a
 349+ 9629 CB 71                bit     6,c                           ; KSceneFadeOut bit6 = fade out scene with attrs
 350+ 962B C4 CC 73             call    nz,egl.atrFadeFull
 351+ 962E C3 EC 95             jp      setScene.cont
 352+ 9631
 353+ 9631              sceneCnt: = setScene.run+1                    ; expose count of render passes for current scene
 354+ 9631
 355+ 9631              ;---------------------------------
 356+ 9631              ; interpret data and draw into buffer
 357+ 9631              drawObject:
 358+ 9631 CD 2E A3             call    calcRight
 359+ 9634              ; ----  is object visible?
 360+ 9634 3A 72 94             ld      a,(lsxy.clip)
 361+ 9637 FE 02                cp      2
 362+ 9639 D0                   ret     nc                 ; no - ret and go to next object
 363+ 963A              ; ----  yes, do the rest
 364+ 963A CD 8B 9F             call    calcLeft
 365+ 963D CD EC 9E             call    calcMid
 366+ 9640              ; draw data
 367+ 9640 3A 21 95             ld      a,(run.vpage+1)
 368+ 9643                      page_c
 368+ 9643 CD 5A BF    >         call   @apage
 369+ 9646 CD B1 9C             call    draw16
 370+ 9649 3A 7B 94             ld      a,(vpage.scen)
 371+ 964C                      page_c
 371+ 964C CD 5A BF    >         call   @apage
 372+ 964F C9                   ret
 373+ 9650
 374+ 9650              ;---------------------------------
 375+ 9650              animate:
 376+ 9650              ; this service is used to rotate object "behind" and "in front" of other objects
 377+ 9650              ; requires two objects to be defined - one is first (back) of in the MOB object, second is last (front) in the MOB object
 378+ 9650              ; routine then swaps option bit to hidden/visible between front/back objects based on the angle
 379+ 9650              .rotoid_one_hidden:
 380+ 9650 DD 7E 00             ld    a,(ix+objani.angle)
 381+ 9653 DD 5E 01             ld    e,(ix+objani.amplitude)
 382+ 9656 CD 0E B0             call  math.cos
 383+ 9659 6F                   ld    l,a
 384+ 965A 87                   add   a,a
 385+ 965B 9F                   sbc   a,a
 386+ 965C 67                   ld    h,a
 387+ 965D DD 4E 02             ld    c,(ix+objani.offset)
 388+ 9660 06 00                ld    b,0
 389+ 9662 09                   add   hl,bc
 390+ 9663
 391+ 9663 E5                   push  hl
 392+ 9664 3A 67 81             ld    a,(@fps)
 393+ 9667 5F                   ld    e,a
 394+ 9668 DD 7E 03             ld    a,(ix+objani.speed)
 395+ 966B 6F                   ld    l,a
 396+ 966C DD CB 04 46          bit   0,(ix+objani.options)
 397+ 9670 CC 71 AD             call  z,math.mul0808
 398+ 9673 DD 4E 00             ld    c,(ix+objani.angle)
 399+ 9676 7D                   ld    a,l
 400+ 9677 81                   add   a,c
 401+ 9678 DD 77 00             ld    (ix+objani.angle),a
 402+ 967B
 403+ 967B E1                   pop   hl
 404+ 967C EB                   ex    de,hl
 405+ 967D 79                   ld    a,c
 406+ 967E A7                   and   a
 407+ 967F FA 9C 96             jp    m,.rotoid_one_hidden_back
 408+ 9682 DD 6E 07 DD          ld    hl,(ix+objani.front_pos)
 408+ 9686 66 08
 409+ 9688 73                   ld    (hl),e
 409+ 9689 23             inc hl
 409+ 968A 72             ld (hl),d
 410+ 968B DD 6E 0B DD          ld    hl,(ix+objani.front_options)
 410+ 968F 66 0C
 411+ 9691 CB BE                res   7,(hl)
 412+ 9693 DD 6E 09 DD          ld    hl,(ix+objani.back_options)
 412+ 9697 66 0A
 413+ 9699 CB FE                set   7,(hl)
 414+ 969B C9                   ret
 415+ 969C
 416+ 969C              .rotoid_one_hidden_back:
 417+ 969C DD 6E 05 DD          ld    hl,(ix+objani.back_pos)
 417+ 96A0 66 06
 418+ 96A2 73                   ld    (hl),e
 418+ 96A3 23             inc hl
 418+ 96A4 72             ld (hl),d
 419+ 96A5 DD 6E 0B DD          ld    hl,(ix+objani.front_options)
 419+ 96A9 66 0C
 420+ 96AB CB FE                set   7,(hl)
 421+ 96AD DD 6E 09 DD          ld    hl,(ix+objani.back_options)
 421+ 96B1 66 0A
 422+ 96B3 CB BE                res   7,(hl)
 423+ 96B5 C9                   ret
 424+ 96B6
 425+ 96B6              ; this routine just uses cos table to alternate a byte in memory
 426+ 96B6              .sin:
 427+ 96B6 DD 7E 00             ld    a,(ix+anicos.angle)
 428+ 96B9 DD 5E 01             ld    e,(ix+anicos.amplitude)
 429+ 96BC CD 0E B0             call  math.cos
 430+ 96BF 6F                   ld    l,a
 431+ 96C0 87                   add   a,a
 432+ 96C1 9F                   sbc   a,a
 433+ 96C2 67                   ld    h,a
 434+ 96C3 DD 7E 02             ld    a,(ix+anicos.offset)
 435+ 96C6 4F                   ld    c,a
 436+ 96C7 87                   add   a,a
 437+ 96C8 9F                   sbc   a,a
 438+ 96C9 47                   ld    b,a
 439+ 96CA 09                   add   hl,bc
 440+ 96CB E5                   push  hl
 441+ 96CC
 442+ 96CC 3A 67 81             ld    a,(@fps)
 443+ 96CF 5F                   ld    e,a
 444+ 96D0 DD 7E 03             ld    a,(ix+anicos.speed)
 445+ 96D3 6F                   ld    l,a
 446+ 96D4 DD CB 04 46          bit   0,(ix+anicos.options)
 447+ 96D8 CC 71 AD             call  z,math.mul0808
 448+ 96DB DD 4E 00             ld    c,(ix+anicos.angle)
 449+ 96DE 7D                   ld    a,l
 450+ 96DF 81                   add   a,c
 451+ 96E0 DD 77 00             ld    (ix+anicos.angle),a
 452+ 96E3
 453+ 96E3 E1                   pop   hl
 454+ 96E4 EB                   ex    de,hl
 455+ 96E5 DD 6E 05 DD          ld    hl,(ix+anicos.mod_ptr)
 455+ 96E9 66 06
 456+ 96EB 73                   ld    (hl),e
 456+ 96EC 23             inc hl
 456+ 96ED 72             ld (hl),d
 457+ 96EE C9                   ret
 458+ 96EF
 459+ 96EF              ; palette changing routine. Routine gets data from table and alters byte specified
 460+ 96EF              ; in the pointer. In case that mode is #80, it pulls two bytes from table and stores
 461+ 96EF              ; two bytes into pointer (used for leff,reff)
 462+ 96EF
 463+ 96EF              .pal_ini:
 464+ 96EF DD 36 08 01          ld    (ix+sympal.curr_cnt),1
 465+ 96F3 DD 6E 01 DD          ld    hl,(ix+sympal.pal_ptr)
 465+ 96F7 66 02
 466+ 96F9 18 44                jr    2F
 467+ 96FB
 468+ 96FB 3A 67 81     .pal:   ld    a,(@fps)
 469+ 96FE 4F                   ld    c,a
 470+ 96FF DD 7E 08             ld    a,(ix+sympal.curr_cnt)
 471+ 9702 91                   sub   c
 472+ 9703 DD 77 08             ld    (ix+sympal.curr_cnt),a
 473+ 9706 F0                   ret   p
 474+ 9707 DD 4E 05             ld    c,(ix+sympal.mode)
 475+ 970A CB 69                bit   5,c
 476+ 970C              ;        bit   5,(ix+sympal.mode)             ; bit 5=1 - #01 endmark
 477+ 970C 3E 3D                ld    a,   #3d
 478+ 970E 20 02                jr    nz,1F
 479+ 9710 3E 3C                ld    a,   #3c
 480+ 9712 32 28 97     1       ld    (.test),a
 481+ 9715 DD 7E 00             ld    a,(ix+sympal.pal_cnt)
 482+ 9718 DD 77 08             ld    (ix+sympal.curr_cnt),a
 483+ 971B DD 6E 06 DD          ld    hl,(ix+sympal.pal_cptr)
 483+ 971F 66 07
 484+ 9721 DD 5E 03 DD          ld    de,(ix+sympal.val_ptr)
 484+ 9725 56 04
 485+ 9727 7E                   ld    a,(hl)
 486+ 9728 3C           .test:  inc   a
 487+ 9729 20 0A                jr    nz,1F
 488+ 972B 2B                   dec   hl                              ; get back previous value
 489+ 972C CB 71                bit   6,c
 490+ 972E              ;        bit   6,(ix+sympal.mode)             ; bit 6=1 - do not repeat sequence
 491+ 972E C0                   ret   nz
 492+ 972F DD 6E 01 DD          ld    hl,(ix+sympal.pal_ptr)
 492+ 9733 66 02
 493+ 9735 ED A0        1       ldi
 494+ 9737 DD CB 05 7E          bit   7,(ix+sympal.mode)
 495+ 973B 28 02                jr    z,2F
 496+ 973D ED A0                ldi
 497+ 973F DD 75 06 DD  2       ld    (ix+sympal.pal_cptr),hl
 497+ 9743 74 07
 498+ 9745 C9                   ret
 499+ 9746
 500+ 9746              ; link objects. Routine gets value FROM address and puts it to destination address
 501+ 9746              ; value is modified by offset
 502+ 9746              .link:
 503+ 9746 DD 4E 04 DD          ld    bc,(ix+link.offset)
 503+ 974A 46 05
 504+ 974C DD 6E 00 DD          ld    hl,(ix+link.from_ptr)
 504+ 9750 66 01
 505+ 9752 5E                   ld    e,(hl)
 506+ 9753 23                   inc   hl
 507+ 9754 56                   ld    d,(hl)
 508+ 9755 EB                   ex    de,hl
 509+ 9756 09                   add   hl,bc
 510+ 9757 EB                   ex    de,hl
 511+ 9758 DD 6E 02 DD          ld    hl,(ix+link.to_ptr)
 511+ 975C 66 03
 512+ 975E 73                   ld    (hl),e
 513+ 975F 23                   inc   hl
 514+ 9760 72                   ld    (hl),d
 515+ 9761 C9                   ret
 516+ 9762
 517+ 9762              .linkxyz:
 518+ 9762 DD 6E 00 DD          ld    hl,(ix+linkxyz.from_ptr)
 518+ 9766 66 01
 519+ 9768 5E 23 56 23          ldi   de,(hl)
 520+ 976C EB                   ex  de,hl
 521+ 976D DD 4E 04 DD           ld    bc,(ix+linkxyz.offset_x)
 521+ 9771 46 05
 522+ 9773 09                    add   hl,bc
 523+ 9774 E5                    push  hl
 524+ 9775 EB                   ex de,hl
 525+ 9776
 526+ 9776 5E 23 56 23          ldi   de,(hl)
 527+ 977A EB                   ex  de,hl
 528+ 977B DD 4E 06 DD           ld    bc,(ix+linkxyz.offset_y)
 528+ 977F 46 07
 529+ 9781 09                    add   hl,bc
 530+ 9782 E5                    push  hl
 531+ 9783 EB                   ex de,hl
 532+ 9784
 533+ 9784 5E 23 56 23          ldi   de,(hl)
 534+ 9788 EB                   ex  de,hl
 535+ 9789 DD 4E 08 DD           ld    bc,(ix+linkxyz.offset_z)
 535+ 978D 46 09
 536+ 978F 09                    add   hl,bc
 537+ 9790 22 A4 97              ld    (.modz+1),hl
 538+ 9793              ;--
 539+ 9793 DD 6E 02 DD          ld    hl,(ix+linkxyz.to_ptr)
 539+ 9797 66 03
 540+ 9799 D1                   pop   de
 541+ 979A C1                   pop   bc
 542+ 979B 71 23 70 23          ldi   (hl),bc
 543+ 979F 73 23 72 23          ldi   (hl),de
 544+ 97A3 11 55 55     .modz:  ld    de,#5555
 545+ 97A6 73 23 72 2B          ld    (hl),de
 546+ 97AA C9                   ret
 547+ 97AB
 548+ 97AB              ; modifies hidden bit of the objdef in every loop. Making stroboscopic effect
 549+ 97AB              ; e.g. used for flame on a rocket
 550+ 97AB              .strobe:
 551+ 97AB DD 7E 08             ld      a,(ix+objdef.options)
 552+ 97AE EE 80                xor     #80
 553+ 97B0 DD 77 08             ld      (ix+objdef.options),a
 554+ 97B3 C9                   ret
 555+ 97B4 DD CB 08 FE  .hide:  set     7,(ix+objdef.options)
 556+ 97B8 C9                   ret
 557+ 97B9 DD CB 08 BE  .show:  res     7,(ix+objdef.options)
 558+ 97BD C9                   ret
 559+ 97BE              ;---------------------------------
 560+ 97BE              ;-- move xyz
 561+ 97BE              ; param No:   Description:
 562+ 97BE              ;        1:  offset to base address
 563+ 97BE              ;        2:  base address
 564+ 97BE              ;      3-6:  increment x,y,z
 565+ 97BE              ; examples:
 566+ 97BE              ;          dw moveXYZ, 0       , scene, #0001,#fffa,#fff8                 ; move scene
 567+ 97BE              ;          dw moveXYZ, mobdef.posx, mobStat, #0000, #0000, #0001          ; move object mobStat in position X
 568+ 97BE
 569+ 97BE              .moveXYZf:
 570+ 97BE 3A 67 81             ld      a,(@fps)
 571+ 97C1 18 02                jr      1F
 572+ 97C3              .moveXYZ:
 573+ 97C3 3E 01                ld      a,1
 574+ 97C5 32 2C B0     1       ld      (fpstmp),a
 575+ 97C8 E1                   pop     hl                  ;
 576+ 97C9 E1                   pop     hl                  ; address of params
 577+ 97CA 4E                   ld      c,(hl)
 577+ 97CB 23             inc     hl ; x-increment
 578+ 97CC 46                   ld      b,(hl)
 578+ 97CD 23             inc     hl
 579+ 97CE DD 5E 00 DD          ld      de,(ix+0)
 579+ 97D2 56 01
 580+ 97D4 EB                   ex      de,hl
 581+ 97D5              ;        ld      a,(fpstmp)
 582+ 97D5 09           1       add     hl,bc
 583+ 97D6 3D                   dec     a
 584+ 97D7 20 FC                jr      nz,1B
 585+ 97D9 DD 75 00 DD          ld      (ix+0),hl
 585+ 97DD 74 01
 586+ 97DF EB                   ex      de,hl
 587+ 97E0 4E                   ld      c,(hl)
 587+ 97E1 23             inc     hl ; y-increment
 588+ 97E2 46                   ld      b,(hl)
 588+ 97E3 23             inc     hl
 589+ 97E4 DD 5E 02 DD          ld      de,(ix+2)
 589+ 97E8 56 03
 590+ 97EA EB                   ex      de,hl
 591+ 97EB 3A 2C B0             ld      a,(fpstmp)
 592+ 97EE 09           1       add     hl,bc
 593+ 97EF 3D                   dec     a
 594+ 97F0 20 FC                jr      nz,1B
 595+ 97F2 DD 75 02 DD          ld      (ix+2),hl
 595+ 97F6 74 03
 596+ 97F8 EB                   ex      de,hl
 597+ 97F9 4E                   ld      c,(hl)
 597+ 97FA 23             inc     hl ; z-increment
 598+ 97FB 46                   ld      b,(hl)
 598+ 97FC 23             inc     hl
 599+ 97FD DD 5E 04 DD          ld      de,(ix+4)
 599+ 9801 56 05
 600+ 9803 EB                   ex      de,hl
 601+ 9804 3A 2C B0             ld      a,(fpstmp)
 602+ 9807 09           1       add     hl,bc
 603+ 9808 3D                   dec     a
 604+ 9809 20 FC                jr      nz,1B
 605+ 980B DD 75 04 DD          ld      (ix+4),hl
 605+ 980F 74 05
 606+ 9811 EB                   ex      de,hl
 607+ 9812 E5                   push    hl                  ; hl=address of next execute block
 608+ 9813 C3 65 6B             jp      @exeptr.loop        ; go back to exeptr
 609+ 9816
 610+ 9816              ;---    accelerated cyclic movement
 611+ 9816                      include "demo/rotoid/anim_move_cycl16.a80"
# file opened: ./demo/rotoid/anim_move_cycl16.a80
   1++9816
   2++9816 ~            /* -- data structure
   3++9816 ~                    db      count_reset
   4++9816 ~                    db      delay
   5++9816 ~                    db      count_current - bit 7 = 1 for initial run of COS function
   6++9816 ~                    dw      s (amplitude) - used for COS function to add with (IX) - COS(0)=amplitude
   7++9816 ~                    dw      accel_temp
   8++9816 ~                    dw      accel_adder
   9++9816 ~                    dw      v0
  10++9816 ~            removed:
  11++9816 ~                    db      offset to base address
  12++9816 ~            */
  13++9816
  14++9816              ; v2 -------
  15++9816              .moveCyc:
  16++9816 E1                   pop     hl
  17++9817 E1                   pop     hl
  18++9818 5E                   ld      e,(hl)
  18++9819 23             inc hl           ; count reset
  19++981A              ;- delay
  20++981A CB 7E                bit     7,(hl)
  21++981C CA 2C 98             jp      z,1F
  22++981F              ;- first cos loop
  23++981F CB BE                res     7,(hl)                     ; reset first loop in COS
  24++9821 23                   inc     hl
  25++9822 23                   inc     hl                         ; skip count current
  26++9823 5E                   ld      e,(hl)                     ; amplitude has to be set
  27++9824 23                   inc     hl
  28++9825 56                   ld      d,(hl)
  29++9826 01 07 00             ld      bc,7
  30++9829 09                   add     hl,bc
  31++982A 18 4E                jr      .cosjp
  32++982C
  33++982C 35           1       dec     (hl)                       ; decrease counter of delay        inc     hl
  34++982D FA 38 98             jp      m,1F                       ; z=delay expired
  35++9830 01 0A 00             ld      bc,10
  36++9833 09                   add     hl,bc
  37++9834 E5                   push    hl
  38++9835 C3 65 6B             jp      @exeptr.loop               ; no action, return
  39++9838
  40++9838 34           1       inc     (hl)
  41++9839 23                   inc     hl
  42++983A              ;- counter
  43++983A 35           1       dec     (hl)                       ; decrease counter of iterations
  44++983B 20 19                jr      nz,1F                      ; c=run core and continue in countdowns
  45++983D E5                   push    hl
  46++983E 23                   inc     hl                         ; skip counter
  47++983F 23                   inc     hl                         ; skip s / amplitude
  48++9840 23                   inc     hl
  49++9841
  50++9841 AF                   xor     a                          ; reset speed_current
  51++9842 77                   ld      (hl),a
  51++9843 23             inc hl
  52++9844 77                   ld      (hl),a
  52++9845 23             inc hl
  53++9846              ;--
  54++9846 96                   sub     (hl)
  55++9847 77                   ld      (hl),a
  55++9848 23             inc hl
  56++9849 9F                   sbc     a,a
  57++984A 96                   sub     (hl)
  58++984B 77                   ld      (hl),a
  58++984C 23             inc hl
  59++984D AF                   xor     a
  60++984E 96                   sub     (hl)
  61++984F 77                   ld      (hl),a
  61++9850 23             inc hl           ; neg v0
  62++9851 9F                   sbc     a,a
  63++9852 96                   sub     (hl)
  64++9853 77                   ld      (hl),a
  65++9854
  66++9854 E1                   pop     hl
  67++9855 73                   ld      (hl),e                     ; reset counter
  68++9856              ;- core
  69++9856 23           1       inc     hl                         ; move counter
  70++9857 23                   inc     hl                         ; skip s (amplitude)
  71++9858 23                   inc     hl
  72++9859 22 67 98             ld      (.ctmp+1),hl               ; save temp address
  73++985C 5E                   ld      e,(hl)
  73++985D 23             inc hl           ; temp
  74++985E 56                   ld      d,(hl)
  74++985F 23             inc hl           ;
  75++9860 4E                   ld      c,(hl)
  75++9861 23             inc hl           ; accel_adder
  76++9862 46                   ld      b,(hl)
  76++9863 23             inc hl           ;
  77++9864 EB                   ex      de,hl
  78++9865 09                   add     hl,bc
  79++9866 22 55 55     .ctmp:  ld      (#5555),hl                 ; store current speed value
  80++9869 EB                   ex      de,hl
  81++986A 4E                   ld      c,(hl)
  81++986B 23             inc hl           ; v0
  82++986C 46                   ld      b,(hl)
  82++986D 23             inc hl           ;
  83++986E EB                   ex      de,hl
  84++986F 09                   add     hl,bc
  85++9870
  86++9870 7D                   ld      a,l                        ;
  87++9871 87                   add     a,a                        ; if lsb >80 then round up!
  88++9872 3E 00                ld      a,0                        ;
  89++9874 8C                   adc     a,h                        ; => cy=1 h=h+1
  90++9875
  91++9875 6F                   ld      l,a
  92++9876 87                   add     a,a
  93++9877 9F                   sbc     a,a
  94++9878 67                   ld      h,a
  95++9879 EB                   ex      de,hl
  96++987A
  97++987A E5           .cosjp: push    hl
  98++987B DD 6E 00             ld      l,(ix+0)
  99++987E DD 66 01             ld      h,(ix+1)                   ; hl=current value
 100++9881 19                   add     hl,de                      ; de=increment
 101++9882 DD 75 00             ld      (ix+0),l                   ; save, exit
 102++9885 DD 74 01             ld      (ix+1),h
 103++9888 C3 65 6B             jp      @exeptr.loop
 104++988B
# file closed: ./demo/rotoid/anim_move_cycl16.a80
 612+ 988B
 613+ 988B              ;---    move with counter
 614+ 988B              ;moveCnt
 615+ 988B              ;moveCntf
 616+ 988B                      DEFINE _defAnimCnt
 617+ 988B                      include "demo/rotoid/anim_move_cnt.a80"
# file opened: ./demo/rotoid/anim_move_cnt.a80
   1++988B              .moveCntf:
   2++988B 3A 67 81             ld      a,(@fps)
   3++988E 32 2C B0             ld      (fpstmp),a
   4++9891 C3 99 98             jp      1F
   5++9894
   6++9894              .moveCnt:
   7++9894 3E 01                ld      a,1
   8++9896 32 2C B0             ld      (fpstmp),a
   9++9899 E1           1       pop     hl
  10++989A E1                   pop     hl
  11++989B 5E                   ld      e,(hl)
  11++989C 23             inc     hl        ; de=step
  12++989D 56                   ld      d,(hl)
  12++989E 23             inc     hl
  13++989F
  14++989F 3A 2C B0             ld      a,(fpstmp)
  15++98A2 ED 44                neg
  16++98A4 86                   add     a,(hl)                     ; decrease counter of delay
  17++98A5 30 07                jr      nc,1F                      ; nc=delay expired
  18++98A7 77                   ld      (hl),a                     ; c= delay more, store current counter
  19++98A8 23                   inc     hl                         ; skip iterations
  20++98A9 23                   inc     hl
  21++98AA E5                   push    hl
  22++98AB C3 65 6B             jp      @exeptr.loop               ; no action, return
  23++98AE
  24++98AE 23           1       inc     hl
  25++98AF 3A 2C B0             ld      a,(fpstmp)
  26++98B2 ED 44                neg
  27++98B4 86                   add     a,(hl)                     ; decrease counter of iterations
  28++98B5 DA BD 98             jp      c,._move                   ; c=run action
  29++98B8 23                   inc     hl
  30++98B9 E5                   push    hl
  31++98BA C3 65 6B             jp      @exeptr.loop               ; no action, return
  32++98BD
  33++98BD 77           ._move: ld      (hl),a
  33++98BE 23             inc     hl
  34++98BF E5                   push    hl
  35++98C0 DD 6E 00             ld      l,(ix+0)
  36++98C3 DD 66 01             ld      h,(ix+1)
  37++98C6 3A 2C B0             ld      a,(fpstmp)                   ; fps mod
  38++98C9 47                   ld      b,a
  39++98CA 19           1       add     hl,de
  40++98CB 10 FD                djnz    1B
  41++98CD DD 75 00             ld      (ix+0),l                   ; save, exit
  42++98D0 DD 74 01             ld      (ix+1),h
  43++98D3 C3 65 6B             jp      @exeptr.loop
  44++98D6
# file closed: ./demo/rotoid/anim_move_cnt.a80
 618+ 98D6                      include "demo/rotoid/anim_move.a80"
# file opened: ./demo/rotoid/anim_move.a80
   1++98D6              ; move object's one 16bit dimension / parametter
   2++98D6              ; ix is passed from "exeptr" = modified address
   3++98D6              ; de is obtained             = adder (d-full numbers, e-fraction)
   4++98D6
   5++98D6              .movef:
   6++98D6 3A 67 81             ld      a,(@fps)
   7++98D9 32 2C B0             ld      (fpstmp),a
   8++98DC C3 E4 98             jp      1F
   9++98DF
  10++98DF              .move:
  11++98DF 3E 01                ld      a,1
  12++98E1 32 2C B0             ld      (fpstmp),a
  13++98E4 E1           1       pop     hl
  14++98E5 E1                   pop     hl
  15++98E6
  16++98E6 5E                   ld      e,(hl)
  16++98E7 23             inc     hl        ; de=step
  17++98E8 56                   ld      d,(hl)
  17++98E9 23             inc     hl
  18++98EA
  19++98EA E5                   push    hl
  20++98EB DD 6E 00             ld      l,(ix+0)
  21++98EE DD 66 01             ld      h,(ix+1)
  22++98F1 3A 2C B0             ld      a,(fpstmp)                 ; fps mod
  23++98F4 47                   ld      b,a
  24++98F5 19           1       add     hl,de
  25++98F6 10 FD                djnz    1B
  26++98F8 DD 75 00             ld      (ix+0),l                   ; save, exit
  27++98FB DD 74 01             ld      (ix+1),h
  28++98FE C3 65 6B             jp      @exeptr.loop
  29++9901
# file closed: ./demo/rotoid/anim_move.a80
 619+ 9901
 620+ 9901              ;---    accelerated move
 621+ 9901              ;moveAcc
 622+ 9901              ;moveAccf
 623+ 9901                      DEFINE _defAnimAcc
 624+ 9901                      include "demo/rotoid/anim_move_accel.a80"
# file opened: ./demo/rotoid/anim_move_accel.a80
   1++9901 ~            /* -- data structure
   2++9901 ~                    db      delay
   3++9901 ~                    db      count
   4++9901 ~                    dw      accel_temp
   5++9901 ~                    dw      accel_adder
   6++9901 ~                    db      speed_start
   7++9901 ~                    db      speed_end
   8++9901 ~            --- removed:
   9++9901 ~                    db      offset to base address
  10++9901 ~            */
  11++9901              .moveAccf:
  12++9901 3A 67 81             ld      a,(@fps)
  13++9904 18 02                jr      1F
  14++9906
  15++9906              .moveAcc:
  16++9906 3E 01                ld      a,1
  17++9908 32 2C B0     1       ld      (fpstmp),a
  18++990B E1                   pop     hl
  19++990C E1                   pop     hl
  20++990D ED 44                neg
  21++990F              ;- delay
  22++990F 86                   add     a,(hl)                     ; decrease counter of delay        inc     hl
  23++9910 30 0A                jr      nc,1F                      ; nc=delay expired
  24++9912 77                   ld      (hl),a                     ; c= delay more, store current counter
  25++9913 23                   inc     hl                         ; count
  26++9914              .s1:
  27++9914 01 07 00             ld      bc,7
  28++9917 09                   add     hl,bc
  29++9918 E5                   push    hl
  30++9919 C3 65 6B             jp      @exeptr.loop               ; no action, return
  31++991C
  32++991C 23           1       inc     hl
  33++991D 3A 2C B0             ld      a,(fpstmp)
  34++9920 ED 44                neg
  35++9922              ;- counter
  36++9922 86                   add     a,(hl)                     ; decrease counter of iterations
  37++9923 30 EF                jr      nc,.s1
  38++9925 77                   ld      (hl),a
  38++9926 23             inc hl           ; store counter
  39++9927
  40++9927              ;- core
  41++9927 22 44 99             ld      (.tmp+2),hl                ; save temp address
  42++992A 5E                   ld      e,(hl)
  42++992B 23             inc hl           ; temp
  43++992C 56                   ld      d,(hl)
  43++992D 23             inc hl           ;
  44++992E 4E                   ld      c,(hl)
  44++992F 23             inc hl           ; add
  45++9930 46                   ld      b,(hl)
  45++9931 23             inc hl           ;
  46++9932 EB                   ex      de,hl
  47++9933 09                   add     hl,bc
  48++9934 EB                   ex      de,hl
  49++9935 4E                   ld      c,(hl)
  49++9936 23             inc hl           ; speed_start
  50++9937 46                   ld      b,(hl)
  50++9938 23             inc hl           ; speed_end
  51++9939 7B                   ld      a,e
  52++993A 87                   add     a,a
  53++993B 3E 00                ld      a,0
  54++993D 8A                   adc     a,d
  55++993E 81                   add     a,c
  56++993F B8                   cp      b
  57++9940 28 04                jr      z,1F
  58++9942 ED 53 55 55  .tmp:   ld      (#5555),de
  59++9946 5F           1       ld      e,a
  60++9947 87                   add     a,a
  61++9948 9F                   sbc     a,a
  62++9949 57                   ld      d,a                        ; de=signed adder
  63++994A
  64++994A E5                   push    hl
  65++994B DD 6E 00             ld      l,(ix+0)
  66++994E DD 66 01             ld      h,(ix+1)                   ; hl=current value
  67++9951 3A 2C B0             ld      a,(fpstmp)                 ; fps mod
  68++9954 47                   ld      b,a
  69++9955 19           1       add     hl,de                      ; de=increment
  70++9956 10 FD                djnz    1B
  71++9958 DD 75 00             ld      (ix+0),l                   ; save, exit
  72++995B DD 74 01             ld      (ix+1),h
  73++995E C3 65 6B             jp      @exeptr.loop
# file closed: ./demo/rotoid/anim_move_accel.a80
 625+ 9961
 626+ 9961              ;--- looped movement (e.g. z-scroll)
 627+ 9961              .loop:
 628+ 9961 E1                  pop    hl           ; exeptr loop ret address
 629+ 9962 E1                  pop    hl           ; address of data block
 630+ 9963
 631+ 9963 22 8E 99            ld     (.ltm1+1),hl ; store address of temp
 632+ 9966 22 85 99            ld     (.ltm2+1),hl
 633+ 9969 5E 23 56 23         ldi    de,(hl)      ; (temp)
 634+ 996D 4E 23 46 23         ldi    bc,(hl)      ; target comparator
 635+ 9971 ED 43 91 99         ld     (.ltm3+1),bc
 636+ 9975 EB                  ex     de,hl
 637+ 9976 B7 ED 42            sub    hl,bc        ; cp temp with target
 638+ 9979 08                  ex     af,af        ; save z
 639+ 997A 09                  add    hl,bc        ; get back hl
 640+ 997B EB                  ex     de,hl
 641+ 997C 4E 23 46 23         ldi    bc,(hl)      ; load increment
 642+ 9980 E5                  push   hl           ; push addr of next exelist block
 643+ 9981 EB                  ex     de,hl
 644+ 9982 09                  add    hl,bc        ; increment temp
 645+ 9983 08                  ex     af,af
 646+ 9984 22 55 55     .ltm2: ld     (#5555),hl
 647+ 9987 C2 99 99            jp     nz,1F
 648+ 998A              ; -- recover initial position
 649+ 998A 21 00 00            ld     hl,0
 650+ 998D 22 55 55     .ltm1: ld     (#5555),hl
 651+ 9990 11 55 55     .ltm3: ld     de,#5555
 652+ 9993 B7 ED 52            sub    hl,de
 653+ 9996 09                  add    hl,bc
 654+ 9997 44 4D               ld     bc,hl
 655+ 9999              ; -- increment position
 656+ 9999 DD 6E 00     1      ld     l,(ix+0)
 657+ 999C DD 66 01            ld     h,(ix+1)
 658+ 999F 09                  add    hl,bc
 659+ 99A0 DD 75 00            ld     (ix+0),l
 660+ 99A3 DD 74 01            ld     (ix+1),h
 661+ 99A6 C3 65 6B            jp     @exeptr.loop        ; go back to exeptr
 662+ 99A9
 663+ 99A9              ;-----------------------------
 664+ 99A9              ; sort and then draw
 665+ 99A9              bsort:
 666+ 99A9 E1                  pop    hl
 667+ 99AA E1                  pop    hl
 668+ 99AB
 669+ 99AB              ; copy z-positions to sort buffer
 670+ 99AB DD 7D               ld     a,xl
 671+ 99AD 32 E4 99            ld     (.sl+1),a
 672+ 99B0 22 E1 99            ld     (.dt+2),hl
 673+ 99B3 E5                  push   hl
 674+ 99B4 E5                  push   hl
 675+ 99B5 DD E1               pop    ix
 676+ 99B7 FD 21 40 94         ld     iy,sortzp
 677+ 99BB 01 04 00            ld     bc,4
 678+ 99BE 11 08 00     .l1:   ld     de,mobdef.posz
 679+ 99C1 DD 6E 02 DD         ld     hl,(ix+2)
 679+ 99C5 66 03
 680+ 99C7 19                  add    hl,de
 681+ 99C8 5E                  ld     e,(hl)
 682+ 99C9 23                  inc    hl
 683+ 99CA 56                  ld     d,(hl)
 684+ 99CB FD 73 00 FD         ld     (iy+0),de
 684+ 99CF 72 01
 685+ 99D1 FD 23               inc    iy
 686+ 99D3 FD 23               inc    iy
 687+ 99D5 DD 09               add    ix,bc
 688+ 99D7 3D                  dec    a
 689+ 99D8 C2 BE 99            jp     nz,.l1
 690+ 99DB
 691+ 99DB              ; (bubble) sort and swap pointers to objects
 692+ 99DB FD 21 40 94  .l3:   ld    iy,sortzp
 693+ 99DF DD 21 55 55  .dt:   ld    ix,#5555
 694+ 99E3 06 55        .sl:   ld    b,#55
 695+ 99E5 CB B9               res   7,c
 696+ 99E7 FD 6E 00 FD  .l2:   ld    hl,(iy+0)
 696+ 99EB 66 01
 697+ 99ED FD 5E 02 FD         ld    de,(iy+2)
 697+ 99F1 56 03
 698+ 99F3 A7                  and   a
 699+ 99F4 ED 52               sbc   hl,de
 700+ 99F6 D2 38 9A            jp    nc,.nswp
 701+ 99F9 19                  add   hl,de
 702+ 99FA
 703+ 99FA FD 73 00 FD         ld    (iy+0),de
 703+ 99FE 72 01
 704+ 9A00 FD 75 02 FD         ld    (iy+2),hl
 704+ 9A04 74 03
 705+ 9A06
 706+ 9A06 DD 6E 02 DD         ld    hl,(ix+2)       ; swap pointers
 706+ 9A0A 66 03
 707+ 9A0C DD 5E 06 DD         ld    de,(ix+6)
 707+ 9A10 56 07
 708+ 9A12 DD 73 02 DD         ld    (ix+2),de
 708+ 9A16 72 03
 709+ 9A18 DD 75 06 DD         ld    (ix+6),hl
 709+ 9A1C 74 07
 710+ 9A1E
 711+ 9A1E DD 6E 00 DD         ld    hl,(ix+0)       ; swap calls
 711+ 9A22 66 01
 712+ 9A24 DD 5E 04 DD         ld    de,(ix+4)
 712+ 9A28 56 05
 713+ 9A2A DD 73 00 DD         ld    (ix+0),de
 713+ 9A2E 72 01
 714+ 9A30 DD 75 04 DD         ld    (ix+4),hl
 714+ 9A34 74 05
 715+ 9A36
 716+ 9A36 CB F9               set   7,c
 717+ 9A38              .nswp:
 718+ 9A38 FD 23       > inc   iy
 718+ 9A3A FD 23       > inc   iy
 719+ 9A3C DD 23       > inc   ix
 719+ 9A3E DD 23       > inc   ix
 719+ 9A40 DD 23       > inc   ix
 719+ 9A42 DD 23       > inc   ix
 720+ 9A44 10 A1               djnz  .l2
 721+ 9A46 CB 79               bit   7,c
 722+ 9A48 C2 DB 99            jp    nz,.l3
 723+ 9A4B C3 65 6B            jp    @exeptr.loop   ; return
 724+ 9A4E
 725+ 9A4E              ;----------
 726+ 9A4E              ; swaps double buffered data for erasing object
 727+ 9A4E              ; lsxy+objdef.bbwdth with lsxy+objdef.bbwdth_
 728+ 9A4E              ; length is objdef.bbwdth_-objdef.bbwdth
 729+ 9A4E              swapVram:
 730+ 9A4E FD E5 E1             ld    hl,iy
 731+ 9A51              swapVram2:
 732+ 9A51 01 0D 00             ld    bc,objdef.bbwdth
 733+ 9A54 09                   add   hl,bc
 734+ 9A55 5D 54                ld    e,l,d,h
 735+ 9A57 EB                   ex    de,hl
 736+ 9A58 01 06 00             ld    bc,objdef.bbwdth_-objdef.bbwdth
 737+ 9A5B 09           .go:    add   hl,bc
 738+ 9A5C EB                   ex    de,hl
 739+ 9A5D
 740+ 9A5D 41                   ld    b,c
 741+ 9A5E 4E           .l1:    ld    c,(hl)
 742+ 9A5F 1A                   ld    a,(de)
 743+ 9A60 77                   ld    (hl),a
 744+ 9A61 79                   ld    a,c
 745+ 9A62 12                   ld    (de),a
 746+ 9A63 13                   inc   de
 747+ 9A64 23                   inc   hl
 748+ 9A65 10 F7                djnz  .l1
 749+ 9A67 C9                   ret
 750+ 9A68
 751+ 9A68              setObject:
 752+ 9A68 22 9F 94             ld    (currObj.ptr),hl
 753+ 9A6B 11 60 94             ld    de,lsxy
 754+ 9A6E 01 19 00             ld    bc,objdef
 755+ 9A71 ED B0                ldir
 756+ 9A73 3A 68 94             ld    a,(lsxy.options)
 757+ 9A76 A7                   and   a
 758+ 9A77 C9                   ret
 759+ 9A78
 760+ 9A78              setObjectOrigin:
 761+ 9A78              ; persp relative posx
 762+ 9A78 2A 64 94             ld      hl,(lsxy.rposx)
 763+ 9A7B ED 4B 81 94          ld      bc,(mob.posz)
 764+ 9A7F 3A 68 94             ld      a,(lsxy.options)
 765+ 9A82 CB 6F                bit     5,a
 766+ 9A84 CC 07 A7             call    z,persp16b
 767+ 9A87 ED 5B 7D 94          ld      de,(mob.posx)
 768+ 9A8B 19                   add     hl,de
 769+ 9A8C ED 5B 98 94          ld      de,(screen.posx)
 770+ 9A90 19                   add     hl,de
 771+ 9A91 22 69 94             ld      (lsxy.posx16),hl
 772+ 9A94              ; persp relative posy (posz in bc)
 773+ 9A94 2A 66 94             ld      hl,(lsxy.rposy)
 774+ 9A97 3A 68 94             ld      a,(lsxy.options)
 775+ 9A9A CB 6F                bit     5,a
 776+ 9A9C CC 07 A7             call    z,persp16b
 777+ 9A9F ED 5B 7F 94          ld      de,(mob.posy)
 778+ 9AA3 19                   add     hl,de
 779+ 9AA4 ED 5B 9A 94          ld      de,(screen.posy)
 780+ 9AA8 19                   add     hl,de
 781+ 9AA9 22 6B 94             ld      (lsxy.posy16),hl
 782+ 9AAC C9                   ret
 783+ 9AAD
 784+ 9AAD              updateObject:
 785+ 9AAD ED 5B 9F 94          ld   de,(currObj.ptr)
 786+ 9AB1 21 60 94             ld   hl,lsxy
 787+ 9AB4 01 19 00             ld   bc,objdef
 788+ 9AB7 ED B0                ldir
 789+ 9AB9 C9                   ret
 790+ 9ABA
 791+ 9ABA              eraseMultiObject:
 792+ 9ABA DD 6E 00 DD          ld    hl,(ix+mobdef.objptr)
 792+ 9ABE 66 01
 793+ 9AC0 E5           .l1:    push  hl
 794+ 9AC1 E5                   push  hl
 795+ 9AC2 FD E1                pop   iy
 796+ 9AC4 CD 51 9A             call  swapVram2
 797+ 9AC7 CD 2D A1             call  eraseObject
 798+ 9ACA 3A 7B 94             ld    a,(vpage.scen)
 799+ 9ACD                      page_c
 799+ 9ACD CD 5A BF    >         call   @apage
 800+ 9AD0 E1                   pop   hl
 801+ 9AD1 01 1A 00             ld    bc,objdef+1
 802+ 9AD4 09                   add   hl,bc
 803+ 9AD5 7E                   ld    a,(hl)        ; test end of the list (high byte is =0, low byte is command)
 804+ 9AD6 2B                   dec   hl
 805+ 9AD7 A7                   and   a
 806+ 9AD8 20 E6                jr    nz,.l1
 807+ 9ADA C9                   ret
 808+ 9ADB
 809+ 9ADB              ; draws multi object, input: ix = MOB object address
 810+ 9ADB              drawMultiObject:
 811+ 9ADB DD 6E 08 DD          ld      hl,(ix+mobdef.posz)
 811+ 9ADF 66 09
 812+ 9AE1 ED 5B 87 94          ld      de,(scene.posz)              ; calculate coords
 813+ 9AE5 B7 ED 52             sub     hl,de                        ; distance from observer to object
 814+ 9AE8              ;-- object size based on z-distance
 815+ 9AE8 44 4D                ld      bc,hl
 816+ 9AEA DD 7E 02             ld      a,(ix+mobdef.scale)
 817+ 9AED A7                   and     a
 818+ 9AEE CB BF                res     7,a                          ;
 819+ 9AF0 FA 15 9B             jp      m,.c2                        ; if scale >#80 then no perspective correction for whole object
 820+ 9AF3                                                           ;                    scale will be used as is (and #7f)
 821+ 9AF3
 822+ 9AF3 ED 5B 89 94          ld      de,(scene.far)               ; max visible distance
 823+ 9AF7 B7 ED 52             sub     hl,de
 824+ 9AFA F2 BF 9B             jp      p,.setClip
 825+ 9AFD
 826+ 9AFD ED 43 81 94  .s1:    ld      (mob.posz),bc
 827+ 9B01 CB 78                bit     7,b                          ; if z-pos in scene is negative, then return
 828+ 9B03 C0                   ret     nz
 829+ 9B04 6F                   ld      l,a
 830+ 9B05 26 00                ld      h,0
 831+ 9B07 CD 07 A7             call    persp16b                     ; rescale according to z-pos
 832+ 9B0A 7C                   ld      a,h                          ; new_scale >255, then ret
 833+ 9B0B A7                   and     a
 834+ 9B0C              ;        ret     nz
 835+ 9B0C C2 BF 9B             jp      nz,.setClip                  ; mark all objdefs as clipped = do not erase
 836+ 9B0F 7D                   ld      a,l
 837+ 9B10 17                   rla
 838+ 9B11 9F                   sbc     a,a
 839+ 9B12 B5                   or      l
 840+ 9B13 E6 7F                and     #7f                          ; scale >127, then 127
 841+ 9B15 32 74 9B     .c2:    ld      (.objScale+1),a
 842+ 9B18
 843+ 9B18              ;-- persp posx
 844+ 9B18 DD 6E 04 DD          ld      hl,(ix+mobdef.posx)
 844+ 9B1C 66 05
 845+ 9B1E ED 5B 83 94          ld      de,(scene.posx)
 846+ 9B22 B7 ED 52             sub     hl,de
 847+ 9B25 CD 07 A7             call    persp16b
 848+ 9B28 22 7D 94             ld      (mob.posx),hl
 849+ 9B2B              ;-- persp posy
 850+ 9B2B DD 6E 06 DD          ld      hl,(ix+mobdef.posy)
 850+ 9B2F 66 07
 851+ 9B31 ED 5B 85 94          ld      de,(scene.posy)
 852+ 9B35 B7 ED 52             sub     hl,de
 853+ 9B38 CD 07 A7             call    persp16b
 854+ 9B3B 22 7F 94             ld      (mob.posy),hl
 855+ 9B3E              ;-- same angle for complete object
 856+ 9B3E DD 7E 03             ld      a,(ix+mobdef.angle)
 857+ 9B41 32 85 9B             ld      (.objAngle+1),a
 858+ 9B44
 859+ 9B44 DD 6E 00 DD          ld      hl,(ix+mobdef.objptr)
 859+ 9B48 66 01
 860+ 9B4A E5                   push    hl
 861+ 9B4B CD E5 A1             call    setLight                ; also calls calcLight when required
 862+ 9B4E E1                   pop     hl
 863+ 9B4F
 864+ 9B4F              ;--- draw objdef object (same z, different segments and positions)
 865+ 9B4F              .l1:
 866+ 9B4F E5 FD E1             ld      iy,hl
 867+ 9B52 E5                   push    hl
 868+ 9B53 CD 68 9A             call    setObject
 869+ 9B56 FA 9E 9B             jp      m,.skipHidden
 870+ 9B59 CD 78 9A             call    setObjectOrigin
 871+ 9B5C              ;-- global vs local scale
 872+ 9B5C FD 7E 02             ld      a,(iy+objdef.scale)        ; if object hold individual scale
 873+ 9B5F 32 96 9B             ld      (.scan+1),a
 874+ 9B62 A7                   and     a                          ; then use it instead of global scale
 875+ 9B63 28 0E                jr      z,.objScale
 876+ 9B65 CB BF                res     7,a
 877+ 9B67 FA 75 9B             jp      m,.scl                     ; if bit 7 is set, then use obj scale as is
 878+ 9B6A 5F                   ld      e,a
 879+ 9B6B 3A 74 9B             ld      a,(.objScale+1)            ; otherwise, make it relative to global scale
 880+ 9B6E CD 9E AF             call    math.mul87                 ; scale = scale_local * scale_global
 881+ 9B71 18 02                jr      .scl
 882+ 9B73              .objScale:
 883+ 9B73 3E 55                ld      a,#55                      ; global scale calculated
 884+ 9B75 32 62 94     .scl:   ld      (lsxy.scale),a
 885+ 9B78
 886+ 9B78              ;-- global vs local angle
 887+ 9B78 FD 7E 03     .ss1:   ld      a,(iy+objdef.angle)        ; if object holds individual angle
 888+ 9B7B 32 97 9B             ld      (.scan+2),a
 889+ 9B7E A7                   and     a                          ; then use instad of global angle
 890+ 9B7F CB BF                res     7,a
 891+ 9B81 FA 8F 9B             jp      m,.san
 892+ 9B84              .objAngle:
 893+ 9B84 3E 55                ld      a,#55                      ; global light angle
 894+ 9B86 A7                   and     a                          ; bit 7,a
 895+ 9B87 CB BF                res     7,a
 896+ 9B89 FA 8F 9B             jp      m,.san
 897+ 9B8C 3A 93 94             ld      a,(light.angle)
 898+ 9B8F 32 A1 94     .san:   ld      (currObj.angle),a
 899+ 9B92              ;-- draw single object
 900+ 9B92 CD 31 96             call    drawObject
 901+ 9B95              ;-- update data
 902+ 9B95 21 55 55     .scan:  ld      hl,#5555                   ; restore local scale and angle
 903+ 9B98 22 62 94             ld      (lsxy.scale),hl            ; !!! keep objdef format
 904+ 9B9B CD AD 9A             call    updateObject
 905+ 9B9E
 906+ 9B9E              .skipHidden:
 907+ 9B9E E1                   pop     hl
 908+ 9B9F 01 19 00             ld      bc,objdef
 909+ 9BA2 09                   add     hl,bc
 910+ 9BA3 23                   inc     hl
 911+ 9BA4 7E                   ld      a,(hl)
 912+ 9BA5 2B                   dec     hl
 913+ 9BA6 A7                   and     a
 914+ 9BA7 20 A6                jr      nz,.l1                     ; high byte of objdef ptr<>0
 915+ 9BA9 7E                   ld      a,(hl)                     ; low byte = command - type of execution block
 916+ 9BAA 3D                   dec     a
 917+ 9BAB CA B6 9B             jp      z,.exeAnim                 ; 1 - use kernel exeprt (chain of addresses and parametters)
 918+ 9BAE 3D                   dec     a
 919+ 9BAF CA B3 9B             jp      z,.runCode                 ; 2 - just jump to the code
 920+ 9BB2 C9                   ret
 921+ 9BB3
 922+ 9BB3              .runCode:
 923+ 9BB3 23                   inc     hl
 924+ 9BB4 23                   inc     hl
 925+ 9BB5 E9                   jp      (hl)
 926+ 9BB6
 927+ 9BB6              .exeAnim:
 928+ 9BB6 23                   inc     hl
 929+ 9BB7 23                   inc     hl
 930+ 9BB8 7E                   ld      a,(hl)
 931+ 9BB9 23                   inc     hl
 932+ 9BBA 66                   ld      h,(hl)
 933+ 9BBB 6F                   ld      l,a
 934+ 9BBC C3 64 6B             jp      @exeptr
 935+ 9BBF
 936+ 9BBF              .setClip:                                  ; for objects that are too big to be displayed, objdef.clip needs to be set
 937+ 9BBF                                                         ; to avoid erasing unused area
 938+ 9BBF DD 6E 00 DD          ld      hl,(ix+mobdef.objptr)
 938+ 9BC3 66 01
 939+ 9BC5 E5 DD E1             ld      ix,hl
 940+ 9BC8 01 19 00             ld      bc,objdef
 941+ 9BCB DD 36 12 55  1       ld      (ix+objdef.clip),#55       ; just fake value for debug
 942+ 9BCF DD 09                add     ix,bc
 943+ 9BD1 DD 7E 01             ld      a,(ix+1)                   ; if hi-byte of objdef = 0 --> end of objdef(s)
 944+ 9BD4 A7                   and     a
 945+ 9BD5 20 F4                jr      nz,1B
 946+ 9BD7 C9                   ret
 947+ 9BD8
 948+ 9BD8              ; --- fill rectangle
 949+ 9BD8 ~            /*
 950+ 9BD8 ~                      callix        fillRct,.fill1
 951+ 9BD8 ~                      callix        fillRct,.fill2
 952+ 9BD8 ~            .fill1:    rctf 0,#81,32,2,#ff,0
 953+ 9BD8 ~            .fill2:    rctf 0,#85,32,1,#aa,0
 954+ 9BD8 ~
 955+ 9BD8 ~            ;rectangle fill
 956+ 9BD8 ~                    STRUCT rctf
 957+ 9BD8 ~            posx:   db     0         ; char
 958+ 9BD8 ~            posy:   db     0
 959+ 9BD8 ~            wdth:   db     0         ; char
 960+ 9BD8 ~            hght:   db     0
 961+ 9BD8 ~            fill:   db     0
 962+ 9BD8 ~            mode:   db     0         ; 0-1  00 - put, 01 - or, 10 - and, 11 xor
 963+ 9BD8 ~                                     ; 2    vram addr : 0=#4000, 1=#c000
 964+ 9BD8 ~                                     ; 3    rotate gfx: 0=don't, 1=rrc <fill> every next line
 965+ 9BD8 ~                                     ; 4    attributes
 966+ 9BD8 ~                    ENDS
 967+ 9BD8 ~            */
 968+ 9BD8              fillRct:
 969+ 9BD8 DD 7E 05             ld     a,(ix+rctf.mode)
 970+ 9BDB E6 03                and    3
 971+ 9BDD 06 7B                ld     b,   #7b
 972+ 9BDF 28 0C                jr     z,1F
 973+ 9BE1 3D                   dec    a
 974+ 9BE2 06 B3                ld     b,    #b3
 975+ 9BE4 28 07                jr     z,1F
 976+ 9BE6 06 A3                ld     b,   #a3
 977+ 9BE8 3D                   dec    a
 978+ 9BE9 28 02                jr     z,1F
 979+ 9BEB 06 AB                ld     b,   #ab
 980+ 9BED 78           1       ld     a,b
 981+ 9BEE 32 14 9C             ld     (.mod),a
 982+ 9BF1 DD 4E 00             ld     c,(ix+rctf.posx)
 983+ 9BF4 DD 46 01             ld     b,(ix+rctf.posy)
 984+ 9BF7
 985+ 9BF7 CD 95 6D             call   PixCY2Adr                   ; calc pixel address
 986+ 9BFA DD CB 05 66          bit    4,(ix+rctf.mode)
 987+ 9BFE C4 08 6E             call   nz,AtrPx2Atr                ; if enabled, recalculate to attributes
 988+ 9C01 DD CB 05 56          bit    2,(ix+rctf.mode)            ; #c000 or #4000 vram
 989+ 9C05 28 02                jr     z,1F
 990+ 9C07 CB FC                set    7,h
 991+ 9C09 DD 4E 03     1       ld     c,(ix+rctf.hght)
 992+ 9C0C DD 5E 04             ld     e,(ix+rctf.fill)
 993+ 9C0F DD 46 02     .l2:    ld     b,(ix+rctf.wdth)
 994+ 9C12 E5                   push   hl
 995+ 9C13 7E           .l1:    ld     a,(hl)
 996+ 9C14 00           .mod:   nop                                ; ld, and, or, xor e
 997+ 9C15 77                   ld     (hl),a
 998+ 9C16 2C                   inc    l
 999+ 9C17 10 FA                djnz   .l1
1000+ 9C19 E1                   pop    hl
1001+ 9C1A DD CB 05 66          bit    4,(ix+rctf.mode)
1002+ 9C1E 28 08                jr     z,1F
1003+ 9C20 C5                   push   bc
1004+ 9C21 01 20 00             ld     bc,#20
1005+ 9C24 09                   add    hl,bc
1006+ 9C25 C1                   pop    bc
1007+ 9C26 18 03                jr     2F
1008+ 9C28 CD C7 6D     1       call   vid
1009+ 9C2B DD CB 05 5E  2       bit    3,(ix+rctf.mode)            ; rrc
1010+ 9C2F 28 02                jr     z,1F
1011+ 9C31 CB 0B                rrc    e
1012+ 9C33 0D           1       dec    c
1013+ 9C34 20 D9                jr     nz,.l2
1014+ 9C36 C9                   ret
1015+ 9C37
1016+ 9C37              scrCopy:
1017+ 9C37 3A 7C 94             ld      a,(vpage.vram)
1018+ 9C3A A7                   and     a
1019+ 9C3B CA 84 6C             jp      z,scrCopyTo5
1020+ 9C3E C3 88 6C             jp      scrCopyTo7
1021+ 9C41
1022+ 9C41              scrCopyTo7: = mmu.cpscr57
1023+ 9C41              scrCopyTo5: = mmu.cpscr75
1024+ 9C41              scrClear:
1025+ 9C41 DD 7C                ld    a,xh
1026+ 9C43 32 9E 94             ld    (screen.color),a
1027+ 9C46 C3 2F 6C             jp    mmu.clsxi
1028+ 9C49
1029+ 9C49 ~            /*
1030+ 9C49 ~                    ld      a,(@page)
1031+ 9C49 ~                    ex      af,af
1032+ 9C49 ~                    page_ar o5
1033+ 9C49 ~                    call    .clp
1034+ 9C49 ~                    page_ar o7
1035+ 9C49 ~                    call    .clp
1036+ 9C49 ~                    ex      af,af
1037+ 9C49 ~                    page_a
1038+ 9C49 ~                    ret
1039+ 9C49 ~            .clp:
1040+ 9C49 ~                    ld    hl,#c000
1041+ 9C49 ~                    ld    d,h,e,l
1042+ 9C49 ~                    inc   e
1043+ 9C49 ~                    ld    bc,#1800
1044+ 9C49 ~                    ld    a,xl
1045+ 9C49 ~                    ld    (hl),a
1046+ 9C49 ~                    ldir
1047+ 9C49 ~                    ld    bc,#2ff
1048+ 9C49 ~                    ld    a,xh
1049+ 9C49 ~                    ld    (hl),a
1050+ 9C49 ~                    ldir
1051+ 9C49 ~                    ld    (screen.color),a
1052+ 9C49 ~                    ret
1053+ 9C49 ~            */
1054+ 9C49
1055+ 9C49              ;------------------
1056+ 9C49              ; linetable down-up
1057+ 9C49              mkldeftab_du:
1058+ 9C49 21 00 5B             ld    hl,linedef
1059+ 9C4C 01 C0 00             ld    bc,#c0
1060+ 9C4F 3E C0        .lp:    ld    a,#c0
1061+ 9C51 91                   sub   c
1062+ 9C52 77                   ld    (hl),a
1063+ 9C53 ED A1                cpi
1064+ 9C55 EA 4F 9C             jp    pe,.lp
1065+ 9C58 C9                   ret
1066+ 9C59
1067+ 9C59              ;------------------
1068+ 9C59              ; linetable up-down
1069+ 9C59              mkldeftab_ud:
1070+ 9C59 21 00 5B             ld    hl,linedef
1071+ 9C5C 01 C0 00             ld    bc,#c0
1072+ 9C5F 0D           .lp:    dec   c
1073+ 9C60 71                   ld    (hl),c
1074+ 9C61 0C                   inc   c
1075+ 9C62 ED A1                cpi
1076+ 9C64 EA 5F 9C             jp    pe,.lp
1077+ 9C67 C9                   ret
1078+ 9C68
1079+ 9C68              ;------------------
1080+ 9C68              ; make horizontal line vram table
1081+ 9C68              mklinetab:
1082+ 9C68 CD 6F 9C             call  .step1
1083+ 9C6B CD 8C 9C             call  .step2
1084+ 9C6E C9                   ret
1085+ 9C6F              .step1:
1086+ 9C6F DD 21 00 5B          ld    ix,linedef
1087+ 9C73 21 00 89             ld    hl,linetab
1088+ 9C76 EB           .sl1:   ex    de,hl
1089+ 9C77 DD 46 00             ld    b,(ix+0)
1090+ 9C7A 0E 00                ld    c,0
1091+ 9C7C
1092+ 9C7C DD 23                inc   ix
1093+ 9C7E CD 7A 6D             call  @PixXY2Adr        ; calculate vram address
1094+ 9C81 CB FC                set   7,h              ; 2nd vram
1095+ 9C83 EB                   ex    de,hl
1096+ 9C84 73                   ld    (hl),e
1097+ 9C85 24                   inc   h
1098+ 9C86 72                   ld    (hl),d
1099+ 9C87 25                   dec   h
1100+ 9C88 2C                   inc   l
1101+ 9C89 20 EB                jr    nz,.sl1
1102+ 9C8B C9                   ret
1103+ 9C8C
1104+ 9C8C              .step2:
1105+ 9C8C 11 00 8B             ld    de,lineadd
1106+ 9C8F D5           .sl2:   push  de
1107+ 9C90 7B                   ld    a,e
1108+ 9C91 CB 3F                srl   a
1109+ 9C93 CB 3F                srl   a
1110+ 9C95 CB 3F                srl   a
1111+ 9C97 12                   ld    (de),a
1112+ 9C98 14                   inc   d
1113+ 9C99 7B                   ld    a,e
1114+ 9C9A E6 07                and   7
1115+ 9C9C 21 50 94             ld    hl,edtab
1116+ 9C9F 4F                   ld    c,a
1117+ 9CA0 06 00                ld    b,0
1118+ 9CA2 09                   add   hl,bc
1119+ 9CA3 7E                   ld    a,(hl)
1120+ 9CA4 12                   ld    (de),a
1121+ 9CA5 14                   inc   d
1122+ 9CA6 01 08 00             ld    bc,8
1123+ 9CA9 09                   add   hl,bc
1124+ 9CAA 7E                   ld    a,(hl)
1125+ 9CAB 12                   ld    (de),a
1126+ 9CAC D1                   pop   de
1127+ 9CAD 1C                   inc   e
1128+ 9CAE 20 DF                jr    nz,.sl2
1129+ 9CB0 C9                   ret
1130+ 9CB1
1131+ 9CB1              ;-------------------
1132+ 9CB1              ; bit identification of leff and reff
1133+ 9CB1              ;bit	leff	reff	description
1134+ 9CB1              ;---------------------------------------------------------------------
1135+ 9CB1              ;7 80    x	    	    left segment identifier (color is ignored)
1136+ 9CB1              ;6 40    x	   x	    do not draw color (skip line)
1137+ 9CB1              ;5 20    x	   x	    lock color (ignore shadow, contrast, brightness)
1138+ 9CB1              ;4 10    x	   x	    do not fade with z-distance
1139+ 9CB1              ;3 to 0	 x	   x	    color
1140+ 9CB1
1141+ 9CB1              ; ------------------
1142+ 9CB1              ; draw object based on ldata structure
1143+ 9CB1              draw16:
1144+ 9CB1              ;- conf draw
1145+ 9CB1 3A 72 94               ld    a,(lsxy.clip)           ; test if object needs to be clipped
1146+ 9CB4 A7                     and   a
1147+ 9CB5 21 8C 9D               ld    hl,.noclip
1148+ 9CB8 28 03                  jr    z,.dc1
1149+ 9CBA 21 A9 9D               ld    hl,.clip
1150+ 9CBD 22 8A 9D     .dc1:     ld    (.jpclip+1),hl
1151+ 9CC0 2A 6B 94               ld    hl,(lsxy.posy16)
1152+ 9CC3 22 71 9D               ld    (.posy+1),hl
1153+ 9CC6 3A 9C 94               ld    a,(screen.cltop)
1154+ 9CC9 32 7A 9D               ld    (.cltop+1),a
1155+ 9CCC 3A 9D 94               ld    a,(screen.clbot)
1156+ 9CCF 32 7F 9D               ld    (.clbot+1),a
1157+ 9CD2 21 00 90               ld    hl,ldata
1158+ 9CD5
1159+ 9CD5 7E           .lp2:     ld    a,(hl)                  ; number of lines
1160+ 9CD6 A7                     and   a
1161+ 9CD7 20 06                  jr    nz,1F
1162+ 9CD9 3E 05                    ld    a,5
1163+ 9CDB 85                       add   a,l
1164+ 9CDC 6F                       ld    l,a
1165+ 9CDD 18 F6                    jr    .lp2
1166+ 9CDF
1167+ 9CDF DD 6F        1         ld    xl,a
1168+ 9CE1 3C                     inc   a
1169+ 9CE2 C8                     ret   z                       ; endmark
1170+ 9CE3 2C                     inc   l
1171+ 9CE4              ;--- add x-offset for the current object
1172+ 9CE4 5E                     ld    e,(hl)
1173+ 9CE5 2C                     inc   l
1174+ 9CE6 7B                     ld    a,e
1175+ 9CE7 17                     rla
1176+ 9CE8 9F                     sbc   a,a
1177+ 9CE9 57                     ld    d,a
1178+ 9CEA EB                     ex    de,hl
1179+ 9CEB ED 4B 69 94            ld    bc,(lsxy.posx16)
1180+ 9CEF 09                     add   hl,bc
1181+ 9CF0 22 A3 94               ld    (currObj.posx16),hl
1182+ 9CF3 EB                     ex    de,hl
1183+ 9CF4
1184+ 9CF4              ;--- segment colors and draw options
1185+ 9CF4 4E                     ld    c,(hl)                  ; left pattern
1186+ 9CF5 2C                     inc   l
1187+ 9CF6              ;--- check if line shall not be drawn, if not - modify line call to dummy
1188+ 9CF6 CB 71                  bit   6,c
1189+ 9CF8 11 65 9E               ld    de,line
1190+ 9CFB 28 03                  jr    z,1F
1191+ 9CFD 11 0E BF               ld    de,dummy
1192+ 9D00 ED 53 16 9E  1         ld    (draw16.lcall+1),de
1193+ 9D04 46                     ld    b,(hl)                  ; right pattern
1194+ 9D05 2C                     inc   l
1195+ 9D06              ;--- check if line shall not be drawn, if not - modify line call to dummy
1196+ 9D06 CB 70                  bit   6,b
1197+ 9D08 11 65 9E               ld    de,line
1198+ 9D0B 28 03                  jr    z,1F
1199+ 9D0D 11 0E BF               ld    de,@dummy
1200+ 9D10 ED 53 05 9E  1         ld    (draw16.rcall+1),de
1201+ 9D14
1202+ 9D14 ED 5B 94 94            ld    de,(light.leff)        ; light preferences e-left, d-right
1203+ 9D18
1204+ 9D18              ;---- left side of the line
1205+ 9D18 79                     ld    a,c
1206+ 9D19 E6 0F                  and   #0f
1207+ 9D1B              ;__
1208+ 9D1B CB 69                  bit   5,c
1209+ 9D1D CC 49 9E               call  z,line_fader            ; pos-z fade-out
1210+ 9D20              ;__
1211+ 9D20 CB 61                  bit   4,c                     ; fixed color. No light takes effect
1212+ 9D22 20 0F                  jr    nz,2F
1213+ 9D24              ;__ light
1214+ 9D24 4F                     ld    c,a                     ; store main color to c_reg (preserve for right side)
1215+ 9D25 83                     add   a,e                     ; add light color
1216+ 9D26 FA 32 9D               jp    m,1F                    ; too dark, = 0
1217+ 9D29 FE 0F                  cp    #0f
1218+ 9D2B DA 33 9D               jp    c,2F                    ; too light = #0f
1219+ 9D2E 3E 0F                  ld    a,#0f
1220+ 9D30 18 01                  jr    2F
1221+ 9D32
1222+ 9D32 AF           1         xor   a
1223+ 9D33 87           2         add   a,a
1224+ 9D34 87                     add   a,a
1225+ 9D35              ;          ld    yl,a
1226+ 9D35 32 09 9E               ld    (.lpt+1),a              ;mod_ld_e = left pattern low addr
1227+ 9D38
1228+ 9D38              ;---- right side of the line
1229+ 9D38
1230+ 9D38 78           .rght:    ld    a,b
1231+ 9D39 E6 0F                  and   #0f
1232+ 9D3B              ;__
1233+ 9D3B CB 60                  bit   4,b                     ; fixed color
1234+ 9D3D 20 01                  jr    nz,1F
1235+ 9D3F
1236+ 9D3F 79                     ld    a,c                     ; get previous left color (main)
1237+ 9D40 CB 68        1         bit   5,b                     ;
1238+ 9D42 CC 49 9E               call  z,line_fader            ; pos-z fade-out
1239+ 9D45 CB 60                  bit   4,b
1240+ 9D47 20 0E                  jr    nz,2F
1241+ 9D49              ;__
1242+ 9D49 82                     add   a,d
1243+ 9D4A FA 56 9D               jp    m,1F
1244+ 9D4D FE 0F                  cp    #0f
1245+ 9D4F DA 57 9D               jp    c,2F
1246+ 9D52 3E 0F                  ld    a,#0f
1247+ 9D54 18 01                  jr    2F
1248+ 9D56
1249+ 9D56 AF           1         xor   a
1250+ 9D57 87           2         add   a,a
1251+ 9D58 87                     add   a,a
1252+ 9D59 32 00 9E               ld    (.rpt+1),a              ; right pattern
1253+ 9D5C
1254+ 9D5C D9           .drwl:    exx
1255+ 9D5D 26 94                  ld    h,high dthPattern       ; dithering pattern table
1256+ 9D5F 16 03                  ld    d,3                     ; used for AND Y position to get correct dithering byte 0-3
1257+ 9D61 D9                     exx
1258+ 9D62
1259+ 9D62 4E                     ld    c,(hl)                  ; y-position of the segment
1260+ 9D63 2C                     inc   l
1261+ 9D64 06 00                  ld    b,0
1262+ 9D66 EB                     ex    de,hl
1263+ 9D67 2A 6B 94               ld    hl,(lsxy.posy16)
1264+ 9D6A 09                     add   hl,bc                   ; add relative segment y-pos to absolute object posy
1265+ 9D6B 22 71 9D               ld    (.posy+1),hl
1266+ 9D6E EB                     ex    de,hl
1267+ 9D6F
1268+ 9D6F              ;          ld    a,xl
1269+ 9D6F              ;          and   a
1270+ 9D6F              ;          jp    z,.lp2
1271+ 9D6F
1272+ 9D6F EB           .lp1:     ex    de,hl
1273+ 9D70 21 55 55     .posy:    ld    hl,#5555                ; (lsxy.posy16)
1274+ 9D73 7C           .lp1a:    ld    a,h
1275+ 9D74 A7                     and   a
1276+ 9D75 C2 28 9E               jp    nz,.nextl               ; skip if d>0
1277+ 9D78 7D                     ld    a,l
1278+ 9D79 FE 55        .cltop:   cp    #55
1279+ 9D7B DA 28 9E               jp    c,.nextl
1280+ 9D7E FE 55        .clbot:   cp    #55
1281+ 9D80              ;          ret   nc
1282+ 9D80 D2 28 9E               jp    nc,.nextl
1283+ 9D83 22 71 9D               ld    (.posy+1),hl
1284+ 9D86 DD 67                  ld    xh,a
1285+ 9D88 EB                     ex    de,hl
1286+ 9D89 C3 A9 9D     .jpclip:  jp    .clip                   ; to be modified based on lsxy.clip flag
1287+ 9D8C
1288+ 9D8C 3A A3 94     .noclip:  ld    a,(currObj.posx16)      ; was lsxy
1289+ 9D8F 32 93 9D               ld    (.ncpx+1),a
1290+ 9D92 0E 55        .ncpx:    ld    c,#55                   ; position x
1291+ 9D94 EB                     ex    de,hl
1292+ 9D95 1A                     ld    a,(de)
1293+ 9D96 81                     add   a,c
1294+ 9D97 32 FB 9D               ld    (.x3+1),a
1295+ 9D9A 14                     inc   d
1296+ 9D9B 1A                     ld    a,(de)
1297+ 9D9C 81                     add   a,c
1298+ 9D9D 32 FD 9D               ld    (.x2+1),a
1299+ 9DA0 32 10 9E               ld    (.rx1+1),a
1300+ 9DA3 14                     inc   d
1301+ 9DA4 1A                     ld    a,(de)
1302+ 9DA5 81                     add   a,c
1303+ 9DA6 C3 F3 9D               jp    .clskp
1304+ 9DA9
1305+ 9DA9 EB           .clip:    ex    de,hl
1306+ 9DAA 1A                     ld    a,(de)
1307+ 9DAB 4F                     ld    c,a
1308+ 9DAC 07                     rlca
1309+ 9DAD 9F                     sbc   a,a
1310+ 9DAE 47                     ld    b,a
1311+ 9DAF 2A A3 94               ld    hl,(currObj.posx16)     ; was lsxy
1312+ 9DB2 09                     add   hl,bc
1313+ 9DB3 7C                     ld    a,h     ; 4
1314+ 9DB4 A7                     and   a
1315+ 9DB5 FA 38 9E               jp    m,.n1                   ; test if x3 is negative ==> object out of screen
1316+ 9DB8 ED 44                  neg           ; 8
1317+ 9DBA B4                     or    h       ; 4
1318+ 9DBB B5                     or    l       ; 4
1319+ 9DBC 6F                     ld    l,a     ; 4
1320+ 9DBD CB 04                  rlc   h       ; 8
1321+ 9DBF 9F                     sbc   a,a     ; 4
1322+ 9DC0 AD                     xor   l       ; 4    ; 40T
1323+ 9DC1 32 FB 9D               ld    (.x3+1),a
1324+ 9DC4 14                     inc   d
1325+ 9DC5
1326+ 9DC5 1A                     ld    a,(de)
1327+ 9DC6 4F                     ld    c,a
1328+ 9DC7 07                     rlca
1329+ 9DC8 9F                     sbc   a,a
1330+ 9DC9 47                     ld    b,a
1331+ 9DCA 2A A3 94               ld    hl,(currObj.posx16)     ; was lsxy
1332+ 9DCD 09                     add   hl,bc
1333+ 9DCE AF                     xor   a
1334+ 9DCF 94                     sub   h
1335+ 9DD0 B4                     or    h       ; 4
1336+ 9DD1 B5                     or    l       ; 4
1337+ 9DD2 6F                     ld    l,a     ; 4
1338+ 9DD3 CB 04                  rlc   h       ; 8
1339+ 9DD5 9F                     sbc   a,a     ; 4
1340+ 9DD6 AD                     xor   l       ; 4    ; 40T
1341+ 9DD7 32 FD 9D               ld    (.x2+1),a
1342+ 9DDA 32 10 9E               ld    (.rx1+1),a
1343+ 9DDD 14                     inc   d
1344+ 9DDE
1345+ 9DDE 1A                     ld    a,(de)
1346+ 9DDF 4F                     ld    c,a
1347+ 9DE0 07                     rlca
1348+ 9DE1 9F                     sbc   a,a
1349+ 9DE2 47                     ld    b,a
1350+ 9DE3 2A A3 94               ld    hl,(currObj.posx16)     ; was lsxy
1351+ 9DE6 09                     add   hl,bc
1352+ 9DE7 AF                     xor   a
1353+ 9DE8 94                     sub   h
1354+ 9DE9 FA 36 9E               jp    m,.n2                   ; test if x1 is positive ==> object out of screen
1355+ 9DEC B4                     or    h       ; 4
1356+ 9DED B5                     or    l       ; 4
1357+ 9DEE 6F                     ld    l,a     ; 4
1358+ 9DEF CB 04                  rlc   h       ; 8
1359+ 9DF1 9F                     sbc   a,a     ; 4
1360+ 9DF2 AD                     xor   l       ; 4    ; 40T
1361+ 9DF3
1362+ 9DF3 32 0E 9E     .clskp:   ld    (.rx0+1),a
1363+ 9DF6 15                     dec   d
1364+ 9DF7 15                     dec   d
1365+ 9DF8 1C                     inc   e
1366+ 9DF9 D5                     push  de
1367+ 9DFA
1368+ 9DFA 1E 55        .x3:      ld    e,#55
1369+ 9DFC 0E 55        .x2:      ld    c,#55
1370+ 9DFE
1371+ 9DFE D9                     exx
1372+ 9DFF 1E 55        .rpt:     ld    e,#55         ; right (shadow) patterm
1373+ 9E01 D9                     exx
1374+ 9E02
1375+ 9E02 DD 44                  ld    b,xh
1376+ 9E04 CD 65 9E     .rcall:   call  line
1377+ 9E07
1378+ 9E07 D9                     exx
1379+ 9E08 1E 55        .lpt:     ld    e,#55         ; left pattern
1380+ 9E0A D9                     exx
1381+ 9E0B
1382+ 9E0B DD 44                  ld    b,xh          ; pop b
1383+ 9E0D 0E 55        .rx0:     ld    c,#55
1384+ 9E0F 1E 55        .rx1:     ld    e,#55
1385+ 9E11 3A FD 9D               ld    a,(.x2+1)
1386+ 9E14 B9                     cp    c
1387+ 9E15 C4 65 9E     .lcall:   call  nz,line          ; nz
1388+ 9E18
1389+ 9E18 2A 71 9D               ld    hl,(.posy+1)
1390+ 9E1B 23                     inc   hl
1391+ 9E1C 22 71 9D               ld    (.posy+1),hl
1392+ 9E1F E1                     pop   hl
1393+ 9E20 DD 2D                  dec   xl
1394+ 9E22 C2 6F 9D               jp    nz,.lp1
1395+ 9E25 C3 D5 9C               jp    .lp2
1396+ 9E28
1397+ 9E28              ; --- do not draw current line if y position is out of screen
1398+ 9E28 1C           .nextl:   inc   e
1399+ 9E29 23                     inc   hl
1400+ 9E2A DD 2D                  dec   xl
1401+ 9E2C C2 73 9D               jp    nz,.lp1a
1402+ 9E2F 22 71 9D               ld    (.posy+1),hl
1403+ 9E32 EB                     ex    de,hl
1404+ 9E33 C3 D5 9C               jp    .lp2
1405+ 9E36
1406+ 9E36              ; --- do not draw current line if x1,x3 are out of screen, skip to next one
1407+ 9E36 15           .n2:      dec   d
1408+ 9E37 15                     dec   d
1409+ 9E38 1C           .n1:      inc   e
1410+ 9E39 2A 71 9D               ld    hl,(.posy+1)
1411+ 9E3C 23                     inc   hl
1412+ 9E3D DD 2D                  dec   xl
1413+ 9E3F C2 73 9D               jp    nz,.lp1a
1414+ 9E42 22 71 9D               ld    (.posy+1),hl
1415+ 9E45 EB                     ex    de,hl
1416+ 9E46 C3 D5 9C               jp    .lp2
1417+ 9E49
1418+ 9E49              ;recalc color based on z-pos
1419+ 9E49              ; input a:col 0-15, return a: new col
1420+ 9E49              ; uses: _fade, mob.posz, preserve HL
1421+ 9E49              line_fader:
1422+ 9E49 D9                     exx
1423+ 9E4A 5F                     ld    e,a            ; c dith pattern
1424+ 9E4B ED 4B 81 94            ld    bc,(mob.posz)
1425+ 9E4F 2A 8B 94               ld    hl,(scene.fade)
1426+ 9E52 B7 ED 42               sub   hl,bc
1427+ 9E55 D2 63 9E               jp    nc,.nofade
1428+ 9E58
1429+ 9E58 7C                     ld    a,h
1430+ 9E59 D6 FF                  sub   #ff            ; #feff and lower raises cy
1431+ 9E5B 9F                     sbc   a,a            ; #ff00 and higher don't
1432+ 9E5C 2F                     cpl                  ; mask is 0 (dark objects) or #ff
1433+ 9E5D A5                     and   l              ; mask with l
1434+ 9E5E CB 3F                  srl   a
1435+ 9E60
1436+ 9E60 CD D8 AF               call  math.mul7a
1437+ 9E63 D9           .nofade:  exx
1438+ 9E64 C9                     ret
1439+ 9E65
1440+ 9E65 ~            /*
1441+ 9E65 ~            line_fader:
1442+ 9E65 ~                      exx
1443+ 9E65 ~                      ld    c,a            ; c dith pattern
1444+ 9E65 ~                      ld    de,(mob.posz)
1445+ 9E65 ~                      ld    hl,(scene.fade)
1446+ 9E65 ~                      sub   hl,de
1447+ 9E65 ~                      jp    nc,.nofade
1448+ 9E65 ~                      ld    b,l
1449+ 9E65 ~                      ld    de,(mob.posz)
1450+ 9E65 ~                      ld    hl,(scene.far)
1451+ 9E65 ~                      sub   hl,de
1452+ 9E65 ~
1453+ 9E65 ~                      sbc   a,a           ; negative = object is behind FAR border => shall not be displayed
1454+ 9E65 ~                      cpl
1455+ 9E65 ~                      and   c             ; for those objects dithering pattern is 0
1456+ 9E65 ~                      ld    c,a           ; otherwise c stays as is
1457+ 9E65 ~
1458+ 9E65 ~                      xor   a
1459+ 9E65 ~                      sub   h
1460+ 9E65 ~                      sbc   a,a           ; test if h>0  then a=255
1461+ 9E65 ~
1462+ 9E65 ~                      or    b
1463+ 9E65 ~                      srl   a             ; ~ld a,l --> in l is z position for fade-out
1464+ 9E65 ~
1465+ 9E65 ~                      ld    e,c
1466+ 9E65 ~                      call  math.mul7a
1467+ 9E65 ~            .nofade:  exx
1468+ 9E65 ~                      ret
1469+ 9E65 ~            */
1470+ 9E65 ~            /*
1471+ 9E65 ~            line_fader_old:
1472+ 9E65 ~                      exx
1473+ 9E65 ~                      ld    c,a
1474+ 9E65 ~                      ld    hl,(mob.posz)
1475+ 9E65 ~                      ld    de,(scene.fade)
1476+ 9E65 ~                      sub   hl,de
1477+ 9E65 ~                      jp    c,.nofade
1478+ 9E65 ~                      add   hl,de
1479+ 9E65 ~                      ex    de,hl
1480+ 9E65 ~                      ld    hl,(scene.far)
1481+ 9E65 ~                      sub   hl,de
1482+ 9E65 ~                      sbc   a,a           ; negative = object is behind FAR border => shall not be displayed
1483+ 9E65 ~                      cpl
1484+ 9E65 ~                      and   c             ; for those objects dithering pattern is 0
1485+ 9E65 ~                      ld    c,a
1486+ 9E65 ~                      xor   a
1487+ 9E65 ~                      sub   h
1488+ 9E65 ~                      sbc   a,a           ; test if h>0  then a=255
1489+ 9E65 ~                      or    l
1490+ 9E65 ~                      srl   a
1491+ 9E65 ~                      ld    e,c
1492+ 9E65 ~                      call  math.mul7a
1493+ 9E65 ~            .nofade:  exx
1494+ 9E65 ~                      ret
1495+ 9E65 ~            */
1496+ 9E65
1497+ 9E65              ;---------------------
1498+ 9E65              ; draw horizontal line
1499+ 9E65              ; b=y position, e=x2, c=x1, h'=pattern table, d=3 (and y-pos for pattern line)
1500+ 9E65              ;                           e'=pattern low addr (pattern no. * 4)
1501+ 9E65              line:
1502+ 9E65 ~            /*
1503+ 9E65 ~                      exx
1504+ 9E65 ~                      ld    h,high dith2
1505+ 9E65 ~                      ld    e,3
1506+ 9E65 ~                      add   a,a      ;a = pattern 0-15
1507+ 9E65 ~                      add   a,a
1508+ 9E65 ~                      ld    l,a      ;hl = pattern base addr
1509+ 9E65 ~            */
1510+ 9E65 7B                     ld    a,e           ; check if left is lower than right
1511+ 9E66 B9                     cp    c
1512+ 9E67 D8                     ret   c
1513+ 9E68 26 89                  ld    h,high linetab
1514+ 9E6A 68                     ld    l,b           ; l=y-pos
1515+ 9E6B 7E                     ld    a,(hl)        ; low addr from y
1516+ 9E6C 24                     inc   h
1517+ 9E6D 56                     ld    d,(hl)        ; vram high
1518+ 9E6E 24                     inc   h
1519+ 9E6F 6B                     ld    l,e           ; e=x2
1520+ 9E70 B6                     or    (hl)
1521+ 9E71 5F                     ld    e,a           ; de=vram of x2
1522+ 9E72 24                     inc   h
1523+ 9E73
1524+ 9E73              ; jump here from previous line l-xpos
1525+ 9E73 46           .simp:    ld    b,(hl)        ; mask right side
1526+ 9E74 25                     dec   h
1527+ 9E75 69                     ld    l,c           ; vram low
1528+ 9E76 96                     sub   (hl)          ; vram low x2-x1 = number of bytes
1529+ 9E77 E6 1F                  and   #1f
1530+ 9E79 20 13                  jr    nz,.long      ; draw long line
1531+ 9E7B
1532+ 9E7B 26 8D                  ld    h,high lineml
1533+ 9E7D 78                     ld    a,b          ; l=left side, b=mask righ side
1534+ 9E7E B6                     or    (hl)         ; or left mask with right mask
1535+ 9E7F 4F                     ld    c,a          ; c=resulting mask
1536+ 9E80
1537+ 9E80 7A                     ld    a,d          ; vram high addr
1538+ 9E81 D9                     exx
1539+ 9E82 A2                     and   d            ; and 3
1540+ 9E83 83                     add   a,e          ; add pattern
1541+ 9E84              ;.pmod:    or    #00          ; pattern offset
1542+ 9E84 6F                     ld    l,a
1543+ 9E85 7E                     ld    a,(hl)       ; a=pattern gfx
1544+ 9E86 D9                     exx
1545+ 9E87 47                     ld    b,a
1546+ 9E88
1547+ 9E88 1A                     ld    a,(de)
1548+ 9E89 A8                     xor   b
1549+ 9E8A A1                     and   c
1550+ 9E8B A8                     xor   b
1551+ 9E8C 12                     ld    (de),a
1552+ 9E8D C9                     ret
1553+ 9E8E
1554+ 9E8E              ;-------------
1555+ 9E8E              .width:   EQU   30
1556+ 9E8E              .long:
1557+ 9E8E 2F                     cpl
1558+ 9E8F 87                     add   a,a
1559+ 9E90 C6 40                  add   a,64
1560+ 9E92 32 A7 9E               ld    (.jr+1),a
1561+ 9E95
1562+ 9E95 26 8D                  ld    h,high lineml
1563+ 9E97 6E                     ld    l,(hl)       ; l=mask left side
1564+ 9E98
1565+ 9E98 7A                     ld    a,d
1566+ 9E99 D9                     exx
1567+ 9E9A A2                     and   d
1568+ 9E9B 83                     add   a,e
1569+ 9E9C 6F                     ld    l,a
1570+ 9E9D 7E                     ld    a,(hl)
1571+ 9E9E D9                     exx
1572+ 9E9F 4F                     ld    c,a          ; get pattern as above
1573+ 9EA0
1574+ 9EA0 1A                     ld    a,(de)       ; mask right side
1575+ 9EA1 A9                     xor   c
1576+ 9EA2 A0                     and   b
1577+ 9EA3 A9                     xor   c
1578+ 9EA4 12                     ld    (de),a
1579+ 9EA5
1580+ 9EA5 EB                     ex    de,hl
1581+ 9EA6
1582+ 9EA6 18 FE        .jr:      jr    $
1583+ 9EA8                        dup   .width
1584+ 9EA8 2D          >          dec   l            ; fill line with pattern
1585+ 9EA9 71          >          ld    (hl),c
1584+ 9EAA 2D          >          dec   l            ; fill line with pattern
1585+ 9EAB 71          >          ld    (hl),c
1584+ 9EAC 2D          >          dec   l            ; fill line with pattern
1585+ 9EAD 71          >          ld    (hl),c
1584+ 9EAE 2D          >          dec   l            ; fill line with pattern
1585+ 9EAF 71          >          ld    (hl),c
1584+ 9EB0 2D          >          dec   l            ; fill line with pattern
1585+ 9EB1 71          >          ld    (hl),c
1584+ 9EB2 2D          >          dec   l            ; fill line with pattern
1585+ 9EB3 71          >          ld    (hl),c
1584+ 9EB4 2D          >          dec   l            ; fill line with pattern
1585+ 9EB5 71          >          ld    (hl),c
1584+ 9EB6 2D          >          dec   l            ; fill line with pattern
1585+ 9EB7 71          >          ld    (hl),c
1584+ 9EB8 2D          >          dec   l            ; fill line with pattern
1585+ 9EB9 71          >          ld    (hl),c
1584+ 9EBA 2D          >          dec   l            ; fill line with pattern
1585+ 9EBB 71          >          ld    (hl),c
1584+ 9EBC 2D          >          dec   l            ; fill line with pattern
1585+ 9EBD 71          >          ld    (hl),c
1584+ 9EBE 2D          >          dec   l            ; fill line with pattern
1585+ 9EBF 71          >          ld    (hl),c
1584+ 9EC0 2D          >          dec   l            ; fill line with pattern
1585+ 9EC1 71          >          ld    (hl),c
1584+ 9EC2 2D          >          dec   l            ; fill line with pattern
1585+ 9EC3 71          >          ld    (hl),c
1584+ 9EC4 2D          >          dec   l            ; fill line with pattern
1585+ 9EC5 71          >          ld    (hl),c
1584+ 9EC6 2D          >          dec   l            ; fill line with pattern
1585+ 9EC7 71          >          ld    (hl),c
1584+ 9EC8 2D          >          dec   l            ; fill line with pattern
1585+ 9EC9 71          >          ld    (hl),c
1584+ 9ECA 2D          >          dec   l            ; fill line with pattern
1585+ 9ECB 71          >          ld    (hl),c
1584+ 9ECC 2D          >          dec   l            ; fill line with pattern
1585+ 9ECD 71          >          ld    (hl),c
1584+ 9ECE 2D          >          dec   l            ; fill line with pattern
1585+ 9ECF 71          >          ld    (hl),c
1584+ 9ED0 2D          >          dec   l            ; fill line with pattern
1585+ 9ED1 71          >          ld    (hl),c
1584+ 9ED2 2D          >          dec   l            ; fill line with pattern
1585+ 9ED3 71          >          ld    (hl),c
1584+ 9ED4 2D          >          dec   l            ; fill line with pattern
1585+ 9ED5 71          >          ld    (hl),c
1584+ 9ED6 2D          >          dec   l            ; fill line with pattern
1585+ 9ED7 71          >          ld    (hl),c
1584+ 9ED8 2D          >          dec   l            ; fill line with pattern
1585+ 9ED9 71          >          ld    (hl),c
1584+ 9EDA 2D          >          dec   l            ; fill line with pattern
1585+ 9EDB 71          >          ld    (hl),c
1584+ 9EDC 2D          >          dec   l            ; fill line with pattern
1585+ 9EDD 71          >          ld    (hl),c
1584+ 9EDE 2D          >          dec   l            ; fill line with pattern
1585+ 9EDF 71          >          ld    (hl),c
1584+ 9EE0 2D          >          dec   l            ; fill line with pattern
1585+ 9EE1 71          >          ld    (hl),c
1584+ 9EE2 2D          >          dec   l            ; fill line with pattern
1585+ 9EE3 71          >          ld    (hl),c
1586+ 9EE4                        edup
1587+ 9EE4
1588+ 9EE4 2D                     dec   l
1589+ 9EE5
1590+ 9EE5 7E                     ld    a,(hl)       ; mask left side
1591+ 9EE6 A9                     xor   c
1592+ 9EE7 A3                     and   e
1593+ 9EE8 A9                     xor   c
1594+ 9EE9 77                     ld    (hl),a
1595+ 9EEA EB                     ex    de,hl
1596+ 9EEB C9                     ret
1597+ 9EEC
1598+ 9EEC              ;----------------------------------------------------
1599+ 9EEC              ; calculate mid-position for each line. Using "angle"
1600+ 9EEC              calcMid:
1601+ 9EEC 3A 79 94             ld      a,(vpage.mult)
1602+ 9EEF                      page_c
1602+ 9EEF CD 5A BF    >         call   @apage
1603+ 9EF2
1604+ 9EF2              ; additional shadow by altering odd/even line angles
1605+ 9EF2 3A 96 94             ld      a,(light.shade)         ; angle of shade area
1606+ 9EF5 6F                   ld      l,a                     ; lower limit
1607+ 9EF6 3A A1 94             ld      a,(currObj.angle)
1608+ 9EF9 E6 3F                and     #3f
1609+ 9EFB 5F                   ld      e,a
1610+ 9EFC 95                   sub     l
1611+ 9EFD D2 01 9F             jp      nc,1F
1612+ 9F00 AF                   xor     a
1613+ 9F01 32 38 9F     1       ld      (.mds2+1),a
1614+ 9F04 57                   ld      d,a
1615+ 9F05 7B                   ld      a,e
1616+ 9F06 85                   add     a,l
1617+ 9F07 FE 40                cp      #40
1618+ 9F09 DA 0E 9F             jp      c,1F
1619+ 9F0C 3E 3F                ld      a,#3f
1620+ 9F0E AA           1       xor     d
1621+ 9F0F
1622+ 9F0F 32 57 9F             ld      (.midx+1),a             ; xor new angle position every next line
1623+ 9F12 32 3C 9F             ld      (.mdx2+1),a
1624+ 9F15
1625+ 9F15 16 90                ld      d,high ldata
1626+ 9F17 1E 92                ld      e,high ldatl
1627+ 9F19 0E 91                ld      c,high ldatm
1628+ 9F1B 2E 00                ld      l,0
1629+ 9F1D
1630+ 9F1D 62           .lp2:   ld      h,d              ; high ldata
1631+ 9F1E 7E                   ld      a,(hl)
1632+ 9F1F A7                   and     a
1633+ 9F20 C2 2A 9F             jp      nz,.s3
1634+ 9F23              ;     .5 inc     l
1635+ 9F23 3E 05                ld      a,5
1636+ 9F25 85                   add     a,l
1637+ 9F26 6F                   ld      l,a
1638+ 9F27 C3 1D 9F             jp      .lp2
1639+ 9F2A
1640+ 9F2A 47           .s3:    ld      b,a
1641+ 9F2B 3C                   inc     a
1642+ 9F2C C8                   ret     z
1643+ 9F2D 2C          > inc     l
1643+ 9F2E 2C          > inc     l
1643+ 9F2F 2C          > inc     l
1643+ 9F30 2C          > inc     l
1644+ 9F31
1645+ 9F31 3A 6B 94             ld      a,(lsxy.posy16)
1646+ 9F34 86                   add     a,(hl)                  ; y-offset
1647+ 9F35 2C                   inc     l                       ; fix-pattern blinking
1648+ 9F36 1F                   rra                             ; test of bit 0 (odd even lines)
1649+ 9F37 3E 55        .mds2:  ld      a,#55
1650+ 9F39 38 02                jr      c,1F
1651+ 9F3B EE 55        .mdx2:  xor     #55
1652+ 9F3D 32 55 9F     1       ld      (.mids+1),a             ; store new angle start position
1653+ 9F40
1654+ 9F40              .lp1:
1655+ 9F40 63                   ld      h,e              ; left
1656+ 9F41 7E                   ld      a,(hl)
1657+ 9F42              ;        debug_border_a
1658+ 9F42 62                   ld      h,d              ; right
1659+ 9F43 86                   add     a,(hl)
1660+ 9F44 EA 4A 9F             jp      pe,1F
1661+ 9F47 CB 2F                sra     a
1662+ 9F49 FE                   db         #fe
1663+ 9F4A 1F           1       db          #1f
1664+ 9F4B DD 6F                ld      xl,a
1665+ 9F4D
1666+ 9F4D 7E                   ld      a,(hl)         ; right
1667+ 9F4E 63                   ld      h,e            ; left
1668+ 9F4F 96                   sub     (hl)           ; right-left
1669+ 9F50 CB 3F                srl     a              ; /2 = radius
1670+ 9F52              ;---
1671+ 9F52 D9                   exx
1672+ 9F53 5F                   ld      e,a               ; e=radius
1673+ 9F54              ;        ld      a,(currObj.angle)
1674+ 9F54 3E 55        .mids:  ld      a,#55
1675+ 9F56 EE 55        .midx:  xor     #55
1676+ 9F58 32 55 9F             ld      (.mids+1),a
1677+ 9F5B 4F                   ld      c,a
1678+ 9F5C 06 00                ld      b,0
1679+ 9F5E 21 4C 7D             ld      hl,costab
1680+ 9F61 09                   add     hl,bc
1681+ 9F62 7E                   ld      a,(hl)            ; a=cos(angle)
1682+ 9F63 A7                   and     a
1683+ 9F64 FA 73 9F             jp      m,.negs
1684+ 9F67 CB 13                rl      e
1685+ 9F69 1F                   rra
1686+ 9F6A CB 1B                rr      e
1687+ 9F6C F6 C0                or      #c0               ; must be paged in multab page
1688+ 9F6E 57                   ld      d,a
1689+ 9F6F 1A                   ld      a,(de)
1690+ 9F70 C3 80 9F             jp      .s1
1691+ 9F73
1692+ 9F73 ED 44        .negs:  neg
1693+ 9F75 CB 13                rl      e
1694+ 9F77 1F                   rra
1695+ 9F78 CB 1B                rr      e
1696+ 9F7A F6 C0                or      #c0
1697+ 9F7C 57                   ld      d,a
1698+ 9F7D 1A                   ld      a,(de)
1699+ 9F7E ED 44                neg
1700+ 9F80 D9           .s1:    exx
1701+ 9F81              ;---
1702+ 9F81 61           .s2:    ld      h,c               ; high ldatm
1703+ 9F82 DD 85                add     a,xl              ; center shadow according to average of left+right side
1704+ 9F84 77                   ld      (hl),a
1705+ 9F85 2C                   inc     l
1706+ 9F86 10 B8                djnz    .lp1
1707+ 9F88 C3 1D 9F             jp      .lp2
1708+ 9F8B
1709+ 9F8B              ;----------------------------------------------------
1710+ 9F8B              calcLeft:
1711+ 9F8B 11 00 92             ld      de,ldatl
1712+ 9F8E 6B                   ld      l,e
1713+ 9F8F 26 90        .lp2:   ld      h,high ldata
1714+ 9F91 7E                   ld      a,(hl)
1715+ 9F92 A7                   and     a
1716+ 9F93 C2 9D 9F             jp      nz,.s2
1717+ 9F96 3E 05                  ld      a,5
1718+ 9F98 85                     add     a,l
1719+ 9F99 6F                     ld      l,a
1720+ 9F9A C3 8F 9F               jp      .lp2
1721+ 9F9D
1722+ 9F9D 47           .s2:    ld      b,a                    ; b=height
1723+ 9F9E 3C                   inc     a
1724+ 9F9F C8                   ret     z
1725+ 9FA0
1726+ 9FA0              ; db height
1727+ 9FA0              ; db drawing x-offset
1728+ 9FA0              ; db shader left
1729+ 9FA0              ; db shader right
1730+ 9FA0              ; db drawing y-offset
1731+ 9FA0 2C                   inc     l                      ;
1732+ 9FA1 2C                   inc     l                      ;
1733+ 9FA2              ;/*
1734+ 9FA2 2C                   inc     l
1735+ 9FA3 7E                   ld      a,(hl)                 ; shader right
1736+ 9FA4 A7                   and     a
1737+ 9FA5 FA C2 9F             jp      m,.s11                 ; bit7 = 1, asymetric then goto s11
1738+ 9FA8 2D                   dec     l
1739+ 9FA9              ;*/
1740+ 9FA9 CB 7E                bit     7,(hl)                 ; test of leff (mark of asymetric object)
1741+ 9FAB 0E 00                ld      c,0                    ; symetric (ld c,0, ld a,c = xor a)
1742+ 9FAD 26 90                ld      h,high ldata
1743+ 9FAF 28 04                jr      z,.s1
1744+ 9FB1              ;-- asymetric section
1745+ 9FB1 62                   ld      h,d
1746+ 9FB2 2D                   dec     l
1747+ 9FB3 4E                   ld      c,(hl)                 ; x-offset
1748+ 9FB4 2C                   inc     l
1749+ 9FB5              ;-- symetric
1750+ 9FB5 2C          > inc     l
1750+ 9FB6 2C          > inc     l
1750+ 9FB7 2C          > inc     l
1751+ 9FB8 5D           .llp1:    ld      e,l
1752+ 9FB9 79                     ld      a,c
1753+ 9FBA              ;          debug_border_a
1754+ 9FBA 96                     sub     (hl)
1755+ 9FBB 12                     ld      (de),a               ; x-offset from right side
1756+ 9FBC 2C                     inc     l
1757+ 9FBD 10 F9                  djnz    .llp1
1758+ 9FBF C3 8F 9F             jp      .lp2
1759+ 9FC2              ;/*
1760+ 9FC2              ; --- constant width (//)
1761+ 9FC2 4F           .s11:   ld      c,a
1762+ 9FC3 2D                   dec     l
1763+ 9FC4 7E                   ld      a,(hl)
1764+ 9FC5 A7                   and     a
1765+ 9FC6 F2 DB 9F             jp      p,.s1l
1765+ 9FC9
1766+ 9FC9              ;---- right shadow
1767+ 9FC9 E6 7F        .s1r:   and     #7f
1768+ 9FCB 36 00                ld      (hl),0
1769+ 9FCD 2C                   inc     l
1770+ 9FCE 77                   ld      (hl),a
1771+ 9FCF 2C                   inc     l
1772+ 9FD0 2C                   inc     l
1773+ 9FD1 5D           1       ld      e,l
1774+ 9FD2 7E                     ld      a,(hl)
1775+ 9FD3              ;          debug_border_a
1776+ 9FD3 81                     add     a,c
1777+ 9FD4 12                     ld      (de),a               ; x-offset from right side
1778+ 9FD5 2C                     inc     l
1779+ 9FD6 10 F9                  djnz    1B
1780+ 9FD8 C3 8F 9F             jp      .lp2
1781+ 9FDB
1782+ 9FDB              ;---- left shadow
1783+ 9FDB 2C           .s1l:   inc     l
1784+ 9FDC 36 00                ld      (hl),0
1785+ 9FDE 2C                   inc     l
1786+ 9FDF 2C                   inc     l
1787+ 9FE0 5D           1       ld      e,l
1788+ 9FE1 7E                     ld      a,(hl)
1789+ 9FE2              ;          debug_border_a
1790+ 9FE2 81                     add     a,c
1791+ 9FE3 12                     ld      (de),a               ; x-offset from right side
1792+ 9FE4 2C                     inc     l
1793+ 9FE5 10 F9                  djnz    1B
1794+ 9FE7 C3 8F 9F             jp      .lp2
1795+ 9FEA              ;*/
1796+ 9FEA              ; ---------------------------------------
1797+ 9FEA              makeStars:
1798+ 9FEA              ;calls: makeStars.erase
1799+ 9FEA              ;       makeStars.draw
1800+ 9FEA              ;using: struct called "dstar"
1801+ 9FEA ~            /*
1802+ 9FEA ~                    STRUCT dstar
1803+ 9FEA ~            seed1:  dw     0
1804+ 9FEA ~            seed2:  dw     0
1805+ 9FEA ~            count:  db     0         ; number of stars
1806+ 9FEA ~            cltop:  db     0         ; clip top
1807+ 9FEA ~            clbot:  db     0         ; clip bot
1808+ 9FEA ~            dmode:  db     0         ; draw mode (bit 7=0 --> draw in main loop)
1809+ 9FEA ~            */
1810+ 9FEA                      include "demo/rotoid/makestars.a80"
# file opened: ./demo/rotoid/makestars.a80
   1++9FEA              ; speed up of plot routine 24.03.2023
   2++9FEA
   3++9FEA CD FC 9F     .erase: call    .init
   4++9FED 21 DD A0             ld      hl,.ers
   5++9FF0 22 B3 A0             ld      (.pmd+1),hl
   6++9FF3 01 55 55     .del2:  ld      bc,#5555
   7++9FF6 CD A0 A0             call    .drw                    ; erase stars
   8++9FF9 C3 98 A0             jp      .pgr
   9++9FFC
  10++9FFC 3A 68 81     .init:  ld      a,(@page)
  11++9FFF 32 99 A0             ld      (.pgr+1),a
  12++A002 E6 08                and     8
  13++A004 3E 5D                ld      a,#55+8
  14++A006 20 02                jr      nz,.s1
  15++A008 3E 57                ld      a,#57
  16++A00A              .s1:    page_a
  16++A00A 32 68 81    >         ld      (@page),a
  16++A00D             >         page_am
  16++A00D D3 FD       >         out    (#fd),a
  17++A00F
  18++A00F DD 7E 05             ld      a,(ix+dstar.cltop)        ; call from main loop
  19++A012 32 BE A0             ld      (.clt1+1),a
  20++A015 32 DF A0             ld      (.clt2+1),a
  21++A018 DD 7E 06             ld      a,(ix+dstar.clbot)
  22++A01B 32 C1 A0             ld      (.clb1+1),a
  23++A01E 32 E2 A0             ld      (.clb2+1),a
  24++A021 DD 7E 07             ld      a,(ix+dstar.clleft)
  25++A024 32 C5 A0             ld      (.cll1+1),a
  26++A027 32 E6 A0             ld      (.cll2+1),a
  27++A02A DD 7E 08             ld      a,(ix+dstar.clright)
  28++A02D 32 C8 A0             ld      (.clr1+1),a
  29++A030 32 E9 A0             ld      (.clr2+1),a
  30++A033 DD 7E 04             ld      a,(ix+dstar.count)
  31++A036 32 A2 A0             ld      (.drw+2),a
  32++A039 DD 6E 00 DD          ld      hl,(ix+dstar.seed1)
  32++A03D 66 01
  33++A03F 22 A4 A0             ld      (.seed1+1),hl
  34++A042 22 84 A0             ld      (.sd1+1),hl
  35++A045 DD 6E 02 DD          ld      hl,(ix+dstar.seed2)
  35++A049 66 03
  36++A04B 22 A7 A0             ld      (.seed2+1),hl
  37++A04E 22 8A A0             ld      (.sd2+1),hl
  38++A051 C9                   ret
  39++A052
  40++A052 CD FC 9F     .draw:  call   .init
  41++A055 2A 83 94             ld     hl,(scene.posx)
  42++A058                      DUP    3
  43++A058 CB 15       >          rl l
  43++A05A CB 14       >  rl h
  43++A05C CB 15       >          rl l
  43++A05E CB 14       >  rl h
  43++A060 CB 15       >          rl l
  43++A062 CB 14       >  rl h
  44++A064                      EDUP
  45++A064 AF                   xor    a
  46++A065 94                   sub    h
  47++A066 4F                   ld     c,a
  48++A067              ;        ld     c,h
  49++A067
  50++A067 2A 85 94             ld     hl,(scene.posy)
  51++A06A                      DUP    3
  52++A06A CB 15       >          rl l
  52++A06C CB 14       >  rl h
  52++A06E CB 15       >          rl l
  52++A070 CB 14       >  rl h
  52++A072 CB 15       >          rl l
  52++A074 CB 14       >  rl h
  53++A076                      EDUP
  54++A076 AF                   xor    a
  55++A077 94                   sub    h
  56++A078 47                   ld     b,a
  57++A079              ;        ld     b,h
  58++A079
  59++A079 21 55 55     .swap:  ld     hl,#5555
  60++A07C 22 F4 9F             ld     (.del2+1),hl
  61++A07F ED 43 7A A0          ld     (.swap+1),bc
  62++A083
  63++A083 21 55 55     .sd1:   ld     hl,#5555
  64++A086 22 A4 A0             ld     (.seed1+1),hl
  65++A089 21 55 55     .sd2:   ld     hl,#5555
  66++A08C 22 A7 A0             ld     (.seed2+1),hl
  67++A08F 21 BC A0             ld     hl,.plt
  68++A092 22 B3 A0             ld     (.pmd+1),hl
  69++A095 CD A0 A0             call   .drw
  70++A098 3E 55        .pgr:   ld     a,#55
  71++A09A                      page_a
  71++A09A 32 68 81    >         ld      (@page),a
  71++A09D             >         page_am
  71++A09D D3 FD       >         out    (#fd),a
  72++A09F C9                   ret
  73++A0A0
  74++A0A0 DD 2E 55     .drw:   ld    xl,#55
  75++A0A3 21 00 00     .seed1: ld    hl,#0000
  76++A0A6 11 00 00     .seed2: ld    de,#0000
  77++A0A9              .l1:
  78++A0A9 19                   add   hl,de
  79++A0AA 7D                   ld    a,l                      ; e-x, a-y
  80++A0AB 81                   add   a,c                      ; c=offx
  81++A0AC 4F                   ld    c,a
  82++A0AD 7B                   ld    a,e
  83++A0AE 80                   add   a,b                      ; b=offy
  84++A0AF 47                   ld    b,a
  85++A0B0 E5                   push  hl
  86++A0B1 D5                   push  de
  87++A0B2 CD BC A0     .pmd:   call  .plt
  88++A0B5 E1                   pop   hl
  89++A0B6 D1                   pop   de
  90++A0B7 DD 2D                dec   xl
  91++A0B9 20 EE                jr    nz,.l1
  92++A0BB C9                   ret
  93++A0BC
  94++A0BC              .plt:
  95++A0BC 78                   ld    a,b
  96++A0BD FE 55        .clt1:  cp    #55
  97++A0BF D8                   ret   c
  98++A0C0 FE 55        .clb1:  cp    #55
  99++A0C2 D0                   ret   nc
 100++A0C3 79                   ld    a,c
 101++A0C4 FE 55        .cll1:  cp    #55
 102++A0C6 D8                   ret   c
 103++A0C7 FE 55        .clr1:  cp    #55
 104++A0C9 D0                   ret   nc
 105++A0CA 26 89                ld    h,high linetab
 106++A0CC 68                   ld    l,b           ; l=y-pos
 107++A0CD 7E                   ld    a,(hl)        ; low addr from y
 108++A0CE 24                   inc   h
 109++A0CF 56                   ld    d,(hl)        ; vram high
 110++A0D0 24                   inc   h
 111++A0D1 69                   ld    l,c           ; e=x2
 112++A0D2 B6                   or    (hl)
 113++A0D3 5F                   ld    e,a           ; de=vram of x2
 114++A0D4 24                   inc   h
 115++A0D5 7E                   ld    a,(hl)        ;7,4,7,4
 116++A0D6 24                   inc   h
 117++A0D7 B6                   or    (hl)
 118++A0D8 2F                   cpl
 119++A0D9 EB                   ex    de,hl
 120++A0DA B6                   or    (hl)
 121++A0DB 77                   ld    (hl),a
 122++A0DC C9                   ret
 123++A0DD
 124++A0DD              .ers:                       ; screen clipping
 125++A0DD 78                   ld    a,b
 126++A0DE FE 55        .clt2:  cp    #55
 127++A0E0 D8                   ret   c
 128++A0E1 FE 55        .clb2:  cp    #55
 129++A0E3 D0                   ret   nc
 130++A0E4 79                   ld    a,c
 131++A0E5 FE 55        .cll2:  cp    #55
 132++A0E7 D8                   ret   c
 133++A0E8 FE 55        .clr2:  cp    #55
 134++A0EA D0                   ret   nc
 135++A0EB
 136++A0EB 26 89                ld    h,high linetab
 137++A0ED 68                   ld    l,b           ; l=y-pos
 138++A0EE 7E                   ld    a,(hl)        ; low addr from y
 139++A0EF 24                   inc   h
 140++A0F0 56                   ld    d,(hl)        ; vram high
 141++A0F1 24                   inc   h
 142++A0F2 69                   ld    l,c           ; e=x2
 143++A0F3 B6                   or    (hl)
 144++A0F4 5F                   ld    e,a           ; de=vram of x2
 145++A0F5 AF                   xor   a
 146++A0F6 12                   ld    (de),a
 147++A0F7 C9                   ret
 148++A0F8
# file closed: ./demo/rotoid/makestars.a80
1811+ A0F8
1812+ A0F8              ; ---------------------------------------
1813+ A0F8              ; make power table
1814+ A0F8 DD 21 00 8E  mkpwrt: ld      ix,pwrt
1815+ A0FC DD 7D        .lp1:   ld      a,xl
1816+ A0FE 16 00                ld      d,0
1817+ A100 5F                   ld      e,a
1818+ A101 CD 9F AD             call    math.bsmul0816
1819+ A104 DD 75 00             ld      (ix+0),l
1820+ A107 DD 24                inc     xh
1821+ A109 DD 74 00             ld      (ix+0),h
1822+ A10C DD 25                dec     xh
1823+ A10E DD 2C                inc     xl
1824+ A110 20 EA                jr      nz,.lp1
1825+ A112 C9                   ret
1826+ A113              ; ---------------------------------------
1827+ A113              ; make square root table
1828+ A113 DD 21 00 C0  mksqrt: ld      ix,sqrt
1829+ A117 21 00 00             ld      hl,0
1830+ A11A 01 00 40             ld      bc,maxradius*maxradius
1831+ A11D E5           .lp1:   push    hl
1832+ A11E CD B3 AD             call    math.sqr
1833+ A121 E1                   pop     hl
1834+ A122 DD 77 00             ld      (ix+0),a
1835+ A125 DD 23                inc     ix
1836+ A127 ED A1                cpi
1837+ A129 EA 1D A1             jp      pe,.lp1
1838+ A12C C9                   ret
1839+ A12D
1840+ A12D ~            /*
1841+ A12D ~            ; make square root table (slow version)
1842+ A12D ~            mksqrts:
1843+ A12D ~                    ld      ix,sqrt
1844+ A12D ~                    ld      hl,0
1845+ A12D ~                    ld      bc,maxradius*maxradius
1846+ A12D ~            .lp1:   push    hl,bc
1847+ A12D ~                    call    SqrtHL4
1848+ A12D ~                    pop     bc,hl
1849+ A12D ~                    ld      (ix+0),e
1850+ A12D ~                    inc     ix
1851+ A12D ~                    cpi
1852+ A12D ~                    jp      pe,.lp1
1853+ A12D ~                    ret
1854+ A12D ~            */
1855+ A12D
1856+ A12D              eraseObject:
1857+ A12D FD CB 08 76          bit     6,(iy+objdef.options)      ; do not erase object
1858+ A131 C0                   ret     nz
1859+ A132 3A 9C 94             ld      a,(screen.cltop)
1860+ A135 32 56 A1             ld      (.cy1+1),a
1861+ A138 3A 9D 94             ld      a,(screen.clbot)
1862+ A13B 32 CE A1             ld      (.cb+1),a
1863+ A13E FD 7E 12             ld      a,(iy+objdef.clip)
1864+ A141 FE 02                cp      2
1865+ A143 D0                   ret     nc
1866+ A144
1867+ A144 FD 7E 0E             ld      a,(iy+objdef.bbhght)
1868+ A147 A7                   and     a
1869+ A148 C8                   ret     z
1870+ A149 4F                   ld      c,a
1871+ A14A
1872+ A14A FD 6E 10 FD          ld      hl,(iy+objdef.bboxy)
1872+ A14E 66 11
1873+ A150 7C           .chky:  ld      a,h
1874+ A151 A7                   and     a
1875+ A152 20 05                jr      nz,.nexty
1876+ A154 7D                   ld      a,l
1877+ A155 FE 55        .cy1:   cp      #55                  ; (iy+objdef.cltop)
1878+ A157 30 05                jr      nc,.s3
1879+ A159
1880+ A159 23           .nexty: inc     hl
1881+ A15A 0D                   dec     c
1882+ A15B 20 F3                jr      nz,.chky
1883+ A15D C9                   ret                          ; was too high to draw, ret
1884+ A15E
1885+ A15E 32 83 A1     .s3:    ld      (.pos+1),a          ; l=a = new Y position
1886+ A161 79                   ld      a,c                 ; remaining height
1887+ A162 32 85 A1             ld      (.hg+1),a
1888+ A165
1889+ A165 FD 4E 0F             ld      c,(iy+objdef.bboxx)
1890+ A168 26 89                ld      h,high linetab
1891+ A16A 7E                   ld      a,(hl)
1892+ A16B 24                   inc     h
1893+ A16C 56                   ld      d,(hl)
1894+ A16D 24                   inc     h
1895+ A16E 69                   ld      l,c
1896+ A16F 86                   add     a,(hl)
1897+ A170 5F                   ld      e,a
1898+ A171 EB                   ex      de,hl
1899+ A172
1900+ A172                      ;ld      a,(iy+objdef.clbot)
1901+ A172                      ;ld      (.cb+1),a
1902+ A172 FD 7E 0D             ld      a,(iy+objdef.bbwdth)
1903+ A175 2F                   cpl
1904+ A176 87                   add     a,a
1905+ A177 C6 40                add     a,64
1906+ A179 32 8A A1             ld      (.jr+1),a
1907+ A17C
1908+ A17C 3A 21 95             ld      a,(run.vpage+1)
1909+ A17F                      page_c
1909+ A17F CD 5A BF    >         call   @apage
1910+ A182
1911+ A182              ;        ld      a,(currObj.fill)
1912+ A182              ;        ld      (.fill+1),a
1913+ A182
1914+ A182 16 55        .pos:   ld    d,#55
1915+ A184 06 55        .hg:    ld    b,#55
1916+ A186              .lp1:
1917+ A186              ;        xor   a
1918+ A186 3E 55        .fill:  ld    a,#55
1919+ A188                      IFDEF _erasedebug
1920+ A188 ~                     ld    a,#55                     ; debug
1921+ A188                      ENDIF
1922+ A188 5D                   ld    e,l
1923+ A189 18 FE        .jr:    jr    $
1924+ A18B                      dup   32
1925+ A18B 77          >          ld    (hl),a
1926+ A18C 2C          >          inc   l
1925+ A18D 77          >          ld    (hl),a
1926+ A18E 2C          >          inc   l
1925+ A18F 77          >          ld    (hl),a
1926+ A190 2C          >          inc   l
1925+ A191 77          >          ld    (hl),a
1926+ A192 2C          >          inc   l
1925+ A193 77          >          ld    (hl),a
1926+ A194 2C          >          inc   l
1925+ A195 77          >          ld    (hl),a
1926+ A196 2C          >          inc   l
1925+ A197 77          >          ld    (hl),a
1926+ A198 2C          >          inc   l
1925+ A199 77          >          ld    (hl),a
1926+ A19A 2C          >          inc   l
1925+ A19B 77          >          ld    (hl),a
1926+ A19C 2C          >          inc   l
1925+ A19D 77          >          ld    (hl),a
1926+ A19E 2C          >          inc   l
1925+ A19F 77          >          ld    (hl),a
1926+ A1A0 2C          >          inc   l
1925+ A1A1 77          >          ld    (hl),a
1926+ A1A2 2C          >          inc   l
1925+ A1A3 77          >          ld    (hl),a
1926+ A1A4 2C          >          inc   l
1925+ A1A5 77          >          ld    (hl),a
1926+ A1A6 2C          >          inc   l
1925+ A1A7 77          >          ld    (hl),a
1926+ A1A8 2C          >          inc   l
1925+ A1A9 77          >          ld    (hl),a
1926+ A1AA 2C          >          inc   l
1925+ A1AB 77          >          ld    (hl),a
1926+ A1AC 2C          >          inc   l
1925+ A1AD 77          >          ld    (hl),a
1926+ A1AE 2C          >          inc   l
1925+ A1AF 77          >          ld    (hl),a
1926+ A1B0 2C          >          inc   l
1925+ A1B1 77          >          ld    (hl),a
1926+ A1B2 2C          >          inc   l
1925+ A1B3 77          >          ld    (hl),a
1926+ A1B4 2C          >          inc   l
1925+ A1B5 77          >          ld    (hl),a
1926+ A1B6 2C          >          inc   l
1925+ A1B7 77          >          ld    (hl),a
1926+ A1B8 2C          >          inc   l
1925+ A1B9 77          >          ld    (hl),a
1926+ A1BA 2C          >          inc   l
1925+ A1BB 77          >          ld    (hl),a
1926+ A1BC 2C          >          inc   l
1925+ A1BD 77          >          ld    (hl),a
1926+ A1BE 2C          >          inc   l
1925+ A1BF 77          >          ld    (hl),a
1926+ A1C0 2C          >          inc   l
1925+ A1C1 77          >          ld    (hl),a
1926+ A1C2 2C          >          inc   l
1925+ A1C3 77          >          ld    (hl),a
1926+ A1C4 2C          >          inc   l
1925+ A1C5 77          >          ld    (hl),a
1926+ A1C6 2C          >          inc   l
1925+ A1C7 77          >          ld    (hl),a
1926+ A1C8 2C          >          inc   l
1925+ A1C9 77          >          ld    (hl),a
1926+ A1CA 2C          >          inc   l
1927+ A1CB                      edup
1928+ A1CB 6B                   ld    l,e
1929+ A1CC 14                   inc   d
1930+ A1CD
1931+ A1CD 3E 55        .cb:    ld    a,#55
1932+ A1CF BA                   cp    d
1933+ A1D0 D8                   ret   c
1934+ A1D1
1935+ A1D1 24                   inc     h
1936+ A1D2 7C                   ld      a,h
1937+ A1D3 E6 07                and     7
1938+ A1D5 20 0B                jr      nz,.s1
1939+ A1D7
1940+ A1D7 7D                   ld      a,l
1941+ A1D8 C6 20                add     a,32
1942+ A1DA 6F                   ld      l,a
1943+ A1DB DA E2 A1             jp      c,.s1
1944+ A1DE
1945+ A1DE 7C                   ld      a,h
1946+ A1DF D6 08                sub     8
1947+ A1E1 67                   ld      h,a
1948+ A1E2              .s1:
1949+ A1E2 10 A2                djnz    .lp1
1950+ A1E4 C9                   ret
1951+ A1E5
1952+ A1E5              ; Light set-up and calculation  -------------
1953+ A1E5              ; calc light, modes:
1954+ A1E5              ; bit 0: 0 = angle is calculated from high byte of posx
1955+ A1E5              ;        1 = angle is calculated from low byte of posx
1956+ A1E5              ; bit 1: 0 = light_z is ignored for brightness
1957+ A1E5              ;        1 = (object_z - light_z)<0 dark, >0 bright
1958+ A1E5
1959+ A1E5              setLight:
1960+ A1E5 0E 08                ld      c,objdef.options
1961+ A1E7 06 00                ld      b,0
1962+ A1E9 09                   add     hl,bc
1963+ A1EA 7E                   ld      a,(hl)
1964+ A1EB CB 57                bit     2,a
1965+ A1ED CA 10 A2             jp      z,calcLight
1966+ A1F0 E6 03                and     #03
1967+ A1F2 32 97 94             ld      (light.mode),a
1968+ A1F5 DD 6E 04 DD          ld      hl,(ix+mobdef.posx)
1968+ A1F9 66 05
1969+ A1FB 22 8D 94             ld      (light.posx),hl
1970+ A1FE DD 6E 08 DD          ld      hl,(ix+mobdef.posz)
1970+ A202 66 09
1971+ A204 22 8F 94             ld      (light.posz),hl
1972+ A207 3E 37                ld      a,    #37
1973+ A209 32 15 A3             ld      (calcLight.tgl1),a
1974+ A20C 32 27 A3             ld      (calcLight.tgl2),a
1975+ A20F C9                   ret
1976+ A210
1977+ A210              calcLight:
1978+ A210 0E 00                ld      c,0                     ; brightness correction
1979+ A212 79                   ld      a,c
1980+ A213 32 B9 A2             ld      (.blk+1),a
1981+ A216 3A 97 94             ld      a,(light.mode)
1982+ A219 CB 4F                bit     1,a
1983+ A21B CA AF A2             jp      z,.objx                 ; change bright according to difference in Z-pos?
1984+ A21E
1985+ A21E              ;calculate brightness correction based on posx and posz
1986+ A21E DD 6E 08 DD          ld      hl,(ix+mobdef.posz)
1986+ A222 66 09
1987+ A224 ED 4B 8F 94          ld      bc,(light.posz)
1988+ A228 B7 ED 42             sub     hl,bc
1989+ A22B 3E 37                ld      a,    #37
1990+ A22D F2 37 A2             jp      p,1F
1991+ A230 3E 0D                  ld      a,13                    ; dark side of the light brightness decrease
1992+ A232 32 B9 A2               ld      (.blk+1),a
1993+ A235 3E A7                  ld      a,   #a7
1994+ A237 32 15 A3     1       ld      (.tgl1),a
1995+ A23A 32 27 A3             ld      (.tgl2),a
1996+ A23D EB                   ex      de,hl
1997+ A23E DD 6E 04 DD          ld      hl,(ix+mobdef.posx)
1997+ A242 66 05
1998+ A244 ED 4B 8D 94          ld      bc,(light.posx)
1999+ A248 B7 ED 42             sub     hl,bc
2000+ A24B              ;abs hl
2001+ A24B CB 7C        2       bit     7,h
2002+ A24D 28 06                jr      z,1F
2003+ A24F AF                   xor     a
2004+ A250 95                   sub     l
2005+ A251 6F                   ld      l,a
2006+ A252 9F                   sbc     a,a
2007+ A253 94                   sub     h
2008+ A254 67                   ld      h,a
2009+ A255              ;abs de
2010+ A255 CB 7A        1       bit     7,d
2011+ A257 28 06                jr      z,1F
2012+ A259 AF                   xor     a
2013+ A25A 93                   sub     e
2014+ A25B 5F                   ld      e,a
2015+ A25C 9F                   sbc     a,a
2016+ A25D 92                   sub     d
2017+ A25E 57                   ld      d,a
2018+ A25F              1
2019+ A25F CB 3C                srl     h
2019+ A261 CB 1D          rr  l
2020+ A263 CB 3C                srl     h
2020+ A265 CB 1D          rr  l
2021+ A267
2022+ A267 CB 3A                srl     d
2022+ A269 CB 1B          rr  e
2023+ A26B
2024+ A26B              ;-- tests prior powers > 8 bit - abs values too big (far)
2025+ A26B 7C                   ld      a,h
2026+ A26C A7                   and     a
2027+ A26D 20 3E                jr      nz,.s0e
2028+ A26F 7A                   ld      a,d
2029+ A270 A7                   and     a
2030+ A271 20 3A                jr      nz,.s0e
2031+ A273
2032+ A273              ;-- power of abs values
2033+ A273 26 8E                ld      h,high pwrt
2034+ A275 4E                   ld      c,(hl)
2035+ A276 24                   inc     h
2036+ A277 46                   ld      b,(hl)             ; bc = l^2
2037+ A278 25                   dec     h
2038+ A279 6B                   ld      l,e
2039+ A27A 5E                   ld      e,(hl)
2040+ A27B 24                   inc     h
2041+ A27C 56                   ld      d,(hl)             ; de = e^2
2042+ A27D EB                   ex      de,hl
2043+ A27E 09                   add     hl,bc              ; hl = l^2 + e^2
2044+ A27F
2045+ A27F              ;-- tests of overflow
2046+ A27F DA AD A2             jp      c,.s0e             ; squares higher than #ffff
2047+ A282 3E 3F                ld      a,#3f
2048+ A284 BC                   cp      h
2049+ A285 DA AD A2             jp      c,.s0e             ; sum of squares higher than sqrt table
2050+ A288
2051+ A288              ;-- sqrt
2052+ A288 3A 68 81             ld      a,(@page)
2053+ A28B 08                   ex      af,af
2054+ A28C 3A 7A 94               ld      a,(vpage.sqrt)
2054+ A28F                page_a
2054+ A28F 32 68 81    >         ld      (@page),a
2054+ A292             >         page_am
2054+ A292 D3 FD       >         out    (#fd),a
2055+ A294 7C                   ld      a,h
2056+ A295 F6 C0                or      high sqrt
2057+ A297 67                   ld      h,a
2058+ A298 7E                   ld      a,(hl)             ; distance | a = sqrt(hl)
2059+ A299
2060+ A299              ;-- divide to get brightness range
2061+ A299 1F                   rra
2062+ A29A 1F                   rra
2063+ A29B E6 3F                and     %00111111
2064+ A29D 4F                   ld      c,a
2065+ A29E 08                     ex      af,af
2065+ A29F                page_a
2065+ A29F 32 68 81    >         ld      (@page),a
2065+ A2A2             >         page_am
2065+ A2A2 D3 FD       >         out    (#fd),a
2066+ A2A4
2067+ A2A4 3E 10                ld      a,#10
2068+ A2A6 91                   sub     c
2069+ A2A7
2070+ A2A7 DA AD A2             jp      c,.s0e             ; >16?
2071+ A2AA 4F                   ld      c,a                ; no
2072+ A2AB 18 02                jr      .objx
2073+ A2AD
2074+ A2AD 0E 00        .s0e:   ld      c,#00                ; distance too far => c=0 no change of brightness
2075+ A2AF
2076+ A2AF ED 5B 91 94  .objx:  ld      de,(light.bright)  ; e-brightness, d-contrast
2077+ A2B3 3E 07                ld      a,7                ; 7 half of the contrast range
2078+ A2B5 92                   sub     d
2079+ A2B6 57                   ld      d,a
2080+ A2B7 7B                   ld      a,e
2081+ A2B8 D6 55        .blk:   sub     #55                ; brigntness decrease when light is behind object
2082+ A2BA 81                   add     a,c                ; brightness+distance
2083+ A2BB 5F                   ld      e,a
2084+ A2BC
2085+ A2BC 3A 97 94             ld      a,(light.mode)
2086+ A2BF CB 47                bit     0,a
2087+ A2C1 C2 FE A2             jp      nz,.m0             ; .m0 > calculate from lower byte of positions
2088+ A2C4 3A 8E 94             ld      a,(light.posx+1)
2089+ A2C7 A7                   and     a
2090+ A2C8 FA E5 A2             jp      m,.s3
2091+ A2CB
2092+ A2CB              ;--- positive value
2093+ A2CB 1F           .s2:    rra
2094+ A2CC E6 3F                and     #3f
2095+ A2CE 6F                   ld      l,a
2096+ A2CF 3E 3F                ld      a,#3f
2097+ A2D1 95                   sub     l
2098+ A2D2 32 93 94             ld      (light.angle),a
2099+ A2D5 7D                   ld      a,l
2100+ A2D6 1F                   rra
2101+ A2D7 1F                   rra
2102+ A2D8 E6 0F                and     #0f
2103+ A2DA 6F                   ld      l,a
2104+ A2DB 7B                   ld      a,e                     ; brightness
2105+ A2DC 32 95 94             ld      (light.reff),a
2106+ A2DF 82                   add     a,d                     ; contrast
2107+ A2E0 95                   sub     l                       ; sub shadow difference
2108+ A2E1 32 94 94             ld      (light.leff),a
2109+ A2E4 C9                   ret
2110+ A2E5
2111+ A2E5              ;--- negative                           ; de = brightness, contrast, a=x-difference (pos_object - pos_light)
2112+ A2E5 ED 44        .s3:    neg
2113+ A2E7 1F           .s31:   rra
2114+ A2E8 E6 3F                and     #3f
2115+ A2EA 6F                   ld      l,a
2116+ A2EB 32 93 94             ld      (light.angle),a
2117+ A2EE 7D                   ld      a,l
2118+ A2EF 1F                   rra
2119+ A2F0 1F                   rra
2120+ A2F1 E6 0F                and     #0f
2121+ A2F3 6F                   ld      l,a
2122+ A2F4 7B                   ld      a,e
2123+ A2F5 32 94 94             ld      (light.leff),a
2124+ A2F8 82                   add     a,d
2125+ A2F9 95                   sub     l
2126+ A2FA 32 95 94             ld      (light.reff),a
2127+ A2FD C9                   ret
2128+ A2FE
2129+ A2FE DD 6E 04 DD  .m0:    ld      hl,(ix+mobdef.posx)
2129+ A302 66 05
2130+ A304 78                   ld      a,b
2131+ A305 ED 4B 8D 94          ld      bc,(light.posx)
2132+ A309 B7 ED 42             sub     hl,bc
2133+ A30C 47                   ld      b,a
2134+ A30D FA 1C A3             jp      m,.s30
2135+ A310
2136+ A310              ;light from left
2137+ A310 AF                   xor     a
2138+ A311 94                   sub     h
2139+ A312 9F                   sbc     a,a
2140+ A313 B5                   or      l
2141+ A314 1F                   rra
2142+ A315 37           .tgl1:  scf
2143+ A316 DA E7 A2             jp      c,.s31                    ; .s31 when light is in front of object
2144+ A319 C3 CB A2             jp      .s2                     ; .s2 when light is behind the object
2145+ A31C
2146+ A31C              ; light from right
2147+ A31C              .s30:
2148+ A31C AF                   xor     a
2149+ A31D 95                   sub     l
2150+ A31E 6F                   ld      l,a
2151+ A31F 9F                   sbc     a,a
2152+ A320 94                   sub     h       ; h>0 - cy
2153+ A321 67                   ld      h,a
2154+ A322 AF                   xor     a
2155+ A323 94                   sub     h
2156+ A324 9F                   sbc     a,a     ; #ff
2157+ A325 B5                   or      l
2158+ A326 1F                   rra
2159+ A327 37           .tgl2:  scf
2160+ A328 DA CB A2             jp      c,.s2                     ; .s2 when light is behind the object
2161+ A32B C3 E7 A2             jp      .s31                    ; .s31 when light is in front of object
2162+ A32E
2163+ A32E              ; -------------
2164+ A32E              ; calculate x-data
2165+ A32E
2166+ A32E              ; -------------
2167+ A32E              ; right side
2168+ A32E              calcRight:
2169+ A32E FD 2A 60 94          ld	    iy,(lsxy.obdef)           ; line command data
2170+ A332 AF                   xor     a                         ; do not clip by default
2171+ A333 32 72 94             ld      (lsxy.clip),a             ; clip by default in case
2172+ A336 3A 62 94             ld      a,(lsxy.scale)            ; if bit 7 of .scale is set then no scaling is applied
2173+ A339 D9                   exx
2174+ A33A 4F                   ld      c,a                       ; c=scale factor
2175+ A33B 2E 00                ld      l,0
2176+ A33D D9                   exx
2177+ A33E
2178+ A33E              .cxloop:
2179+ A33E 3A 7B 94             ld      a,(vpage.scen)            ; to return from calc.arc that changes page
2180+ A341                      page_a
2180+ A341 32 68 81    >         ld      (@page),a
2180+ A344             >         page_am
2180+ A344 D3 FD       >         out    (#fd),a
2181+ A346
2182+ A346 D9                   exx
2183+ A347 26 90                ld      h,high ldata
2184+ A349 D9                   exx
2185+ A34A 3A 68 94             ld      a,(lsxy.options)
2186+ A34D 4F                   ld      c,a
2187+ A34E FD 7E 00             ld	    a,(iy+symobj.type)        ; read object type (bit 7=1; calculate right side)
2188+ A351 E6 7F                and	    #7f
2189+ A353 CA 33 A4             jp	    z,.arc                    ; 0 calculate arc
2190+ A356 3D                   dec	    a
2191+ A357 CA CD A4             jp	    z,.lin                    ; 1 calculate line
2192+ A35A CB B1                res     6,c
2193+ A35C 3D                   dec     a
2194+ A35D 28 0A                jr      z,.box                    ; 2 calculate bounding box
2195+ A35F CB F1                set     6,c
2196+ A361 3D                   dec     a
2197+ A362 28 05                jr      z,.box                    ; 3 bounding box only (no erase object)
2198+ A364 D9                   exx
2199+ A365 36 FF                ld      (hl),#ff                  ; end mark
2200+ A367 D9                   exx
2201+ A368 C9                   ret
2202+ A369              ;-----------------------------------------
2203+ A369 79           .box:   ld      a,c
2204+ A36A 32 68 94             ld      (lsxy.options),a
2205+ A36D FD 7E 06             ld      a,(iy+symobj.par1)
2206+ A370 32 87 A1             ld      (eraseObject.fill+1),a
2207+ A373 3A 62 94             ld      a,(lsxy.scale)
2208+ A376
2209+ A376 5F                   ld	    e,a
2210+ A377 17                   rla
2211+ A378 9F                   sbc     a,a
2212+ A379 B3                   or      e                         ; if a>127, then 127
2213+ A37A E6 7F                and     #7f
2214+ A37C
2215+ A37C 5F                   ld      e,a
2216+ A37D FD 7E 02             ld      a,(iy+symobj.yoff)        ; half of bounding box height
2217+ A380 CD 9E AF             call    math.mul87                ; math.mul7b
2218+ A383 4F                   ld      c,a
2219+ A384 A7                   and     a
2220+ A385 28 01                jr      z,1F                      ; if height is zero, keep it to skip erasing object
2221+ A387 0C                   inc     c                         ; improve rounding error
2222+ A388 06 00        1       ld      b,0
2223+ A38A
2224+ A38A              ;-- check clip top/bottom
2225+ A38A 2A 6B 94             ld      hl,(lsxy.posy16)
2226+ A38D 3A 9D 94             ld      a,(screen.clbot)
2227+ A390 5F                   ld      e,a
2228+ A391 16 00                ld      d,0
2229+ A393 B7 ED 52             sub     hl,de
2230+ A396 F2 AC A3             jp      p,.s0                    ; posy > clip_bottom screen?
2231+ A399
2232+ A399 2A 6B 94             ld      hl,(lsxy.posy16)
2233+ A39C 22 70 94             ld      (lsxy.bboxy),hl          ; save y-position of bounding box
2234+ A39F 54                   ld      d,h
2235+ A3A0 5D                   ld      e,l
2236+ A3A1
2237+ A3A1 09                   add     hl,bc
2238+ A3A2 AF                   xor     a
2239+ A3A3 92                   sub     d
2240+ A3A4 B2                   or      d
2241+ A3A5 47                   ld      b,a
2242+ A3A6 AF                   xor     a
2243+ A3A7 94                   sub     h
2244+ A3A8 B4                   or      h
2245+ A3A9 80                   add     a,b
2246+ A3AA 30 09                jr      nc,.s1
2247+ A3AC AF           .s0:    xor     a
2248+ A3AD 32 6E 94             ld      (lsxy.bbhght),a
2249+ A3B0 2F                   cpl
2250+ A3B1 32 72 94             ld      (lsxy.clip),a
2251+ A3B4 C9                   ret
2252+ A3B5
2253+ A3B5 3A 9C 94     .s1:    ld      a,(screen.cltop)
2254+ A3B8 5F                   ld      e,a
2255+ A3B9 16 00                ld      d,0
2256+ A3BB B7 ED 52             sub     hl,de
2257+ A3BE FA AC A3             jp      m,.s0
2258+ A3C1
2259+ A3C1 79                   ld      a,c
2260+ A3C2 32 6E 94             ld      (lsxy.bbhght),a
2261+ A3C5
2262+ A3C5              ; ------ width
2263+ A3C5 3A 62 94             ld      a,(lsxy.scale)
2264+ A3C8
2265+ A3C8 A7                   and     a
2266+ A3C9 F2 CE A3             jp      p,1F
2267+ A3CC 3E 7F                ld      a,#7f                    ;
2268+ A3CE              1
2269+ A3CE 5F                   ld      e,a
2270+ A3CF FD 7E 01             ld      a,(iy+symobj.woff)        ; woff holds max width of the object
2271+ A3D2 CD 9E AF             call    math.mul87                ; resize width
2272+ A3D5 2A 69 94             ld      hl,(lsxy.posx16)
2273+ A3D8 3C                   inc     a
2274+ A3D9 4F                   ld      c,a
2275+ A3DA 06 00                ld      b,0
2276+ A3DC 09                   add     hl,bc                     ; hl new position of right boundary
2277+ A3DD 54                   ld      d,h
2278+ A3DE 5D                   ld      e,l
2279+ A3DF
2280+ A3DF 2A 69 94             ld      hl,(lsxy.posx16)
2281+ A3E2 AF                   xor     a                         ;
2282+ A3E3 91                   sub     c                         ; neg C
2283+ A3E4 4F                   ld      c,a                       ;
2284+ A3E5 17                   rla                               ;
2285+ A3E6 9F                   sbc     a,a                       ;
2286+ A3E7 47                   ld      b,a                       ; neg 16 bit bc
2287+ A3E8 09                   add     hl,bc                     ; .. new position of left boundary
2288+ A3E9
2289+ A3E9              ; ----- clip and visibility check
2290+ A3E9              ; by shuffling 7th bit of h and d we can get if bounding box
2291+ A3E9              ; is in visible, partially visible or invisible part of the screen
2292+ A3E9
2293+ A3E9 0E 00                ld     c,0
2294+ A3EB CB 7C                bit    7,h
2295+ A3ED 28 01                jr     z,.c1                      ; test of left side <0
2296+ A3EF 0C                   inc    c                          ; yes, inc c
2297+ A3F0 CB 7A        .c1:    bit    7,d                        ; test of right side <0
2298+ A3F2 28 01                jr     z,.c2
2299+ A3F4 0C                   inc    c
2300+ A3F5 AF           .c2:    xor    a
2301+ A3F6 94                   sub    h                          ; 13.04.2019
2302+ A3F7 17                   rla
2303+ A3F8 30 01                jr     nc,.c3
2304+ A3FA 0C                   inc    c
2305+ A3FB AF           .c3:    xor    a
2306+ A3FC 92                   sub    d
2307+ A3FD 17                   rla
2308+ A3FE 30 01                jr     nc,.c4
2309+ A400 0C                   inc    c
2310+ A401 79           .c4:    ld     a,c
2311+ A402 32 72 94             ld     (lsxy.clip),a
2312+ A405 DD 6F                ld     xl,a
2313+ A407              ; -----
2314+ A407 AF                   xor     a
2315+ A408 94                   sub     h                         ; neg h
2316+ A409 B4                   or      h                         ; a=0 or 255
2317+ A40A B5                   or      l
2318+ A40B 6F                   ld      l,a                       ; l=#ff if h>0 else l
2319+ A40C CB 04                rlc     h                         ; test if h<0
2320+ A40E 9F                   sbc     a,a                       ;
2321+ A40F AD                   xor     l                         ; if h<0 then a=0 else l
2322+ A410 32 6F 94             ld      (lsxy.bboxx),a            ; left position in the screen
2323+ A413
2324+ A413 6F                   ld      l,a                       ; calculated position in the screen of left side bbox
2325+ A414 26 8B                ld      h,high lineadd
2326+ A416 4E                   ld      c,(hl)
2327+ A417 AF                   xor     a
2328+ A418 92                   sub     d
2329+ A419 B2                   or      d
2330+ A41A B3                   or      e
2331+ A41B 5F                   ld      e,a
2332+ A41C CB 02                rlc     d
2333+ A41E 9F                   sbc     a,a
2334+ A41F AB                   xor     e
2335+ A420
2336+ A420 6F                   ld      l,a
2337+ A421 7E                   ld      a,(hl)
2338+ A422 91                   sub     c
2339+ A423 32 6D 94             ld      (lsxy.bbwdth),a           ; width of the bounding box
2340+ A426
2341+ A426 01 0A 00     .s2:    ld	bc,symobj
2342+ A429 FD 09                add	iy,bc
2343+ A42B
2344+ A42B 3E 01                ld      a,1
2345+ A42D DD BD                cp      xl
2346+ A42F D2 3E A3             jp      nc,.cxloop                ; calculate object if it's in visible area (0,1,2)
2347+ A432 C9                   ret                               ; otherwise skip
2348+ A433
2349+ A433              ;-----------------------------------------
2350+ A433 D9           .arc:   exx                               ; same section in .lin see comments
2351+ A434 FD CB 00 7E          bit     7,(iy+symobj.type)        ; test of assymetric object definition
2352+ A438 CA 44 A4             jp      z,.s2a
2353+ A43B 3A A2 94             ld      a,(currObj.ldata)
2354+ A43E 6F                   ld      l,a
2355+ A43F 26 92                ld      h,high ldatl
2356+ A441 C3 4A A4             jp      .s1a
2357+ A444 26 90        .s2a:   ld      h,high ldata
2358+ A446 7D                   ld      a,l
2359+ A447 32 A2 94             ld      (currObj.ldata),a
2360+ A44A D9           .s1a:   exx
2361+ A44B              ;-----------
2362+ A44B 3A 62 94             ld      a,(lsxy.scale)
2363+ A44E              ;        bit     7,a
2364+ A44E A7                   and     a
2365+ A44F FA 53 A5             jp      m,.arc_noscale
2366+ A452 6F                   ld      l,a
2367+ A453 5D FD 7E 09          ld	    e,l,a,(iy+symobj.reff)
2368+ A457 A7                   and     a
2369+ A458 FC 64 AF             call    m,math.mul7b
2370+ A45B 32 B5 A4             ld      (.rf1+1),a
2371+ A45E 5D FD 7E 04          ld	    e,l,a,(iy+symobj.y0)
2372+ A462 CD 64 AF             call    math.mul7b
2373+ A465 32 A5 A4             ld      (.y01+2),a
2374+ A468 5D FD 7E 05          ld	    e,l,a,(iy+symobj.y1)      ; height
2375+ A46C A7                     and     a
2376+ A46D CA 4B A5               jp      z,.restx                   ; height = 0 then skip
2377+ A470              ;        call    math.mul7b
2378+ A470 CD 9E AF             call    math.mul87
2379+ A473 A7                     and     a                         ; 01.05.2019
2380+ A474 20 01                  jr      nz,1f                     ;
2381+ A476 3C                     inc     a                         ; 19.01.2019 fix of line gaps due to INT(>x.5)
2382+ A477 32 A7 A4     1       ld      (.y11+1),a
2383+ A47A 5D FD 7E 03          ld	    e,l,a,(iy+symobj.xoff)
2384+ A47E CD 64 AF             call    math.mul7b
2385+ A481 32 AD A4             ld      (.xo1+1),a
2386+ A484 5D FD 7E 01          ld	    e,l,a,(iy+symobj.woff)
2387+ A488 CD 64 AF             call    math.mul7b
2388+ A48B 32 BB A4             ld      (.wo1+1),a
2389+ A48E 5D FD 7E 02          ld	    e,l,a,(iy+symobj.yoff)
2390+ A492              ;        call    math.mul7b
2391+ A492 CD 9E AF             call    math.mul87
2392+ A495 32 B8 A4             ld      (.yo1+1),a
2393+ A498 5D FD 7E 06          ld	    e,l,a,(iy+symobj.par1)    ; radius
2394+ A49C CD 64 AF             call    math.mul7b
2395+ A49F 32 BE A4             ld      (.p11+1),a
2396+ A4A2
2397+ A4A2              ; store segment into memory. Format:
2398+ A4A2              ; db height
2399+ A4A2              ; db drawing x-offset
2400+ A4A2              ; db shader left
2401+ A4A2              ; db shader right
2402+ A4A2              ; db drawing y-offset
2403+ A4A2
2404+ A4A2 D9                   exx
2405+ A4A3 DD 2E 55     .y01:   ld      xl,#55
2406+ A4A6 3E 55        .y11:   ld      a,#55
2407+ A4A8              ;        sub     xl                                   ; new height
2408+ A4A8              ;        and     a
2409+ A4A8              ;        jp      m,.rest
2410+ A4A8 DD 67                ld      xh,a
2411+ A4AA 77                   ld      (hl),a                                ; height
2412+ A4AB              ;        and     a
2413+ A4AB              ;        ex      af,af                                 ; save z-flag
2414+ A4AB 2C                   inc     l
2415+ A4AC 36 55        .xo1:   ld      (hl),#55                              ; store x-offset
2416+ A4AE 2C                   inc     l
2417+ A4AF FD 7E 08             ld      a,(iy+symobj.leff)                    ; store effect (aka shading)
2418+ A4B2 77                   ld      (hl),a                                ; effect
2419+ A4B3 2C                   inc     l
2420+ A4B4 36 55        .rf1:   ld      (hl),#55
2421+ A4B6              ;        ld      a,(iy+symobj.reff)
2422+ A4B6              ;        ld      (hl),a
2423+ A4B6 2C                   inc     l
2424+ A4B7 36 55        .yo1:   ld      (hl),#55                              ; y-offset
2425+ A4B9 2C                   inc     l
2426+ A4BA 06 55        .wo1:   ld      b,#55
2427+ A4BC D9                   exx
2428+ A4BD              ;        ex      af,af
2429+ A4BD 3E 55        .p11:   ld      a,#55
2430+ A4BF FD 4E 07             ld	    c,(iy+symobj.par2)                    ; c=quadrant
2431+ A4C2              ;        call	nz,clc.arc                            ; call only if height <> 0
2432+ A4C2 CD CE A5             call	clc.arc
2433+ A4C5 01 0A 00             ld	bc,symobj
2434+ A4C8 FD 09                add	iy,bc
2435+ A4CA C3 3E A3             jp	.cxloop
2436+ A4CD
2437+ A4CD              ;-----------------------------------------------------
2438+ A4CD D9           .lin:   exx
2439+ A4CE FD CB 00 7E          bit     7,(iy+symobj.type)                   ; if segment has 7th bit set in type (calculate left side individually)
2440+ A4D2 CA DE A4             jp      z,.s2l                               ; then lets use previous buffer position (=right side calculated first!)
2441+ A4D5 3A A2 94             ld      a,(currObj.ldata)
2442+ A4D8 6F                   ld      l,a
2443+ A4D9 26 92                ld      h,high ldatl
2444+ A4DB C3 E4 A4             jp      .s1l
2445+ A4DE 26 90        .s2l:   ld      h,high ldata
2446+ A4E0 7D                   ld      a,l
2447+ A4E1 32 A2 94             ld      (currObj.ldata),a                    ; store previous buffer position
2448+ A4E4 D9           .s1l:   exx
2449+ A4E5              ;----------
2450+ A4E5 3A 62 94             ld      a,(lsxy.scale)
2451+ A4E8              ;        bit     7,a
2452+ A4E8 A7                   and     a
2453+ A4E9 FA 8D A5             jp      m,.lin_noscale
2454+ A4EC 6F                   ld      l,a
2455+ A4ED 5D FD 7E 09          ld	    e,l,a,(iy+symobj.reff)
2456+ A4F1 A7                   and     a
2457+ A4F2 FC 64 AF             call    m,math.mul7b
2458+ A4F5 32 42 A5             ld      (.rf2+1),a
2459+ A4F8 5D FD 7E 05          ld	e,l,a,(iy+symobj.y1)
2460+ A4FC A7                     and     a
2461+ A4FD CA 4B A5               jp      z,.restx
2462+ A500              ;        call    math.mul7b
2463+ A500 CD 9E AF             call    math.mul87
2464+ A503 A7                     and     a                                    ; 01.05.2019
2465+ A504 20 01                  jr      nz,1F                                ;
2466+ A506 3C                     inc     a                                    ; 19.01.2019 fix of line gaps
2467+ A507 32 34 A5     1       ld      (.y12+1),a
2468+ A50A 5D FD 7E 03          ld	    e,l,a,(iy+symobj.xoff)
2469+ A50E CD 64 AF             call    math.mul7b
2470+ A511 32 3A A5             ld      (.xo2+1),a
2471+ A514 5D FD 7E 01          ld	    e,l,a,(iy+symobj.woff)
2472+ A518 CD 64 AF             call    math.mul7b
2473+ A51B 32 30 A5             ld      (.wo2+1),a
2474+ A51E 5D FD 7E 02          ld	    e,l,a,(iy+symobj.yoff)
2475+ A522 CD 9E AF             call    math.mul87
2476+ A525 32 45 A5             ld      (.yo2+1),a
2477+ A528
2478+ A528 D9                   exx
2479+ A529 FD 4E 06             ld	c,(iy+symobj.par1)                    ; slope low
2480+ A52C FD 46 07             ld	b,(iy+symobj.par2)                    ; slope high
2481+ A52F 16 55        .wo2:   ld      d,#55
2482+ A531 1E 00                ld	e,0
2483+ A533 3E 55        .y12:   ld      a,#55                                 ; height of line
2484+ A535              ;        and     a
2485+ A535              ;        jp      m,.rest                               ; height=0?
2486+ A535 DD 67                ld      xh,a
2487+ A537 77                   ld      (hl),a                                ; store number of lines
2488+ A538              ;        and     a
2489+ A538              ;        ex      af,af
2490+ A538 2C                   inc     l
2491+ A539 36 55        .xo2:   ld      (hl),#55
2492+ A53B 2C                   inc     l
2493+ A53C FD 7E 08             ld      a,(iy+symobj.leff)                    ; store effect (aka shading)
2494+ A53F 77                   ld      (hl),a                                ; effect
2495+ A540 2C                   inc     l
2496+ A541 36 55        .rf2:   ld      (hl),#55
2497+ A543              ;        ld      a,(iy+symobj.reff)
2498+ A543              ;        ld      (hl),a
2499+ A543 2C                   inc     l
2500+ A544 36 55        .yo2:   ld      (hl),#55
2501+ A546 2C                   inc     l
2502+ A547              ;        ex      af,af
2503+ A547              ;        call	nz,clc.line
2504+ A547 CD E5 A6             call	clc.line
2505+ A54A D9           .rest:  exx
2506+ A54B 01 0A 00     .restx: ld	    bc,symobj
2507+ A54E FD 09                add	    iy,bc
2508+ A550 C3 3E A3             jp	    .cxloop
2509+ A553
2510+ A553              ;-----------------------------------------------------
2511+ A553              .arc_noscale:
2512+ A553 FD 4E 07             ld	c,(iy+symobj.par2)                    ; c=quadrant
2513+ A556 D9                   exx
2514+ A557 FD 46 01             ld	b,(iy+symobj.woff)                    ; b=w-offset
2515+ A55A FD 7E 04             ld	a,(iy+symobj.y0)
2515+ A55D DD 6F          ld xl,a
2516+ A55F FD 7E 05             ld	a,(iy+symobj.y1)                      ; ld xh,a
2517+ A562 A7                   and     a
2518+ A563 CA 4A A5             jp      z,.rest
2519+ A566 DD 67                ld      xh,a
2520+ A568 77                   ld      (hl),a                                ; store number of lines
2521+ A569 2C                   inc     l
2522+ A56A FD 7E 03             ld      a,(iy+symobj.xoff)
2523+ A56D 77                   ld      (hl),a
2524+ A56E 2C                   inc     l
2525+ A56F FD 7E 08             ld      a,(iy+symobj.leff)                    ; store effect (aka shading)
2526+ A572 77                   ld      (hl),a                                ; effect
2527+ A573 2C                   inc     l
2528+ A574 FD 7E 09             ld      a,(iy+symobj.reff)
2529+ A577 77                   ld      (hl),a
2530+ A578 2C                   inc     l
2531+ A579 FD 7E 02             ld      a,(iy+symobj.yoff)
2532+ A57C 77                   ld      (hl),a
2533+ A57D 2C                   inc     l
2534+ A57E D9                   exx
2535+ A57F FD 7E 06             ld	a,(iy+symobj.par1)                    ; a=radius
2536+ A582 CD CE A5             call	clc.arc
2537+ A585 01 0A 00             ld	bc,symobj
2538+ A588 FD 09                add	iy,bc
2539+ A58A C3 3E A3             jp	.cxloop
2540+ A58D
2541+ A58D              ;-----------------------------------------------------
2542+ A58D              .lin_noscale:
2543+ A58D D9                   exx
2544+ A58E FD 4E 06             ld	c,(iy+symobj.par1)                    ; slope low
2545+ A591 FD 46 07             ld	b,(iy+symobj.par2)                    ; slope high
2546+ A594 FD 56 01             ld	d,(iy+symobj.woff)                    ; w-off (d will be new x-position)
2547+ A597 1E 00                ld	e,0
2548+ A599 FD 7E 05             ld	a,(iy+symobj.y1)
2549+ A59C A7                   and     a
2550+ A59D CA 4A A5             jp      z,.rest
2551+ A5A0 77                   ld      (hl),a                                ; store number of lines (no zero check!)
2552+ A5A1 DD 67                ld      xh,a
2553+ A5A3 2C                   inc     l
2554+ A5A4 FD 7E 03             ld      a,(iy+symobj.xoff)
2555+ A5A7 77                   ld      (hl),a
2556+ A5A8 2C                   inc     l
2557+ A5A9 FD 7E 08             ld      a,(iy+symobj.leff)                    ; store effect (aka shading)
2558+ A5AC 77                   ld      (hl),a                                ; effect
2559+ A5AD 2C                   inc     l
2560+ A5AE FD 7E 09             ld      a,(iy+symobj.reff)
2561+ A5B1 77                   ld      (hl),a
2562+ A5B2 23                   inc     hl
2563+ A5B3 FD 7E 02             ld      a,(iy+symobj.yoff)
2564+ A5B6 77                   ld      (hl),a
2565+ A5B7 2C                   inc     l
2566+ A5B8 CD E5 A6             call	clc.line
2567+ A5BB D9                   exx
2568+ A5BC 01 0A 00             ld	    bc,symobj
2569+ A5BF FD 09                add	    iy,bc
2570+ A5C1 C3 3E A3             jp	    .cxloop
2571+ A5C4
2572+ A5C4              ;-----------------------------------------
2573+ A5C4              ;                      Quadrant /2,1\
2574+ A5C4              ;                               \3,0/
2575+ A5C4              ; q0: x=sqr(r^2-y^2)
2576+ A5C4              ; q1: x=sqr(r^2-(r-y)^2)
2577+ A5C4              ; q2: x=r-sqr(r^2-(r-y)^2)
2578+ A5C4              ; q3: x=r-sqr(r^2-y^2)
2579+ A5C4              ; q4 = q0 | y0=y0+(r-height) - autocalculated
2580+ A5C4              ; q5 = q2 | y0=y0+(r-height)
2581+ A5C4
2582+ A5C4 0E 00                ld      c,0             ;quadrant
2583+ A5C6 DD 2E 14             ld      xl,20           ; y0
2584+ A5C9 DD 26 1E             ld      xh,30           ; height
2585+ A5CC 3E 20                ld      a,32            ; radius
2586+ A5CE
2587+ A5CE              ;---------------
2588+ A5CE              ; calulate line or arc
2589+ A5CE              clc:
2590+ A5CE              .arc:
2591+ A5CE 08                   ex      af,af
2591+ A5CF 3A 7A 94       ld a,(vpage.sqrt)
2591+ A5D2                page_a
2591+ A5D2 32 68 81    >         ld      (@page),a
2591+ A5D5             >         page_am
2591+ A5D5 D3 FD       >         out    (#fd),a
2591+ A5D7 08             ex af,af
2592+ A5D8 26 8E                ld      h,high pwrt
2593+ A5DA 6F                   ld      l,a
2594+ A5DB 5E                   ld      e,(hl)
2595+ A5DC 24                   inc     h
2596+ A5DD 56                   ld      d,(hl)          ; de=radius^2
2597+ A5DE EB                   ex      de,hl
2598+ A5DF 0D                   dec     c
2599+ A5E0 FA 0F A6             jp      m,.q0
2600+ A5E3 CA 41 A6             jp      z,.q1
2601+ A5E6 0D                   dec     c
2602+ A5E7 CA 79 A6             jp      z,.q2
2603+ A5EA 0D                   dec     c
2604+ A5EB CA B6 A6             jp      z,.q3
2605+ A5EE 0D                   dec     c
2606+ A5EF CA 09 A6             jp      z,.q4
2607+ A5F2 0D                   dec     c
2608+ A5F3 CA 39 A6             jp      z,.q5
2609+ A5F6 0D                   dec     c
2610+ A5F7 CA 71 A6             jp      z,.q6
2611+ A5FA 0D                   dec     c
2612+ A5FB CA AE A6             jp      z,.q7
2613+ A5FE 08                   ex      af,af
2613+ A5FF 3A 7B 94       ld a,(vpage.scen)
2613+ A602                page_a
2613+ A602 32 68 81    >         ld      (@page),a
2613+ A605             >         page_am
2613+ A605 D3 FD       >         out    (#fd),a
2613+ A607 08             ex af,af
2614+ A608 C9                   ret
2615+ A609
2616+ A609 DD 94        .q4:    sub     xh
2617+ A60B DD 85                add     a,xl
2618+ A60D DD 6F                ld      xl,a
2619+ A60F
2620+ A60F 22 13 A6     .q0:    ld      (.pwq0+1),hl
2621+ A612              ; q0: x=sqr(r^2-y^2)
2622+ A612 11 55 55     .pwq0:  ld      de,#5555
2623+ A615 26 8E                ld      h,high pwrt
2624+ A617 DD 7D                ld      a,xl
2625+ A619 6F                   ld      l,a
2626+ A61A 4E                   ld      c,(hl)
2627+ A61B 24                   inc     h
2628+ A61C 46                   ld      b,(hl)          ; bc=y^2
2629+ A61D 25                   dec     h
2630+ A61E EB                   ex      de,hl
2631+ A61F B7 ED 42             sub     hl,bc           ; r^2-y^2
2632+ A622 7C                   ld      a,h
2633+ A623 F6 C0                or      high sqrt
2634+ A625 67                   ld      h,a
2635+ A626 7E                   ld      a,(hl)          ; sqr(r-bc)
2636+ A627 D9                   exx
2637+ A628 80                   add     a,b             ; add xoffset
2638+ A629
2639+ A629 F2 2D A6             jp      p,.s1           ; 181216 - add on to fix negative curve
2640+ A62C AF                   xor     a
2641+ A62D              .s1:
2642+ A62D 77                   ld      (hl),a          ; store
2643+ A62E 2C                   inc     l
2644+ A62F D9                   exx
2645+ A630 EB                   ex      de,hl
2646+ A631 DD 2C                inc     xl
2647+ A633              ;        ld      a,xl
2648+ A633              ;        cp      xh
2649+ A633 DD 25                dec     xh
2650+ A635 C2 12 A6             jp      nz,.pwq0
2651+ A638 C9                   ret
2652+ A639
2653+ A639 4F           .q5:    ld      c,a
2654+ A63A DD 94                sub     xh
2655+ A63C DD 85                add     a,xl
2656+ A63E DD 6F                ld      xl,a
2657+ A640 79                   ld      a,c
2658+ A641
2659+ A641 22 48 A6     .q1:    ld      (.pwq1+1),hl
2660+ A644              ; q1: x=sqr(r^2-(r-y)^2)
2661+ A644 32 4B A6             ld      (.q1r+1),a
2662+ A647 11 55 55     .pwq1:  ld      de,#5555
2663+ A64A 3E 55        .q1r:   ld      a,#55
2664+ A64C DD 95                sub     xl              ; radius - y-pos
2665+ A64E 3D                   dec     a               ; y0+1
2666+ A64F 26 8E                ld      h,high pwrt
2667+ A651 6F                   ld      l,a
2668+ A652 4E                   ld      c,(hl)
2669+ A653 24                   inc     h
2670+ A654 46                   ld      b,(hl)          ; bc=(r-y)^2
2671+ A655 25                   dec     h
2672+ A656 EB                   ex      de,hl
2673+ A657 B7 ED 42             sub     hl,bc
2674+ A65A 7C                   ld      a,h
2675+ A65B F6 C0                or      high sqrt
2676+ A65D 67                   ld      h,a
2677+ A65E 7E                   ld      a,(hl)
2678+ A65F D9                   exx
2679+ A660 80                   add     a,b
2680+ A661
2681+ A661 F2 65 A6             jp      p,.s2           ; 181216 - add on to fix negative curve
2682+ A664 AF                   xor     a
2683+ A665              .s2:
2684+ A665 77                   ld      (hl),a          ; store result
2685+ A666 2C                   inc     l
2686+ A667 D9                   exx
2687+ A668 EB                   ex      de,hl
2688+ A669 DD 2C                inc     xl
2689+ A66B              ;        ld      a,xl
2690+ A66B              ;        cp      xh
2691+ A66B DD 25                dec     xh
2692+ A66D C2 47 A6             jp      nz,.pwq1
2693+ A670 C9                   ret
2694+ A671
2695+ A671 4F           .q6:    ld      c,a
2696+ A672 DD 94                sub     xh
2697+ A674 DD 85                add     a,xl
2698+ A676 DD 6F                ld      xl,a
2699+ A678 79                   ld      a,c
2700+ A679
2701+ A679 22 83 A6     .q2:    ld      (.pwq2+1),hl
2702+ A67C 32 86 A6             ld      (.sq21+1),a
2703+ A67F 32 9A A6             ld      (.sq22+1),a
2704+ A682 11 55 55     .pwq2:  ld      de,#5555
2705+ A685 3E 55        .sq21:  ld      a,#55
2706+ A687 DD 95                sub     xl              ; radius - y-pos
2707+ A689 3D                   dec     a               ; y0+1
2708+ A68A 26 8E                ld      h,high pwrt
2709+ A68C 6F                   ld      l,a
2710+ A68D 4E                   ld      c,(hl)
2711+ A68E 24                   inc     h
2712+ A68F 46                   ld      b,(hl)
2713+ A690 25                   dec     h
2714+ A691 EB                   ex      de,hl
2715+ A692 B7 ED 42             sub     hl,bc
2716+ A695 7C                   ld      a,h
2717+ A696 F6 C0                or      high sqrt
2718+ A698 67                   ld      h,a
2719+ A699 3E 55        .sq22:  ld      a,#55         ; radius-sqr(result)
2720+ A69B 96                   sub     (hl)
2721+ A69C D9                   exx
2722+ A69D 80                   add     a,b
2723+ A69E
2724+ A69E F2 A2 A6             jp      p,.s3           ; 181216 - add on to fix negative curve
2725+ A6A1 AF                   xor     a
2726+ A6A2              .s3:
2727+ A6A2 77                   ld      (hl),a
2728+ A6A3 23                   inc     hl
2729+ A6A4 D9                   exx
2730+ A6A5 EB                   ex      de,hl
2731+ A6A6 DD 2C                inc     xl
2732+ A6A8              ;        ld      a,xl
2733+ A6A8              ;        cp      xh
2734+ A6A8 DD 25                dec     xh
2735+ A6AA C2 82 A6             jp      nz,.pwq2
2736+ A6AD C9                   ret
2737+ A6AE
2738+ A6AE 4F           .q7:    ld      c,a
2739+ A6AF DD 94                sub     xh
2740+ A6B1 DD 85                add     a,xl
2741+ A6B3 DD 6F                ld      xl,a
2742+ A6B5 79                   ld      a,c
2743+ A6B6
2744+ A6B6 22 BD A6     .q3:    ld      (.pwq3+1),hl
2745+ A6B9 32 D1 A6             ld      (.sq3+1),a
2746+ A6BC 11 55 55     .pwq3:  ld      de,#5555
2747+ A6BF DD 7D                ld      a,xl
2748+ A6C1 26 8E                ld      h,high pwrt
2749+ A6C3 6F                   ld      l,a
2750+ A6C4 4E                   ld      c,(hl)
2751+ A6C5 24                   inc     h
2752+ A6C6 46                   ld      b,(hl)
2753+ A6C7 25                   dec     h
2754+ A6C8 EB                   ex      de,hl
2755+ A6C9 B7 ED 42             sub     hl,bc
2756+ A6CC 7C                   ld      a,h
2757+ A6CD F6 C0                or      high sqrt
2758+ A6CF 67                   ld      h,a
2759+ A6D0 3E 55        .sq3:   ld      a,#55
2760+ A6D2 96                   sub     (hl)
2761+ A6D3 D9                   exx
2762+ A6D4 80                   add     a,b
2763+ A6D5
2764+ A6D5 F2 D9 A6             jp      p,.s4           ; 181216 - add on to fix negative curve
2765+ A6D8 AF                   xor     a
2766+ A6D9              .s4:
2767+ A6D9 77                   ld      (hl),a
2768+ A6DA 2C                   inc     l
2769+ A6DB D9                   exx
2770+ A6DC EB                   ex      de,hl
2771+ A6DD DD 2C                inc     xl
2772+ A6DF              ;        ld      a,xl
2773+ A6DF              ;        cp      xh
2774+ A6DF DD 25                dec     xh
2775+ A6E1 C2 BC A6             jp      nz,.pwq3
2776+ A6E4 C9                   ret
2777+ A6E5
2778+ A6E5 EB           .line:  ex      de,hl
2779+ A6E6 09           .lsm:   add	    hl,bc
2780+ A6E7 7C                   ld      a,h
2781+ A6E8              ;---
2782+ A6E8 A7                   and     a
2783+ A6E9 F2 ED A6             jp      p,.lsn
2784+ A6EC AF                   xor     a          ; in case h<0, put 0
2785+ A6ED 12           .lsn:   ld	    (de),a
2786+ A6EE 1C                   inc     e
2787+ A6EF DD 25                dec     xh
2788+ A6F1 C2 E6 A6             jp	    nz,.lsm
2789+ A6F4 EB                   ex      de,hl
2790+ A6F5 C9                   ret
2791+ A6F6
2792+ A6F6              ;---------------
2793+ A6F6              ; multiplication table
2794+ A6F6              ; Not correct method. Temporary solution round_multab.a80
2795+ A6F6
2796+ A6F6                      IFDEF _multabClc
2797+ A6F6 ~            mkmultab_calc:
2798+ A6F6 ~                    ld      bc,#80
2799+ A6F6 ~                    ld      de,1
2800+ A6F6 ~                    ld      xl,b            ; xl=0
2801+ A6F6 ~            .lp2:
2802+ A6F6 ~                    ld      xh,#c0          ; high multab
2803+ A6F6 ~                    ld      hl,de
2804+ A6F6 ~            .lp1:
2805+ A6F6 ~                    ld      (ix+0),h
2806+ A6F6 ~                    add     hl,de
2807+ A6F6 ~                    add     ix,bc
2808+ A6F6 ~                    ld      a,xh
2809+ A6F6 ~                    out     (#fe),a
2810+ A6F6 ~                    and     a
2811+ A6F6 ~                    jr      nz,.lp1
2812+ A6F6 ~                    inc     de
2813+ A6F6 ~                    inc     de
2814+ A6F6 ~                    inc     xl
2815+ A6F6 ~                    ld      a,xl
2816+ A6F6 ~                    rla
2817+ A6F6 ~                    jr      nc,.lp2
2818+ A6F6 ~                    ret
2819+ A6F6                      ENDIF
2820+ A6F6
2821+ A6F6                      IFDEF _multabBmp
2822+ A6F6              mkmultab_bitmap:
2823+ A6F6 21 00 C0             ld      hl,#c000
2824+ A6F9 0E 80                ld      c,#80
2825+ A6FB 06 80        .l2:    ld      b,#80
2826+ A6FD 7E                   ld      a,(hl)
2827+ A6FE 86           .l1:    add     a,(hl)
2828+ A6FF 77                   ld      (hl),a
2829+ A700 23                   inc     hl
2830+ A701 10 FB                djnz    .l1
2831+ A703 0D                   dec     c
2832+ A704 20 F5                jr      nz,.l2
2833+ A706 C9                   ret
2834+ A707                      ENDIF
2835+ A707
2836+ A707              ; this implements persp correction. Instead of x*f/z (*f would need to multiply 24bit and then divide later)
2837+ A707              ; so lets do just x*256/z (x is 16bit so we make it 24 bit), divide by z-pos and then do *f
2838+ A707              ; input hl=pos-x, bc=pos-z
2839+ A707              persp16b:
2840+ A707              ;        debug_border_inc
2841+ A707 7C                   ld      a,h
2842+ A708 A7                   and     a
2843+ A709 F5                   push    af
2844+ A70A F2 13 A7             jp      p,.c1                   ; if positive, calc persp.
2845+ A70D AF                   xor     a                       ; if negative, negate first
2846+ A70E 95                   sub     l
2847+ A70F 6F                   ld      l,a
2848+ A710 9F                   sbc     a,a
2849+ A711 94                   sub     h
2850+ A712 67                   ld      h,a
2851+ A713 CD 24 AE     .c1:    call    math.div2416c
2852+ A716 62                   ld      h,d
2853+ A717 6B                   ld      l,e
2854+ A718              .fdiv:
2855+ A718 00 00 00...          ds      4*4,0
2856+ A728 ~            /*
2857+ A728 ~                    DUP     _focal                  ; 0=256, 1=128, 2=64, 3=32
2858+ A728 ~                      srl     h
2859+ A728 ~                      rr      l
2860+ A728 ~                    EDUP
2861+ A728 ~            */
2862+ A728              .fend:
2863+ A728              ;        debug_border 0
2864+ A728 F1                   pop     af
2865+ A729 F0                   ret     p                       ; positive then ret
2866+ A72A AF                   xor     a                       ; if negative then neg result
2867+ A72B 95                   sub     l
2868+ A72C 6F                   ld      l,a
2869+ A72D 9F                   sbc     a,a
2870+ A72E 94                   sub     h
2871+ A72F 67                   ld      h,a
2872+ A730 C9                   ret
2873+ A731
2874+ A731 21 18 A7     .init:  ld      hl,.fdiv
2875+ A734 47                   ld      b,a
2876+ A735 FE 04                cp      4
2877+ A737 36 CB        1       ld      (hl),#cb
2877+ A739 23             inc hl
2878+ A73A 36 3C                ld      (hl),#3c
2878+ A73C 23             inc hl
2879+ A73D 36 CB                ld      (hl),#cb
2879+ A73F 23             inc hl
2880+ A740 36 1D                ld      (hl),#1d
2880+ A742 23             inc hl
2881+ A743 10 F2                djnz    1B
2882+ A745 C8                   ret     z
2883+ A746 36 C3                ld      (hl),#c3
2883+ A748 23             inc hl
2884+ A749 36 28                ld      (hl),low  .fend
2884+ A74B 23             inc hl
2885+ A74C 36 A7                ld      (hl),high .fend
2886+ A74E C9                   ret
2887+ A74F
2888+ A74F ~            /*
2889+ A74F ~            persp_test:
2890+ A74F ~                    ld      a,#80
2891+ A74F ~                    ld      c,#40
2892+ A74F ~            ;------
2893+ A74F ~            ; calculate perspective of coordinate x'=x*f/z
2894+ A74F ~            ; f-focal length (64)
2895+ A74F ~            ; z-destination from z plane
2896+ A74F ~            ; a=coord_x (or y)
2897+ A74F ~            ; c=destination from z-plane
2898+ A74F ~            ; result in HL
2899+ A74F ~            persp:
2900+ A74F ~                    ld      h,a
2901+ A74F ~                    xor     a
2902+ A74F ~                    ld      l,a
2903+ A74F ~                    jp      math.div1608
2904+ A74F ~            */
2905+ A74F
2906+ A74F              ;--------
2907+ A74F                      include "demo/rotoid/mobhdi.a80"
# file opened: ./demo/rotoid/mobhdi.a80
   1++A74F              ; hdipixfil          ; byte value for filling pixels
   2++A74F              ; hdiatrfil          ;                        attrs
   3++A74F
   4++A74F ~            /*
   5++A74F ~            _            STRUCT hdi
   6++A74F ~            _  bwidth:   db     0
   7++A74F ~            _  height:   db     0
   8++A74F ~            _  atrsize:  db     0
   9++A74F ~            _            ENDS
  10++A74F ~            _
  11++A74F ~            _          STRUCT mobhdi
  12++A74F ~            _  gfxptr:  dw      0   ; source data address
  13++A74F ~            _  mode:    db      0   ; 7bit 0=LDI, 1=OR
  14++A74F ~            _                       ; 6bit 0=ignore perspective correction, 1=perspective on
  15++A74F ~            _                       ; 5bit 0=ignore scene and perspective, 1=screen offset on
  16++A74F ~            _                       ; 4bit 0=ignore z-pos
  17++A74F ~            _                       ; 3bit 1=pattern fill (vertical data filled accross define rectangle), calls eraseMobHDI
  18++A74F ~                                    ;        *ignoring the rest of switches
  19++A74F ~                                    ;        1bit 0=pixel pattern mode, 1=attr pattern
  20++A74F ~            _                       ; 2bit 1=gfxptr points to "erahdi" object
  21++A74F ~                                    ; 1bit 0-no mask. 1=masked mode
  22++A74F ~            _                       ; 0bit 0/1 fill bit for pre-rotated bitmaps
  23++A74F ~            _  mode2:   db      0   ; rotated bitmap (per 1,2,4 pixels)
  24++A74F ~            _  posx:    dw      0   ; pixels (bitmap is not rotated to correct pixel position)
  25++A74F ~            _  posy:    dw      0   ; pixels
  26++A74F ~            _  posz:    dw      0
  27++A74F ~            _          ENDS
  28++A74F ~            _
  29++A74F ~            _          STRUCT erahdi
  30++A74F ~            _  gfxptr:  dw      0
  31++A74F ~            _  addr:    dw      0
  32++A74F ~            _  bwidth:  db      0
  33++A74F ~            _  height:  db      0
  34++A74F ~            _           ds      4
  35++A74F ~            _          ENDS
  36++A74F ~            */
  37++A74F
  38++A74F              ;-------------------------------------------------------------------------------
  39++A74F              eraseMobHDI:
  40++A74F DD CB 02 56          bit    2,(ix+mobhdi.mode)            ; test if erase object is defined
  41++A753 C8                   ret    z
  42++A754 21 31 AD             ld     hl,hdipixfil
  43++A757 3E 00                ld     a,    #00
  44++A759 22 8A A7             ld     (.data+1),hl
  45++A75C 32 8E A7             ld     (.inop),a
  46++A75F 21 B8 6D             ld     hl,vidd
  47++A762 22 D3 A7             ld     (.nline+1),hl
  48++A765              ;--
  49++A765 DD 6E 00 DD          ld     hl,(ix+mobhdi.gfxptr)
  49++A769 66 01
  50++A76B 23                   inc    hl
  51++A76C 23                   inc    hl
  52++A76D ~            /* moved to draw routine
  53++A76D ~                    ld     e,l,d,h
  54++A76D ~                    ld     bc,4                          ; size of one vram swapable structure
  55++A76D ~                    push   hl
  56++A76D ~                    call   rotoid.swapVram2.go
  57++A76D ~            ; determine drawing mode
  58++A76D ~            ;-- fill object with value (hdifill - pixels, hdiatrs - attrs)
  59++A76D ~                    pop    hl
  60++A76D ~            */
  61++A76D 5E                   ld     e,(hl)
  62++A76E 23                   inc    hl
  63++A76F 56                   ld     d,(hl)                        ; de = vram
  64++A770 23                   inc    hl
  65++A771 7E                   ld     a,(hl)                        ; a=bwidth
  66++A772 23                   inc    hl
  67++A773 46                   ld     b,(hl)                        ; b=height
  68++A774              .fillPattern:
  69++A774 87                   add    a,a
  70++A775 C8                   ret    z
  71++A776 ED 44                neg
  72++A778 C6 40                add    a,64
  73++A77A 32 90 A7             ld     (.xl_jr+1),a
  74++A77D
  75++A77D 3A 68 81             ld     a,(@page)
  76++A780 08                   ex     af,af
  77++A781 3A 21 95             ld     a,(run.vpage+1)
  78++A784                      page_a
  78++A784 32 68 81    >         ld      (@page),a
  78++A787             >         page_am
  78++A787 D3 FD       >         out    (#fd),a
  79++A789
  80++A789              .data:
  81++A789 21 31 AD             ld     hl,hdipixfil             ; or pattern fill address
  82++A78C 4B           .lp1:   ld     c,e
  83++A78D 7E                   ld     a,(hl)                   ; fill byte for pixels
  84++A78E 23           .inop:  inc    hl                       ; inchl or nop
  85++A78F              .xl_jr:
  86++A78F 18 FE                jr     $
  87++A791                      dup    #20
  88++A791 12          >         ld    (de),a
  88++A792 1C          >  inc e
  88++A793 12          >         ld    (de),a
  88++A794 1C          >  inc e
  88++A795 12          >         ld    (de),a
  88++A796 1C          >  inc e
  88++A797 12          >         ld    (de),a
  88++A798 1C          >  inc e
  88++A799 12          >         ld    (de),a
  88++A79A 1C          >  inc e
  88++A79B 12          >         ld    (de),a
  88++A79C 1C          >  inc e
  88++A79D 12          >         ld    (de),a
  88++A79E 1C          >  inc e
  88++A79F 12          >         ld    (de),a
  88++A7A0 1C          >  inc e
  88++A7A1 12          >         ld    (de),a
  88++A7A2 1C          >  inc e
  88++A7A3 12          >         ld    (de),a
  88++A7A4 1C          >  inc e
  88++A7A5 12          >         ld    (de),a
  88++A7A6 1C          >  inc e
  88++A7A7 12          >         ld    (de),a
  88++A7A8 1C          >  inc e
  88++A7A9 12          >         ld    (de),a
  88++A7AA 1C          >  inc e
  88++A7AB 12          >         ld    (de),a
  88++A7AC 1C          >  inc e
  88++A7AD 12          >         ld    (de),a
  88++A7AE 1C          >  inc e
  88++A7AF 12          >         ld    (de),a
  88++A7B0 1C          >  inc e
  88++A7B1 12          >         ld    (de),a
  88++A7B2 1C          >  inc e
  88++A7B3 12          >         ld    (de),a
  88++A7B4 1C          >  inc e
  88++A7B5 12          >         ld    (de),a
  88++A7B6 1C          >  inc e
  88++A7B7 12          >         ld    (de),a
  88++A7B8 1C          >  inc e
  88++A7B9 12          >         ld    (de),a
  88++A7BA 1C          >  inc e
  88++A7BB 12          >         ld    (de),a
  88++A7BC 1C          >  inc e
  88++A7BD 12          >         ld    (de),a
  88++A7BE 1C          >  inc e
  88++A7BF 12          >         ld    (de),a
  88++A7C0 1C          >  inc e
  88++A7C1 12          >         ld    (de),a
  88++A7C2 1C          >  inc e
  88++A7C3 12          >         ld    (de),a
  88++A7C4 1C          >  inc e
  88++A7C5 12          >         ld    (de),a
  88++A7C6 1C          >  inc e
  88++A7C7 12          >         ld    (de),a
  88++A7C8 1C          >  inc e
  88++A7C9 12          >         ld    (de),a
  88++A7CA 1C          >  inc e
  88++A7CB 12          >         ld    (de),a
  88++A7CC 1C          >  inc e
  88++A7CD 12          >         ld    (de),a
  88++A7CE 1C          >  inc e
  88++A7CF 12          >         ld    (de),a
  88++A7D0 1C          >  inc e
  89++A7D1                      edup
  90++A7D1 59                   ld     e,c
  91++A7D2 CD B8 6D     .nline: call   vidd
  92++A7D5 10 B5                djnz   .lp1
  93++A7D7 08                   ex     af,af
  94++A7D8                      page_a
  94++A7D8 32 68 81    >         ld      (@page),a
  94++A7DB             >         page_am
  94++A7DB D3 FD       >         out    (#fd),a
  95++A7DD C9                   ret
  96++A7DE
  97++A7DE 7B           .nattr: ld     a,e
  98++A7DF C6 20                add    a,#20
  99++A7E1 5F                   ld     e,a
 100++A7E2 D0                   ret    nc
 101++A7E3 14                   inc    d
 102++A7E4 C9                   ret
 103++A7E5
 104++A7E5              ;-------------------------------------------------------------------------------
 105++A7E5              drawMobHDI:
 106++A7E5 3A 68 81             ld     a,(@page)
 107++A7E8 32 A0 AA             ld     (.spg+1),a
 108++A7EB DD 5E 00 DD          ld     de,(ix+mobhdi.gfxptr)
 108++A7EF 56 01
 109++A7F1 DD 7E 02             ld     a,(ix+mobhdi.mode)            ; fill pattern mode ignores all other switches!
 110++A7F4
 111++A7F4 CB 5F                bit    3,a
 112++A7F6 28 33                jr     z,1F                          ; nz=pattern mode
 113++A7F8 CB 4F                bit    1,a
 114++A7FA 21 B8 6D             ld     hl,vidd                       ; z=pixel mode, nz=attr mode
 115++A7FD 28 03                jr     z,2F
 116++A7FF 21 DE A7             ld     hl,eraseMobHDI.nattr
 117++A802 22 D3 A7     2       ld     (eraseMobHDI.nline+1),hl
 118++A805 3E 23                ld     a, #23
 119++A807 32 8E A7             ld     (eraseMobHDI.inop),a
 120++A80A DD 4E 04             ld     c,(ix+mobhdi.posx)
 121++A80D DD 46 06             ld     b,(ix+mobhdi.posy)
 122++A810 DD CB 02 4E          bit    1,(ix+mobhdi.mode)
 123++A814 CC 95 6D             call   z,PixCY2Adr
 124++A817 DD CB 02 4E          bit    1,(ix+mobhdi.mode)
 125++A81B C4 F8 6D             call   nz,AtrXY2Adr
 126++A81E CB FC                set    7,h
 127++A820 EB                   ex     de,hl
 128++A821 7E                   ld     a,(hl)            ; width
 129++A822 23                   inc    hl
 130++A823 46                   ld     b,(hl)            ; height
 131++A824 23                   inc    hl                ; follows graphics
 132++A825 22 8A A7             ld     (eraseMobHDI.data+1),hl
 133++A828 C3 74 A7             jp     eraseMobHDI.fillPattern
 134++A82B
 135++A82B CB 57        1       bit    2,a
 136++A82D 28 08                jr     z,1F                          ; nz=data stored in the erahdi object
 137++A82F EB                   ex     de,hl
 138++A830 5E                   ld     e,(hl)                        ; get gfx pointer from erahdi object
 139++A831 23                   inc    hl
 140++A832 56                   ld     d,(hl)
 141++A833 23                   inc    hl
 142++A834 22 AC AA             ld     (.sera+1),hl                  ; save addr of erase object
 143++A837
 144++A837 FD 62 FD 6B  1       ld     iy,de
 145++A83B 13          > inc    de
 145++A83C 13          > inc    de
 145++A83D 13          > inc    de
 146++A83E ED 53 AA A9          ld     (.gfxptr+1),de
 147++A842 DD 6E 08 DD          ld     hl,(ix+mobhdi.posz)
 147++A846 66 09
 148++A848
 149++A848 CB 67                bit    4,a
 150++A84A 28 08                jr     z,1F
 151++A84C ED 5B 87 94          ld     de,(scene.posz)
 152++A850 B7 ED 52             sub    hl,de
 153++A853 F8                   ret    m
 154++A854
 155++A854 44 4D        1       ld     bc,hl
 156++A856 DD 6E 06 DD          ld     hl,(ix+mobhdi.posy)
 156++A85A 66 07
 157++A85C
 158++A85C CB 6F                bit    5,a
 159++A85E 28 11                jr     z,1F
 160++A860 ED 5B 85 94          ld     de,(scene.posy)
 161++A864 B7 ED 52             sub    hl,de
 162++A867
 163++A867 CB 77                bit    6,a
 164++A869 C4 07 A7             call   nz,persp16b
 165++A86C ED 5B 9A 94          ld     de,(screen.posy)
 166++A870 19                   add    hl,de
 167++A871 22 E4 A8     1       ld     (.posy+1),hl
 168++A874 DD 6E 04 DD          ld     hl,(ix+mobhdi.posx)
 168++A878 66 05
 169++A87A
 170++A87A DD CB 02 6E          bit    5,(ix+mobhdi.mode)
 171++A87E 28 13                jr     z,1F
 172++A880 ED 5B 83 94          ld     de,(scene.posx)
 173++A884 B7 ED 52             sub    hl,de
 174++A887 DD CB 02 76          bit    6,(ix+mobhdi.mode)
 175++A88B C4 07 A7             call   nz,persp16b
 176++A88E ED 5B 98 94          ld     de,(screen.posx)
 177++A892 19                   add    hl,de
 178++A893
 179++A893 7D           1       ld     a,l
 180++A894 E6 07                and    7
 181++A896 32 77 A9             ld     (.pixpos+1),a
 182++A899
 183++A899 CB 2C                sra    h
 184++A89B CB 1D                rr     l
 185++A89D CB 2C                sra    h
 186++A89F CB 1D                rr     l
 187++A8A1 CB 2C                sra    h
 188++A8A3 CB 1D                rr     l
 189++A8A5
 190++A8A5 7C                   ld     a,h
 191++A8A6 A7                   and    a
 192++A8A7 7D                   ld     a,l
 193++A8A8 28 08                jr     z,1F                       ; z=posx was not negative and fits into visible screen
 194++A8AA 24                   inc    h
 195++A8AB C0                   ret    nz                         ; nz=posx was negative
 196++A8AC E6 C0                and    #c0
 197++A8AE D6 C0                sub    #c0
 198++A8B0 C0                   ret    nz
 199++A8B1 AF                   xor    a
 200++A8B2 32 03 AA     1       ld     (.dposx+1),a               ; posx in bytes (+/- 127)
 201++A8B5 7D                   ld     a,l
 202++A8B6 FE 20                cp     #20
 203++A8B8              ; S C
 204++A8B8              ; 0 x   bitmap left side in visible screen
 205++A8B8              ; 1 x   not visible
 206++A8B8 F0                   ret    p                          ; left corner is too right - not visible
 207++A8B9
 208++A8B9 FD 4E 00             ld     c,(iy+hdi.bwidth)
 209++A8BC 81                   add    a,c
 210++A8BD F8                   ret    m                          ; condition leftside + bitmap width < 0
 211++A8BE C8                   ret    z                          ; =0
 212++A8BF B9                   cp     c
 213++A8C0              ; S C
 214++A8C0              ; 1 0   far left, not visible
 215++A8C0              ; 1 1   left, partially visible - moved start, wiidth
 216++A8C0              ; 0 0   start 0
 217++A8C0 06 00                ld    b,0                         ; b=start bitmap pos
 218++A8C2 F2 D2 A8             jp    p,1F                        ;
 219++A8C5 D0                   ret   nc                          ; bitmap is far left = not visible
 220++A8C6 32 1C A9             ld    (.dwidth+1),a
 221++A8C9 91                   sub   c
 222++A8CA ED 44                neg
 223++A8CC 32 B0 A9             ld    (.dstart+1),a
 224++A8CF C3 E3 A8             jp    3F
 225++A8D2
 226++A8D2 D6 20        1       sub   #20                         ; test of right side
 227++A8D4 DA DB A8             jp    c,2F
 228++A8D7 47                   ld    b,a
 229++A8D8 79                   ld    a,c
 230++A8D9 90                   sub   b
 231++A8DA 4F                   ld    c,a
 232++A8DB
 233++A8DB 79           2       ld    a,c
 234++A8DC 32 1C A9             ld    (.dwidth+1),a
 235++A8DF AF                   xor   a
 236++A8E0 32 B0 A9             ld    (.dstart+1),a
 237++A8E3
 238++A8E3              ; ---   test if bitmap lays in visible screen area of y (cltop-clbot)
 239++A8E3              3
 240++A8E3              ;        ld     a,(ix+mobhdi.posy+1)        ; high byte of posy
 241++A8E3 21 55 55     .posy:  ld     hl,#5555
 242++A8E6 7C                   ld     a,h
 243++A8E7 A7                   and    a
 244++A8E8 CA ED A8             jp     z,1f
 245++A8EB F0                   ret    p                           ; quit, posy > 256
 246++A8EC
 247++A8EC AF                   xor    a
 248++A8ED FD 96 02     1       sub    (iy+hdi.atrsize)
 249++A8F0 28 02                jr     z,1F
 250++A8F2 A5                   and    l
 251++A8F3 6F                   ld     l,a
 252++A8F4
 253++A8F4 22 AD A9     1       ld     (.posy2+1),hl
 254++A8F7 3A 9D 94             ld     a,(screen.clbot)
 255++A8FA 32 96 AA             ld     (.cpclb+1),a
 256++A8FD 4F                   ld     c,a
 257++A8FE 06 00                ld     b,0
 258++A900 7C                   ld     a,h
 259++A901 A7                   and    a
 260++A902 FA 09 A9             jp     m,1f
 261++A905
 262++A905 ED 42                sbc    hl,bc
 263++A907 D0                   ret    nc                          ;.quit posy>clbot
 264++A908 09                   add    hl,bc
 265++A909 FD 4E 01     1       ld     c,(iy+hdi.height)
 266++A90C 09                   add    hl,bc
 267++A90D 7C                   ld     a,h
 268++A90E A7                   and    a
 269++A90F F8                   ret    m                           ; bitmap above visible area
 270++A910 C2 1B A9             jp     nz,1F
 271++A913
 272++A913 3A 9C 94             ld     a,(screen.cltop)
 273++A916 32 E0 A9             ld     (.cpclt+1),a
 274++A919 BD                   cp     l
 275++A91A D0                   ret    nc                          ;.quit, cltop test
 276++A91B              1
 277++A91B              .dwidth:
 278++A91B 0E 55                ld     c,#55
 279++A91D DD CB 02 4E          bit    1,(ix+mobhdi.mode)          ; has bitmap mask?
 280++A921 28 08                jr     z,1F
 281++A923 21 4E AB             ld     hl,.maskline
 282++A926 22 2B AA             ld     (.dline+1),hl
 283++A929 18 3A                jr     .dcnt                       ; skip
 284++A92B
 285++A92B DD CB 02 7E  1       bit    7,(ix+mobhdi.mode)          ; which drawing mode
 286++A92F CA 56 A9             jp     z,.putGfx                   ; 0=ldi, 1=or
 287++A932
 288++A932              ;-- or gfx, width modification
 289++A932 21 D0 AA             ld     hl,.orline
 290++A935 22 2B AA             ld     (.dline+1),hl
 291++A938 3E 01                ld     a,1
 292++A93A 32 42 AB             ld     (.or_rest+1),a
 293++A93D              .maxWdth: = 23
 294++A93D 79                   ld     a,c
 295++A93E D6 18                sub    .maxWdth+1
 296++A940 38 06                jr     c,1F                        ; width exceeds routine unrolled state
 297++A942 3C                   inc    a
 298++A943 32 42 AB             ld     (.or_rest+1),a              ; draw the rest with loop
 299++A946 0E 17                ld     c,.maxWdth
 300++A948
 301++A948 79           1       ld     a,c
 302++A949 87                   add    a,a
 303++A94A 87                   add    a,a
 304++A94B 81                   add    a,c
 305++A94C ED 44                neg
 306++A94E C6 73                add    a,.maxWdth*5
 307++A950 32 D2 AA             ld     (.or_jr+1),a
 308++A953 C3 65 A9             jp     .dcnt
 309++A956
 310++A956              .putGfx:
 311++A956              ;-- ldi / blit gfx
 312++A956 21 2D AA             ld     hl,.putline
 313++A959 22 2B AA             ld     (.dline+1),hl
 314++A95C 79                   ld     a,c
 315++A95D 87                   add    a,a
 316++A95E ED 44                neg
 317++A960 C6 40                add    a,64
 318++A962 32 30 AA             ld     (.blit_jr+1),a
 319++A965
 320++A965              .dcnt:
 321++A965 DD 7E 03              ld     a,(ix+mobhdi.mode2)
 322++A968 A7                    and    a
 323++A969 20 09                 jr     nz,.dc0
 324++A96B DD CB 02 4E           bit    1,(ix+mobhdi.mode)         ; mask is present not pre-rotated
 325++A96F 28 38                 jr     z,.cont0
 326++A971 AF                    xor    a
 327++A972 18 0D                 jr     1F
 328++A974
 329++A974              .dc0:
 330++A974 CB 2F                 sra    a                          ; mode2 1..0, 2..1, 4..2
 331++A976 06 55        .pixpos: ld     b,#55
 332++A978 28 07                 jr     z,1F
 333++A97A CB 28                 sra    b
 334++A97C 3D                    dec    a
 335++A97D 28 02                 jr     z,1F
 336++A97F CB 28                 sra    b
 337++A981 78           1        ld     a,b
 338++A982 32 9C A9              ld     (.bitpos+1),a
 339++A985
 340++A985 D9                    exx
 341++A986 FD 7E 01              ld     a,(iy+hdi.height)
 342++A989 FD 5E 00              ld     e,(iy+hdi.bwidth)
 343++A98C CD 71 AD              call   math.mul0808
 344++A98F E5                    push   hl                         ; save bitmap length
 345++A990 DD CB 02 4E           bit    1,(ix+mobhdi.mode)         ; masked mode?
 346++A994 28 01                 jr     z,1F
 347++A996 29                    add    hl,hl                      ; yes=double height (gfx, mask)
 348++A997 EB           1        ex     de,hl
 349++A998 2A AA A9              ld     hl,(.gfxptr+1)
 350++A99B 3E 55        .bitpos: ld     a,#55
 351++A99D A7                    and    a
 352++A99E 28 04                 jr     z,2F
 353++A9A0 47                    ld     b,a
 354++A9A1 19           1        add    hl,de
 355++A9A2 10 FD                 djnz   1B
 356++A9A4 22 AA A9     2        ld     (.gfxptr+1),hl
 357++A9A7 C1                    pop    bc                         ; bc=bitmap length (for .maskline)
 358++A9A8 D9                    exx
 359++A9A9
 360++A9A9              .cont0:
 361++A9A9 21 55 55     .gfxptr: ld     hl,#5555
 362++A9AC 11 55 55     .posy2:  ld     de,#5555
 363++A9AF 01 55 00     .dstart: ld     bc,#0055
 364++A9B2
 365++A9B2 09                   add    hl,bc
 366++A9B3 FD 7E 02             ld     a,(iy+hdi.atrsize)
 367++A9B6 32 E7 A9             ld     (.atrchck+1),a
 368++A9B9 3D                   dec    a
 369++A9BA 32 10 AA             ld     (.atrsize+1),a
 370++A9BD 32 EE A9             ld     (.atrsiz2+1),a
 371++A9C0 FD 4E 00             ld     c,(iy+hdi.bwidth)
 372++A9C3 06 00                ld     b,0
 373++A9C5 ED 43 74 AA          ld     (.wdtha+1),bc
 374++A9C9 FD 7E 01             ld     a,(iy+hdi.height)
 375++A9CC FD 6F                ld     yl,a
 376++A9CE FD 26 00             ld     yh,0
 377++A9D1
 378++A9D1 3A 21 95             ld     a,(run.vpage+1)
 379++A9D4                      page_a
 379++A9D4 32 68 81    >         ld      (@page),a
 379++A9D7             >         page_am
 379++A9D7 D3 FD       >         out    (#fd),a
 380++A9D9
 381++A9D9 7A           .lp0:   ld     a,d
 382++A9DA A7                   and    a
 383++A9DB C2 E4 A9             jp     nz,.skiprow
 384++A9DE 7B                   ld     a,e
 385++A9DF FE 55        .cpclt: cp     #55
 386++A9E1 D2 FA A9             jp     nc,.draw
 387++A9E4              .skiprow:
 388++A9E4 13                   inc    de
 389++A9E5 09                   add    hl,bc
 390++A9E6              .atrchck:
 391++A9E6 3E 55                ld     a,#55
 392++A9E8 A7                   and    a
 393++A9E9 28 07                jr     z,1F              ; bitmap has no attributes, skip attr line
 394++A9EB FD 7D                ld     a,yl
 395++A9ED              .atrsiz2:
 396++A9ED E6 55                and    #55
 397++A9EF 20 01                jr     nz,1F             ; bitmap has attributes (data are organized: attrs 1x row, pixel row x atrsize)
 398++A9F1 09                   add    hl,bc
 399++A9F2 FD 24        1       inc    yh
 400++A9F4 FD 2D                dec    yl
 401++A9F6 C2 D9 A9             jp     nz,.lp0
 402++A9F9 C9                   ret
 403++A9FA
 404++A9FA              .draw:
 405++A9FA FD 7D                ld     a,yl
 406++A9FC 32 BF AA             ld     (.shght+1),a
 407++A9FF FD 63                ld     yh,e                       ; yh = posy
 408++AA01 43                   ld     b,e
 409++AA02              ;        ex     de,hl
 410++AA02              ;        ld     b,l
 411++AA02 0E 55        .dposx: ld     c,#55
 412++AA04 EB                   ex     de,hl
 413++AA05 CD 95 6D             call   PixCY2Adr
 414++AA08 CB FC                set    7,h
 415++AA0A 22 B0 AA             ld     (.svram+1),hl
 416++AA0D E5           .lp1:   push   hl
 417++AA0E 7C                   ld     a,h
 418++AA0F              .atrsize:
 419++AA0F E6 55                and    #55
 420++AA11 20 11                jr     nz,1F
 421++AA13 7C                   ld     a,h
 422++AA14 1F                   rra
 423++AA15 1F                   rra
 424++AA16 1F                   rra
 425++AA17 E6 1F                and    #1f
 426++AA19 F6 D8                or     #d8
 427++AA1B 67           .h_a:   ld     h,a
 428++AA1C 3A 1B AA             ld     a,(.h_a)
 429++AA1F EE 67                xor    #67                          ; LD H,A
 430++AA21 32 1B AA             ld     (.h_a),a
 431++AA24              ;--
 432++AA24 7C           1       ld     a,h
 433++AA25 E6 18                and    #18
 434++AA27 32 79 AA             ld     (.chkatr+1),a
 435++AA2A
 436++AA2A C3 55 55     .dline: jp     #5555
 437++AA2D
 438++AA2D              .putline:
 439++AA2D EB                   ex     de,hl
 440++AA2E E5                   push   hl
 441++AA2F              .blit_jr:
 442++AA2F 18 FE                jr     $
 443++AA31                      dup 32
 444++AA31 ED A0       >         ldi
 444++AA33 ED A0       >         ldi
 444++AA35 ED A0       >         ldi
 444++AA37 ED A0       >         ldi
 444++AA39 ED A0       >         ldi
 444++AA3B ED A0       >         ldi
 444++AA3D ED A0       >         ldi
 444++AA3F ED A0       >         ldi
 444++AA41 ED A0       >         ldi
 444++AA43 ED A0       >         ldi
 444++AA45 ED A0       >         ldi
 444++AA47 ED A0       >         ldi
 444++AA49 ED A0       >         ldi
 444++AA4B ED A0       >         ldi
 444++AA4D ED A0       >         ldi
 444++AA4F ED A0       >         ldi
 444++AA51 ED A0       >         ldi
 444++AA53 ED A0       >         ldi
 444++AA55 ED A0       >         ldi
 444++AA57 ED A0       >         ldi
 444++AA59 ED A0       >         ldi
 444++AA5B ED A0       >         ldi
 444++AA5D ED A0       >         ldi
 444++AA5F ED A0       >         ldi
 444++AA61 ED A0       >         ldi
 444++AA63 ED A0       >         ldi
 444++AA65 ED A0       >         ldi
 444++AA67 ED A0       >         ldi
 444++AA69 ED A0       >         ldi
 444++AA6B ED A0       >         ldi
 444++AA6D ED A0       >         ldi
 444++AA6F ED A0       >         ldi
 445++AA71                      edup
 446++AA71              .dcnt2:
 447++AA71 E1 D1                pop    hl,de
 448++AA73 01 55 00     .wdtha: ld     bc,#0055                   ; increment graphics (next line)
 449++AA76 09                   add    hl,bc
 450++AA77 EB                   ex     de,hl
 451++AA78 3E 55        .chkatr: ld    a,#55                      ; 8 = attrs, 0=pixels
 452++AA7A FE 18                cp     #18
 453++AA7C CA 0D AA             jp     z,.lp1
 454++AA7F
 455++AA7F 24                   inc    h
 456++AA80 7C                   ld     a,h
 457++AA81 E6 07                and    7
 458++AA83 C2 91 AA             jp     nz,1F
 459++AA86 7D                   ld     a,l
 460++AA87 C6 20                add    a,32
 461++AA89 6F                   ld     l,a
 462++AA8A DA 91 AA             jp     c,1F
 463++AA8D 7C                   ld     a,h
 464++AA8E D6 08                sub    8
 465++AA90 67                   ld     h,a
 466++AA91 FD 24        1       inc    yh
 467++AA93 FD 7C                ld     a,yh
 468++AA95 FE 55        .cpclb: cp     #55
 469++AA97 D2 9F AA             jp     nc,.spg
 470++AA9A FD 2D                dec    yl
 471++AA9C C2 0D AA             jp     nz,.lp1
 472++AA9F
 473++AA9F 3E 55        .spg:   ld     a,#55
 474++AAA1                      page_a
 474++AAA1 32 68 81    >         ld      (@page),a
 474++AAA4             >         page_am
 474++AAA4 D3 FD       >         out    (#fd),a
 475++AAA6
 476++AAA6 DD CB 02 56          bit    2,(ix+mobhdi.mode)         ; nz=erase object
 477++AAAA C8                   ret    z
 478++AAAB
 479++AAAB 21 55 55     .sera:  ld     hl,#5555
 480++AAAE E5                   push   hl
 481++AAAF              ;---
 482++AAAF 11 55 55     .svram: ld     de,#5555
 483++AAB2 73                   ld     (hl),e
 484++AAB3 23                   inc    hl
 485++AAB4 72                   ld     (hl),d
 486++AAB5 23                   inc    hl
 487++AAB6 3A 1C A9             ld     a,(.dwidth+1)
 488++AAB9 77                   ld     (hl),a
 489++AABA 23                   inc    hl
 490++AABB FD 7D                ld     a,yl
 491++AABD A7                   and    a
 492++AABE 3E 55        .shght: ld     a,#55
 493++AAC0 28 03                jr     z,1F
 494++AAC2 3C                   inc    a
 495++AAC3 FD 95                sub    yl
 496++AAC5 77           1       ld     (hl),a
 497++AAC6              ;--- swap data for 2nd vram (size and position)
 498++AAC6 E1                   pop    hl
 499++AAC7 54 5D                ld     de,hl
 500++AAC9 01 04 00             ld     bc,4                          ; size of one vram swapable structure
 501++AACC CD 5B 9A             call   rotoid.swapVram2.go
 502++AACF C9                   ret
 503++AAD0
 504++AAD0              .orline:
 505++AAD0 D5                   push   de
 506++AAD1              .or_jr:                                 ;! do not change code below or_jr (setBlitOpc)
 507++AAD1 18 FE                jr     $
 508++AAD3                      dup    .maxWdth-1               ; max 23
 509++AAD3 1A          >         ld     a,(de)
 510++AAD4 B6          >         or     (hl)                    ; can be modified to for anything else
 511++AAD5 77          >         ld     (hl),a
 512++AAD6 2C          >         inc    l
 513++AAD7 13          >         inc    de
 509++AAD8 1A          >         ld     a,(de)
 510++AAD9 B6          >         or     (hl)                    ; can be modified to for anything else
 511++AADA 77          >         ld     (hl),a
 512++AADB 2C          >         inc    l
 513++AADC 13          >         inc    de
 509++AADD 1A          >         ld     a,(de)
 510++AADE B6          >         or     (hl)                    ; can be modified to for anything else
 511++AADF 77          >         ld     (hl),a
 512++AAE0 2C          >         inc    l
 513++AAE1 13          >         inc    de
 509++AAE2 1A          >         ld     a,(de)
 510++AAE3 B6          >         or     (hl)                    ; can be modified to for anything else
 511++AAE4 77          >         ld     (hl),a
 512++AAE5 2C          >         inc    l
 513++AAE6 13          >         inc    de
 509++AAE7 1A          >         ld     a,(de)
 510++AAE8 B6          >         or     (hl)                    ; can be modified to for anything else
 511++AAE9 77          >         ld     (hl),a
 512++AAEA 2C          >         inc    l
 513++AAEB 13          >         inc    de
 509++AAEC 1A          >         ld     a,(de)
 510++AAED B6          >         or     (hl)                    ; can be modified to for anything else
 511++AAEE 77          >         ld     (hl),a
 512++AAEF 2C          >         inc    l
 513++AAF0 13          >         inc    de
 509++AAF1 1A          >         ld     a,(de)
 510++AAF2 B6          >         or     (hl)                    ; can be modified to for anything else
 511++AAF3 77          >         ld     (hl),a
 512++AAF4 2C          >         inc    l
 513++AAF5 13          >         inc    de
 509++AAF6 1A          >         ld     a,(de)
 510++AAF7 B6          >         or     (hl)                    ; can be modified to for anything else
 511++AAF8 77          >         ld     (hl),a
 512++AAF9 2C          >         inc    l
 513++AAFA 13          >         inc    de
 509++AAFB 1A          >         ld     a,(de)
 510++AAFC B6          >         or     (hl)                    ; can be modified to for anything else
 511++AAFD 77          >         ld     (hl),a
 512++AAFE 2C          >         inc    l
 513++AAFF 13          >         inc    de
 509++AB00 1A          >         ld     a,(de)
 510++AB01 B6          >         or     (hl)                    ; can be modified to for anything else
 511++AB02 77          >         ld     (hl),a
 512++AB03 2C          >         inc    l
 513++AB04 13          >         inc    de
 509++AB05 1A          >         ld     a,(de)
 510++AB06 B6          >         or     (hl)                    ; can be modified to for anything else
 511++AB07 77          >         ld     (hl),a
 512++AB08 2C          >         inc    l
 513++AB09 13          >         inc    de
 509++AB0A 1A          >         ld     a,(de)
 510++AB0B B6          >         or     (hl)                    ; can be modified to for anything else
 511++AB0C 77          >         ld     (hl),a
 512++AB0D 2C          >         inc    l
 513++AB0E 13          >         inc    de
 509++AB0F 1A          >         ld     a,(de)
 510++AB10 B6          >         or     (hl)                    ; can be modified to for anything else
 511++AB11 77          >         ld     (hl),a
 512++AB12 2C          >         inc    l
 513++AB13 13          >         inc    de
 509++AB14 1A          >         ld     a,(de)
 510++AB15 B6          >         or     (hl)                    ; can be modified to for anything else
 511++AB16 77          >         ld     (hl),a
 512++AB17 2C          >         inc    l
 513++AB18 13          >         inc    de
 509++AB19 1A          >         ld     a,(de)
 510++AB1A B6          >         or     (hl)                    ; can be modified to for anything else
 511++AB1B 77          >         ld     (hl),a
 512++AB1C 2C          >         inc    l
 513++AB1D 13          >         inc    de
 509++AB1E 1A          >         ld     a,(de)
 510++AB1F B6          >         or     (hl)                    ; can be modified to for anything else
 511++AB20 77          >         ld     (hl),a
 512++AB21 2C          >         inc    l
 513++AB22 13          >         inc    de
 509++AB23 1A          >         ld     a,(de)
 510++AB24 B6          >         or     (hl)                    ; can be modified to for anything else
 511++AB25 77          >         ld     (hl),a
 512++AB26 2C          >         inc    l
 513++AB27 13          >         inc    de
 509++AB28 1A          >         ld     a,(de)
 510++AB29 B6          >         or     (hl)                    ; can be modified to for anything else
 511++AB2A 77          >         ld     (hl),a
 512++AB2B 2C          >         inc    l
 513++AB2C 13          >         inc    de
 509++AB2D 1A          >         ld     a,(de)
 510++AB2E B6          >         or     (hl)                    ; can be modified to for anything else
 511++AB2F 77          >         ld     (hl),a
 512++AB30 2C          >         inc    l
 513++AB31 13          >         inc    de
 509++AB32 1A          >         ld     a,(de)
 510++AB33 B6          >         or     (hl)                    ; can be modified to for anything else
 511++AB34 77          >         ld     (hl),a
 512++AB35 2C          >         inc    l
 513++AB36 13          >         inc    de
 509++AB37 1A          >         ld     a,(de)
 510++AB38 B6          >         or     (hl)                    ; can be modified to for anything else
 511++AB39 77          >         ld     (hl),a
 512++AB3A 2C          >         inc    l
 513++AB3B 13          >         inc    de
 509++AB3C 1A          >         ld     a,(de)
 510++AB3D B6          >         or     (hl)                    ; can be modified to for anything else
 511++AB3E 77          >         ld     (hl),a
 512++AB3F 2C          >         inc    l
 513++AB40 13          >         inc    de
 514++AB41                      edup
 515++AB41              .or_rest:
 516++AB41 06 55                ld     b,#55
 517++AB43 1A           1       ld     a,(de)
 518++AB44 B6           .bltop: or     (hl)
 519++AB45 77                   ld     (hl),a
 520++AB46 2C                   inc    l
 521++AB47 13                   inc    de
 522++AB48 10 F9                djnz   1B
 523++AB4A EB                   ex     de,hl                    ; swap (see ldi)
 524++AB4B C3 71 AA             jp     .dcnt2
 525++AB4E
 526++AB4E              .maskline:
 527++AB4E D5                   push   de
 528++AB4F D5                   push   de                       ; save sprite gfx
 529++AB50 D9                   exx
 530++AB51 E1                   pop    hl                       ; pop sprite gfx
 531++AB52 09                   add    hl,bc                    ; add gfx length = mask addr
 532++AB53 D9                   exx
 533++AB54 EB                   ex     de,hl
 534++AB55 3A 1C A9             ld     a,(.dwidth+1)
 535++AB58 47                   ld     b,a
 536++AB59 1A           1       ld     a,(de)
 537++AB5A D9                   exx
 538++AB5B A6                   and    (hl)
 539++AB5C 23                   inc    hl
 540++AB5D D9                   exx
 541++AB5E B6                   or     (hl)
 542++AB5F 12                   ld     (de),a
 543++AB60 1C                   inc    e
 544++AB61 23                   inc    hl
 545++AB62 10 F5                djnz   1B
 546++AB64 C3 71 AA             jp     .dcnt2
 547++AB67
 548++AB67
 549++AB67              ;--- modifies OR (hl) in the draw routine to instruction in reg-A
 550++AB67              ;--- argument in xl
 551++AB67              .setBlitOpcX:
 552++AB67 DD 7D                ld     a,xl
 553++AB69              ;--- use ld a,_andhl (_xorhl,_orhl,_addhl,_subhl)
 554++AB69              .setBlitOpc:
 555++AB69 21 D4 AA             ld     hl,.or_jr+3              ;! do not change code below or_jr
 556++AB6C 11 05 00             ld     de,5
 557++AB6F 06 16                ld     b,.maxWdth-1
 558++AB71 77           1       ld     (hl),a
 559++AB72 19                   add    hl,de
 560++AB73 10 FC                djnz   1B
 561++AB75 21 44 AB             ld     hl,.bltop
 562++AB78 77                   ld     (hl),a
 563++AB79 C9                   ret
 564++AB7A
 565++AB7A              ;------------------------------------------------------------
 566++AB7A              ; rotate bitmap 1,2,4
 567++AB7A              ; IX=mobhdi
 568++AB7A              rotMobHDI:
 569++AB7A DD 7E 03             ld     a,(ix+mobhdi.mode2)
 570++AB7D E6 07                and    7
 571++AB7F FD 6F                ld     yl,a
 572++AB81
 573++AB81 DD 6E 00 DD          ld     hl,(ix+mobhdi.gfxptr)
 573++AB85 66 01
 574++AB87 DD CB 02 56          bit    2,(ix+mobhdi.mode)
 575++AB8B 28 04                jr     z,1F
 576++AB8D 7E                   ld     a,(hl)
 577++AB8E 23                   inc    hl
 578++AB8F 66                   ld     h,(hl)
 579++AB90 6F                   ld     l,a
 580++AB91
 581++AB91 7E           1       ld     a,(hl)                   ; hl=hdi structure, width
 582++AB92 32 C5 AB             ld     (.wdt+1),a
 583++AB95 5F                   ld     e,a
 584++AB96 23                   inc    hl
 585++AB97 7E                   ld     a,(hl)                   ; height
 586++AB98 32 CD AB             ld     (.cpmsk+1),a             ; save signle height to CP mask
 587++AB9B DD CB 02 4E          bit    1,(ix+mobhdi.mode)       ; masked mode?
 588++AB9F 28 01                jr     z,1F
 589++ABA1 87                   add    a,a                      ; yes=double height for rotation
 590++ABA2 32 BF AB     1       ld     (.hgh+1),a
 591++ABA5 57                   ld     d,a
 592++ABA6 23                   inc    hl
 593++ABA7 7E                   ld     a,(hl)
 594++ABA8 23                   inc    hl
 595++ABA9 A7                   and    a
 596++ABAA C0                   ret    nz                       ; skip attr
 597++ABAB E5                   push   hl                       ; hl = gfx data
 598++ABAC 7A                   ld     a,d
 599++ABAD CD 71 AD             call   math.mul0808             ; calc gfx length
 600++ABB0 22 B7 AB             ld     (.len+1),hl
 601++ABB3 E1           .lp1:   pop    hl                       ; get back gfx
 602++ABB4 54 5D                ld     de,hl
 603++ABB6 01 55 55     .len:   ld     bc,#5555
 604++ABB9 09                   add    hl,bc                    ; dest gfx
 605++ABBA EB                   ex     de,hl
 606++ABBB ED B0                ldir                            ; move data to new gfx location
 607++ABBD E5                   push   hl                       ; hl=new start
 608++ABBE 16 55        .hgh:   ld     d,#55
 609++ABC0 DD 5E 03     .lp4:   ld     e,(ix+mobhdi.mode2)      ; number of rotations
 610++ABC3 E5           .lp3:   push   hl                       ;1
 611++ABC4 06 55        .wdt:   ld     b,#55                    ; width
 612++ABC6              ; using mask?
 613++ABC6 DD CB 02 4E          bit    1,(ix+mobhdi.mode)
 614++ABCA 28 06                jr     z,1F
 615++ABCC              ; are we in the mask area?
 616++ABCC 3E 55        .cpmsk: ld     a,#55
 617++ABCE BA                   cp     d                        ; if processed line is below height,cy
 618++ABCF 3F                   ccf
 619++ABD0 38 04                jr     c,.lp2
 620++ABD2
 621++ABD2 DD 7E 02     1       ld     a,(ix+mobhdi.mode)       ; set initial pixel as bit3 of mode2
 622++ABD5 1F                   rra
 623++ABD6 CB 1E        .lp2:   rr     (hl)
 624++ABD8 23                   inc    hl
 625++ABD9 10 FB                djnz   .lp2
 626++ABDB 1D                   dec    e
 627++ABDC 28 03                jr     z,1F
 628++ABDE E1                   pop    hl
 629++ABDF 20 E2                jr     nz,.lp3
 630++ABE1 F1           1       pop    af                       ;throw away hl
 631++ABE2 15                   dec    d
 632++ABE3 20 DB                jr     nz,.lp4
 633++ABE5 FD 7D                ld     a,yl
 634++ABE7 DD 86 03             add    a,(ix+mobhdi.mode2)
 635++ABEA FD 6F                ld     yl,a
 636++ABEC FE 08                cp     8
 637++ABEE 38 C3                jr     c,.lp1
 638++ABF0 E1                   pop    hl
 639++ABF1 C9                   ret
 640++ABF2
 641++ABF2              ;------------------------------------------------------------
 642++ABF2              ; recolour transparent attributes to color specified in A=reg
 643++ABF2              ; a=new color, b=old color, ix=hdi bitmap address
 644++ABF2              recolHDI:
 645++ABF2 32 16 AC             ld     (.newc+1),a
 646++ABF5 78                   ld     a,b
 647++ABF6 32 0F AC             ld     (.oldc+1),a
 648++ABF9 DD 7E 02             ld     a,(ix+hdi.atrsize)
 649++ABFC A7                   and    a
 650++ABFD C8                   ret    z
 651++ABFE DD 4E 00             ld     c,(ix+hdi.bwidth)
 652++AC01 DD 56 01             ld     d,(ix+hdi.height)
 653++AC04 5F                   ld     e,a
 654++AC05 DD E5 E1             ld     hl,ix
 655++AC08 23          > inc    hl
 655++AC09 23          > inc    hl
 655++AC0A 23          > inc    hl
 656++AC0B 06 00                ld     b,0
 657++AC0D C5           .l1:    push   bc
 658++AC0E 3E FF        .oldc:  ld     a,#ff
 659++AC10 ED A1        .l2:    cpi
 660++AC12 20 04                jr     nz,1F
 661++AC14 2B                   dec    hl
 662++AC15 36 55        .newc:  ld     (hl),#55
 663++AC17 23                   inc    hl
 664++AC18 EA 10 AC     1       jp     pe,.l2
 665++AC1B C1                   pop    bc
 666++AC1C 7B                   ld     a,e
 667++AC1D 09           .l3:    add    hl,bc
 668++AC1E 15                   dec    d
 669++AC1F C8                   ret    z
 670++AC20 3D                   dec    a
 671++AC21 20 FA                jr     nz,.l3
 672++AC23 18 E8                jr     .l1
 673++AC25
 674++AC25              ; save part of screen as HDI image
 675++AC25              ; Input:
 676++AC25              ; a = page
 677++AC25              ; bc=start cx,py
 678++AC25              ; d = height, e = width
 679++AC25              ; IX = resulting address of HDI data
 680++AC25              ; Output:
 681++AC25              ; HL = length of data
 682++AC25              saveHDIpage:                              ; stores data from #c000
 683++AC25 32 5B AC             ld     (saveHDI.spg1+1),a         ;
 684++AC28 3A 68 81             ld     a,(@page)
 685++AC2B 32 64 AC             ld     (saveHDI.spg2+1),a
 686++AC2E 3E 80                ld     a,#80
 687++AC30 18 0A                jr     1F
 688++AC32              saveHDI:
 689++AC32 3A 68 81             ld     a,(@page)
 690++AC35 32 5B AC             ld     (saveHDI.spg1+1),a
 691++AC38 32 64 AC             ld     (saveHDI.spg2+1),a
 692++AC3B AF                   xor    a                          ; stores data from #4000
 693++AC3C 08           1       ex     af,af
 694++AC3D DD 73 00             ld     (ix+hdi.bwidth),e
 695++AC40 DD 72 01             ld     (ix+hdi.height),d
 696++AC43 DD 72 02             ld     (ix+hdi.atrsize),d
 697++AC46 CD 95 6D             call   PixCY2Adr
 698++AC49 08                   ex     af,af
 699++AC4A B4                   or     h
 700++AC4B 67                   ld     h,a
 701++AC4C DD E5 DD E5          push   ix,ix
 702++AC50 D1                   pop    de
 703++AC51 13          > inc    de
 703++AC52 13          > inc    de
 703++AC53 13          > inc    de
 704++AC54
 705++AC54 E5           .l1:    push   hl
 706++AC55 06 00                ld     b,0
 707++AC57 DD 4E 00             ld     c,(ix+hdi.bwidth)
 708++AC5A 3E 55        .spg1:  ld     a,#55
 709++AC5C                      page_a
 709++AC5C 32 68 81    >         ld      (@page),a
 709++AC5F             >         page_am
 709++AC5F D3 FD       >         out    (#fd),a
 710++AC61 ED B0                ldir
 711++AC63 3E 55        .spg2:  ld     a,#55
 712++AC65                      page_a
 712++AC65 32 68 81    >         ld      (@page),a
 712++AC68             >         page_am
 712++AC68 D3 FD       >         out    (#fd),a
 713++AC6A E1                   pop    hl
 714++AC6B CD C7 6D             call   vid
 715++AC6E DD 35 02             dec    (ix+hdi.atrsize)
 716++AC71 20 E1                jr     nz,.l1
 717++AC73 DD 36 02 00          ld     (ix+hdi.atrsize),0
 718++AC77 C1                   pop    bc
 719++AC78 EB                   ex     de,hl
 720++AC79 ED 42                sbc    hl,bc
 721++AC7B C9                   ret
 722++AC7C
 723++AC7C              ;-----------------------------------------
 724++AC7C              ;--- invert gfx data in the gfxmob format
 725++AC7C              ;--- ix: mobhdi object
 726++AC7C
 727++AC7C              invMobHDI:
 728++AC7C DD 6E 00 DD          ld      hl,(ix+mobhdi.gfxptr)
 728++AC80 66 01
 729++AC82 DD CB 02 56          bit     2,(ix+mobhdi.mode)
 730++AC86 28 04                jr      z,1F
 731++AC88 7E                   ld      a,(hl)
 732++AC89 23                   inc     hl
 733++AC8A 66                   ld      h,(hl)
 734++AC8B 6F                   ld      l,a
 735++AC8C              1
 736++AC8C              .headless:
 737++AC8C 56                   ld      d,(hl)               ; bwidth
 738++AC8D 23                   inc     hl
 739++AC8E 5E                   ld      e,(hl)               ; height
 740++AC8F 23                   inc     hl
 741++AC90 7E                   ld      a,(hl)
 742++AC91 A7                   and     a
 743++AC92 C0                   ret     nz                   ; no action for images with colors
 744++AC93 23                   inc     hl
 745++AC94 7A                   ld      a,d
 746++AC95 E5                   push    hl
 747++AC96 CD 71 AD             call    math.mul0808
 748++AC99 44 4D                ld      bc,hl
 749++AC9B E1                   pop     hl
 750++AC9C 7E           .l1:    ld      a,(hl)
 751++AC9D 2F                   cpl
 752++AC9E 77                   ld      (hl),a
 753++AC9F ED A1                cpi
 754++ACA1 EA 9C AC             jp      pe,.l1
 755++ACA4 C9                   ret
 756++ACA5
 757++ACA5              ;-----------------------------------------
 758++ACA5              ;--- mirror window
 759++ACA5              ;--- ix: mirror object
 760++ACA5              winMirror:
 761++ACA5 3A 68 81             ld     a,(@page)
 762++ACA8 08                   ex     af,af
 763++ACA9 3A 21 95             ld     a,(run.vpage+1)
 764++ACAC                      page_a
 764++ACAC 32 68 81    >         ld      (@page),a
 764++ACAF             >         page_am
 764++ACAF D3 FD       >         out    (#fd),a
 765++ACB1
 766++ACB1 DD CB 06 7E          bit     7,(ix+mirr.mode)
 767++ACB5 21 B8 6D             ld      hl,vidd
 768++ACB8 28 03                jr      z,1F
 769++ACBA 21 D6 6D             ld      hl,vcssad
 770++ACBD 22 F8 AC     1       ld      (.c2de+1),hl
 771++ACC0 DD 4E 02             ld      c,(ix+mirr.xpos1)
 772++ACC3 DD 46 03             ld      b,(ix+mirr.ypos1)
 773++ACC6 CD 95 6D             call    PixCY2Adr
 774++ACC9 CB FC                set     7,h
 775++ACCB EB                   ex      de,hl
 776++ACCC
 777++ACCC D9                   exx
 778++ACCD DD 46 05             ld      b,(ix+mirr.hght)
 779++ACD0 48                   ld      c,b
 780++ACD1 79           1       ld      a,c
 781++ACD2 90                   sub     b
 782++ACD3 D9                   exx
 783++ACD4
 784++ACD4 DD 4E 00             ld      c,(ix+mirr.xpos2)
 785++ACD7 DD 86 01             add     a,(ix+mirr.ypos2)
 786++ACDA 47                   ld      b,a
 787++ACDB ED 5F                ld      a,r
 788++ACDD DD CB 06 76          bit     6,(ix+mirr.mode)
 789++ACE1 28 04                jr      z,2F
 790++ACE3 E6 03                and     3
 791++ACE5 80                   add     a,b
 792++ACE6 47                   ld      b,a
 793++ACE7 CD 95 6D     2       call    PixCY2Adr
 794++ACEA CB FC                set     7,h
 795++ACEC 06 00                ld      b,0
 796++ACEE DD 4E 04             ld      c,(ix+mirr.wdth)
 797++ACF1 E5 D5                push    hl,de
 798++ACF3 ED B0                ldir
 799++ACF5 D1 E1                pop     de,hl
 800++ACF7 CD B8 6D     .c2de:  call    vidd
 801++ACFA D9                   exx
 802++ACFB 10 D4                djnz    1B
 803++ACFD
 804++ACFD 08                   ex      af,af
 805++ACFE                      page_a
 805++ACFE 32 68 81    >         ld      (@page),a
 805++AD01             >         page_am
 805++AD01 D3 FD       >         out    (#fd),a
 806++AD03 C9                   ret
 807++AD04
 808++AD04 E1           filwin: pop     hl
 809++AD05 4E                   ld      c,(hl)
 809++AD06 23             inc hl
 810++AD07 46                   ld      b,(hl)
 810++AD08 23             inc hl
 811++AD09 7E                   ld      a,(hl)
 811++AD0A 23             inc hl
 812++AD0B 32 23 AD             ld      (.w+1),a
 813++AD0E 7E                   ld      a,(hl)
 813++AD0F 23             inc hl
 814++AD10 32 20 AD             ld      (.h+1),a
 815++AD13 7E                   ld      a,(hl)
 815++AD14 23             inc hl
 816++AD15 32 26 AD             ld      (.f+1),a
 817++AD18 E5                   push    hl
 818++AD19 CD F8 6D             call    AtrXY2Adr
 819++AD1C 11 20 00             ld      de,#20
 820++AD1F 0E 55        .h:     ld      c,#55
 821++AD21 E5                   push    hl
 822++AD22 06 55        .w:     ld      b,#55
 823++AD24 7D                   ld      a,l
 824++AD25 36 55        .f:     ld      (hl),#55
 825++AD27 2C                   inc     l
 826++AD28 10 FB                djnz    .f
 827++AD2A E1                   pop     hl
 828++AD2B 19                   add     hl,de
 829++AD2C 0D                   dec     c
 830++AD2D 20 A2                jr      nz,1B
 831++AD2F E1                   pop     hl
 832++AD30 E9                   jp      (hl)
 833++AD31
 834++AD31 00           hdipixfil: db   0
 835++AD32
# file closed: ./demo/rotoid/mobhdi.a80
2908+ AD32
2909+ AD32              ;--- create dithering pattern from dithering matrix
2910+ AD32              iniDthPattern:
2911+ AD32 21 00 94             ld     hl,dthPattern
2912+ AD35 1E 10                ld     e,16          ; number of patterns
2913+ AD37 16 88                ld     d,%10001000   ; initial pattern
2914+ AD39 DD E5        .l3:    push   ix
2915+ AD3B 0E 04                ld     c,4           ; number of matrix lines
2916+ AD3D 06 04        .l2:    ld     b,4           ;                  rows
2917+ AD3F 36 00                ld     (hl),0        ; erase data in memory
2918+ AD41              .l1:
2919+ AD41 3E 10                ld     a,16          ; !! number of patterns
2920+ AD43 93                   sub    e
2921+ AD44 DD BE 00             cp     (ix+0)
2922+ AD47 38 03                jr     c,1f
2923+ AD49 7E                   ld     a,(hl)
2924+ AD4A B2                   or     d             ; merge pattern if below treshold
2925+ AD4B 77                   ld     (hl),a
2926+ AD4C CB 0A        1       rrc    d             ; move pattern
2927+ AD4E DD 23                inc    ix
2928+ AD50 10 EF                djnz   .l1           ; repeat line (4 times = pattern repeats)
2929+ AD52 23                   inc    hl
2930+ AD53 0D                   dec    c
2931+ AD54 20 E7                jr     nz,.l2        ; next line
2932+ AD56 DD E1                pop    ix
2933+ AD58 1D                   dec    e
2934+ AD59 20 DE                jr     nz,.l3        ; next treshold
2935+ AD5B C9                   ret
2936+ AD5C
2937+ AD5C              ;--- white dithering pattern (black background)
2938+ AD5C              whtDthPattern:
2939+ AD5C 3A 00 94             ld      a,(dthPattern)
2940+ AD5F A7                   and     a
2941+ AD60 C0                   ret     nz
2942+ AD61 18 05                jr      invDthPattern
2943+ AD63              ;--- black dith pattern (white back)
2944+ AD63              blkDthPattern:
2945+ AD63 3A 00 94             ld      a,(dthPattern)
2946+ AD66 A7                   and     a
2947+ AD67 C8                   ret     z
2948+ AD68              ;--- invert pattern
2949+ AD68              invDthPattern:
2950+ AD68 21 00 94             ld      hl,dthPattern
2951+ AD6B 01 40 00             ld      bc,64
2952+ AD6E C3 9C AC             jp      invMobHDI.l1          ; mobhdi.a80
2953+ AD71
2954+ AD71                      MODULE  math
2955+ AD71              ;-------------------------------------------------------------------------------
2956+ AD71              ; fast hl=e*a (C) BUSY
2957+ AD71
2958+ AD71              mul0808:
2959+ AD71 26 00 6C 54          db      026h,000h,06ch,054h
2960+ AD75 87 30 01 19          db      087h,030h,001h,019h
2961+ AD79 29 87 30 01          db      029h,087h,030h,001h
2962+ AD7D 19 29 87 30          db      019h,029h,087h,030h
2963+ AD81 01 19 29 87          db      001h,019h,029h,087h
2964+ AD85 30 01 19 29          db      030h,001h,019h,029h
2965+ AD89 87 30 01 19          db      087h,030h,001h,019h
2966+ AD8D 29 87 30 01          db      029h,087h,030h,001h
2967+ AD91 19 29 87 30          db      019h,029h,087h,030h
2968+ AD95 01 19 29 87          db      001h,019h,029h,087h
2969+ AD99 30 01 19 59          db      030h,001h,019h,059h
2970+ AD9D 50 C9                db      050h,0c9h
2971+ AD9F
2972+ AD9F ~            /*
2973+ AD9F ~            ; divide hl/c, result in a
2974+ AD9F ~            div1608:
2975+ AD9F ~                    ld      b,16
2976+ AD9F ~            .l1:    add     hl,hl           ; unroll 16 times
2977+ AD9F ~                    rla                     ; ...
2978+ AD9F ~                    jr      c,$+5           ; _o_ mod
2979+ AD9F ~                    cp      c               ; ...
2980+ AD9F ~                    jr      c,$+4           ; ...
2981+ AD9F ~                    sub     c               ; ...
2982+ AD9F ~                    inc     l               ; ...
2983+ AD9F ~                    djnz    .l1
2984+ AD9F ~            ;        bit     7,a
2985+ AD9F ~                    and     a
2986+ AD9F ~            ;        ret     z
2987+ AD9F ~                    ret     p
2988+ AD9F ~                    ld      a,127
2989+ AD9F ~                    ret
2990+ AD9F ~            */
2991+ AD9F
2992+ AD9F              ;; Rychle nasobenie 8*16=24 bitov (from z80bits by baze)
2993+ AD9F              ;; A * DE = A:HL
2994+ AD9F              bsmul0816:
2995+ AD9F 0E 00                ld	c,#00
2996+ ADA1 69           	    ld	l,c
2997+ ADA2 61               	ld	h,c
2998+ ADA3 87               	add	a,a		; optimised 1st iteration
2999+ ADA4 30 02            	jr	nc,$+4
3000+ ADA6 62               	ld	h,d
3001+ ADA7 6B               	ld	l,e
3002+ ADA8
3003+ ADA8 06 07                ld  b,7
3004+ ADAA 29           1         add	hl,hl		; unroll 7 times
3005+ ADAB 17                     rla			; ...
3006+ ADAC 30 02                  jr	nc,$+4		; ...
3007+ ADAE 19                     add	hl,de		; ...
3008+ ADAF 89                     adc	a,c		; ...
3009+ ADB0 10 F8                djnz 1B
3010+ ADB2 C9                   ret
3011+ ADB3 ~            /*
3012+ ADB3 ~                	DUP 7
3013+ ADB3 ~                      add	hl,hl		; unroll 7 times
3014+ ADB3 ~                      rla			; ...
3015+ ADB3 ~                      jr	nc,$+4		; ...
3016+ ADB3 ~                      add	hl,de		; ...
3017+ ADB3 ~                      adc	a,c		; ...
3018+ ADB3 ~                	EDUP
3019+ ADB3 ~                    ret
3020+ ADB3 ~            */
3021+ ADB3
3022+ ADB3              ; ---------------------------------------------------------------------
3023+ ADB3              ; fast 16-bit integer square root
3024+ ADB3              ; 92 bytes, 344-379 cycles (average 362)
3025+ ADB3              ; v2 - 3 t-state optimization spotted by Russ McNulty
3026+ ADB3
3027+ ADB3              ; call with hl = number to square root
3028+ ADB3              ; returns    a = square root
3029+ ADB3              ; corrupts  hl, de
3030+ ADB3              ; source: john metcalf http://www.retroprogramming.com/2017/07/a-fast-z80-integer-square-root.html
3031+ ADB3
3032+ ADB3              sqr:
3033+ ADB3 7C                   ld a,h
3034+ ADB4 11 C0 B0             ld de,0B0C0h
3035+ ADB7 83                   add a,e
3036+ ADB8 38 03                jr c,sq7
3037+ ADBA 7C                   ld a,h
3038+ ADBB 16 F0                ld d,0F0h
3039+ ADBD              sq7:
3040+ ADBD              ; ----------
3041+ ADBD 82                   add a,d
3042+ ADBE 30 03                jr nc,sq6
3043+ ADC0 CB AA                res 5,d
3044+ ADC2 FE                   db 254      ; cp instruction, parametter is next byte => skip next instruction
3045+ ADC3              sq6:
3046+ ADC3 92                   sub d
3047+ ADC4 CB 2A                sra d
3048+ ADC6              ; ----------
3049+ ADC6 CB D2                set 2,d
3050+ ADC8 82                   add a,d
3051+ ADC9 30 03                jr nc,sq5
3052+ ADCB CB 9A                res 3,d
3053+ ADCD FE                   db 254
3054+ ADCE              sq5:
3055+ ADCE 92                   sub d
3056+ ADCF CB 2A                sra d
3057+ ADD1              ; ----------
3058+ ADD1 14                   inc d
3059+ ADD2 82                   add a,d
3060+ ADD3 30 03                jr nc,sq4
3061+ ADD5 CB 8A                res 1,d
3062+ ADD7 FE                   db 254
3063+ ADD8              sq4:
3064+ ADD8 92                   sub d
3065+ ADD9 CB 2A                sra d
3066+ ADDB 67                   ld h,a
3067+ ADDC              ; ----------
3068+ ADDC 19                   add hl,de
3069+ ADDD 30 03                jr nc,sq3
3070+ ADDF 1E 40                ld e,040h
3071+ ADE1 D2                   db 210
3072+ ADE2              sq3:
3073+ ADE2 ED 52                sbc hl,de
3074+ ADE4 CB 2A                sra d
3075+ ADE6 7B                   ld a,e
3076+ ADE7 1F                   rra
3077+ ADE8              ; ----------
3078+ ADE8 F6 10                or 010h
3079+ ADEA 5F                   ld e,a
3080+ ADEB 19                   add hl,de
3081+ ADEC 30 03                jr nc,sq2
3082+ ADEE E6 DF                and 0DFh
3083+ ADF0 DA                   db 218
3084+ ADF1              sq2:
3085+ ADF1 ED 52                sbc hl,de
3086+ ADF3 CB 2A                sra d
3087+ ADF5 1F                   rra
3088+ ADF6              ; ----------
3089+ ADF6 F6 04                or 04h
3090+ ADF8 5F                   ld e,a
3091+ ADF9 19                   add hl,de
3092+ ADFA 30 03                jr nc,sq1
3093+ ADFC E6 F7                and 0F7h
3094+ ADFE DA                   db 218
3095+ ADFF              sq1:
3096+ ADFF ED 52                sbc hl,de
3097+ AE01 CB 2A                sra d
3098+ AE03 1F                   rra
3099+ AE04              ; ----------
3100+ AE04 3C                   inc a
3101+ AE05 5F                   ld e,a
3102+ AE06 19                   add hl,de
3103+ AE07 30 02                jr nc,sq0
3104+ AE09 E6 FD                and 0FDh
3105+ AE0B              sq0:
3106+ AE0B CB 2A                sra d
3107+ AE0D 1F                   rra
3108+ AE0E 2F                   cpl
3109+ AE0F C9                   ret
3110+ AE10
3111+ AE10              ;-------------------------------------------------------------------------------
3112+ AE10 ~            /*
3113+ AE10 ~            test:
3114+ AE10 ~                    ld    hl,#100
3115+ AE10 ~                    ld    de,#100
3116+ AE10 ~                    ld    bc,#20
3117+ AE10 ~                    call  div3216
3118+ AE10 ~                    ld    hl,#100
3119+ AE10 ~                    ld    de,0
3120+ AE10 ~                    ld    bc,#100
3121+ AE10 ~                    call  div3216
3122+ AE10 ~                    ld    hl,#100
3123+ AE10 ~                    ld    de,0
3124+ AE10 ~                    ld    bc,#200
3125+ AE10 ~                    call  div3216
3126+ AE10 ~                    ret
3127+ AE10 ~            */
3128+ AE10              ;-------------------------------------------------------------------------------
3129+ AE10              ; division HL*256/C
3130+ AE10              div2408a:
3131+ AE10 AF                   xor     a
3132+ AE11 5C                   ld      e,h
3133+ AE12 65                   ld      h,l
3134+ AE13 6F                   ld      l,a
3135+ AE14
3136+ AE14              ;-- E:HL / C = HL
3137+ AE14 06 18                ld      b,24
3138+ AE16 29           .l1:    add     hl,hl
3139+ AE17 CB 13                rl      e
3140+ AE19 17                   rla
3141+ AE1A 38 03                jr      c,.l3           ; _o_ mod - this must be here! otherwise does not divide by >#7f
3142+ AE1C B9                   cp      c
3143+ AE1D 38 02                jr      c,.l2
3144+ AE1F 2C           .l3:     inc     l
3145+ AE20 91                    sub     c
3146+ AE21 10 F3        .l2:     djnz    .l1
3147+ AE23 C9                   ret
3148+ AE24
3149+ AE24              ;-- division for perspective
3150+ AE24              ; input hl-posx, bc-posz
3151+ AE24              div2416c:
3152+ AE24 7C                  ld       a,h
3153+ AE25 55                  ld       d,l
3154+ AE26 1E 00               ld       e,0
3155+ AE28 21 00 00            ld       hl,0
3156+ AE2B              ; Input: A:DE = Dividend, BC = Divisor, HL = 0
3157+ AE2B              ; Output: A:DE = Quotient, HL = Remainder
3158+ AE2B              div2416_bc:
3159+ AE2B                      DUP     24
3160+ AE2B CB 33       >        sll     e               ; unroll 24 times
3161+ AE2D CB 12       >        rl      d               ; ...
3162+ AE2F 17          >        rla                     ; ...
3163+ AE30 ED 6A       >        adc     hl,hl           ; ...
3164+ AE32 ED 42       >        sbc     hl,bc           ; ...
3165+ AE34 30 02       >        jr      nc,$+4          ; ...
3166+ AE36 09          >        add     hl,bc           ; ...
3167+ AE37 1D          >        dec     e               ; ...
3160+ AE38 CB 33       >        sll     e               ; unroll 24 times
3161+ AE3A CB 12       >        rl      d               ; ...
3162+ AE3C 17          >        rla                     ; ...
3163+ AE3D ED 6A       >        adc     hl,hl           ; ...
3164+ AE3F ED 42       >        sbc     hl,bc           ; ...
3165+ AE41 30 02       >        jr      nc,$+4          ; ...
3166+ AE43 09          >        add     hl,bc           ; ...
3167+ AE44 1D          >        dec     e               ; ...
3160+ AE45 CB 33       >        sll     e               ; unroll 24 times
3161+ AE47 CB 12       >        rl      d               ; ...
3162+ AE49 17          >        rla                     ; ...
3163+ AE4A ED 6A       >        adc     hl,hl           ; ...
3164+ AE4C ED 42       >        sbc     hl,bc           ; ...
3165+ AE4E 30 02       >        jr      nc,$+4          ; ...
3166+ AE50 09          >        add     hl,bc           ; ...
3167+ AE51 1D          >        dec     e               ; ...
3160+ AE52 CB 33       >        sll     e               ; unroll 24 times
3161+ AE54 CB 12       >        rl      d               ; ...
3162+ AE56 17          >        rla                     ; ...
3163+ AE57 ED 6A       >        adc     hl,hl           ; ...
3164+ AE59 ED 42       >        sbc     hl,bc           ; ...
3165+ AE5B 30 02       >        jr      nc,$+4          ; ...
3166+ AE5D 09          >        add     hl,bc           ; ...
3167+ AE5E 1D          >        dec     e               ; ...
3160+ AE5F CB 33       >        sll     e               ; unroll 24 times
3161+ AE61 CB 12       >        rl      d               ; ...
3162+ AE63 17          >        rla                     ; ...
3163+ AE64 ED 6A       >        adc     hl,hl           ; ...
3164+ AE66 ED 42       >        sbc     hl,bc           ; ...
3165+ AE68 30 02       >        jr      nc,$+4          ; ...
3166+ AE6A 09          >        add     hl,bc           ; ...
3167+ AE6B 1D          >        dec     e               ; ...
3160+ AE6C CB 33       >        sll     e               ; unroll 24 times
3161+ AE6E CB 12       >        rl      d               ; ...
3162+ AE70 17          >        rla                     ; ...
3163+ AE71 ED 6A       >        adc     hl,hl           ; ...
3164+ AE73 ED 42       >        sbc     hl,bc           ; ...
3165+ AE75 30 02       >        jr      nc,$+4          ; ...
3166+ AE77 09          >        add     hl,bc           ; ...
3167+ AE78 1D          >        dec     e               ; ...
3160+ AE79 CB 33       >        sll     e               ; unroll 24 times
3161+ AE7B CB 12       >        rl      d               ; ...
3162+ AE7D 17          >        rla                     ; ...
3163+ AE7E ED 6A       >        adc     hl,hl           ; ...
3164+ AE80 ED 42       >        sbc     hl,bc           ; ...
3165+ AE82 30 02       >        jr      nc,$+4          ; ...
3166+ AE84 09          >        add     hl,bc           ; ...
3167+ AE85 1D          >        dec     e               ; ...
3160+ AE86 CB 33       >        sll     e               ; unroll 24 times
3161+ AE88 CB 12       >        rl      d               ; ...
3162+ AE8A 17          >        rla                     ; ...
3163+ AE8B ED 6A       >        adc     hl,hl           ; ...
3164+ AE8D ED 42       >        sbc     hl,bc           ; ...
3165+ AE8F 30 02       >        jr      nc,$+4          ; ...
3166+ AE91 09          >        add     hl,bc           ; ...
3167+ AE92 1D          >        dec     e               ; ...
3160+ AE93 CB 33       >        sll     e               ; unroll 24 times
3161+ AE95 CB 12       >        rl      d               ; ...
3162+ AE97 17          >        rla                     ; ...
3163+ AE98 ED 6A       >        adc     hl,hl           ; ...
3164+ AE9A ED 42       >        sbc     hl,bc           ; ...
3165+ AE9C 30 02       >        jr      nc,$+4          ; ...
3166+ AE9E 09          >        add     hl,bc           ; ...
3167+ AE9F 1D          >        dec     e               ; ...
3160+ AEA0 CB 33       >        sll     e               ; unroll 24 times
3161+ AEA2 CB 12       >        rl      d               ; ...
3162+ AEA4 17          >        rla                     ; ...
3163+ AEA5 ED 6A       >        adc     hl,hl           ; ...
3164+ AEA7 ED 42       >        sbc     hl,bc           ; ...
3165+ AEA9 30 02       >        jr      nc,$+4          ; ...
3166+ AEAB 09          >        add     hl,bc           ; ...
3167+ AEAC 1D          >        dec     e               ; ...
3160+ AEAD CB 33       >        sll     e               ; unroll 24 times
3161+ AEAF CB 12       >        rl      d               ; ...
3162+ AEB1 17          >        rla                     ; ...
3163+ AEB2 ED 6A       >        adc     hl,hl           ; ...
3164+ AEB4 ED 42       >        sbc     hl,bc           ; ...
3165+ AEB6 30 02       >        jr      nc,$+4          ; ...
3166+ AEB8 09          >        add     hl,bc           ; ...
3167+ AEB9 1D          >        dec     e               ; ...
3160+ AEBA CB 33       >        sll     e               ; unroll 24 times
3161+ AEBC CB 12       >        rl      d               ; ...
3162+ AEBE 17          >        rla                     ; ...
3163+ AEBF ED 6A       >        adc     hl,hl           ; ...
3164+ AEC1 ED 42       >        sbc     hl,bc           ; ...
3165+ AEC3 30 02       >        jr      nc,$+4          ; ...
3166+ AEC5 09          >        add     hl,bc           ; ...
3167+ AEC6 1D          >        dec     e               ; ...
3160+ AEC7 CB 33       >        sll     e               ; unroll 24 times
3161+ AEC9 CB 12       >        rl      d               ; ...
3162+ AECB 17          >        rla                     ; ...
3163+ AECC ED 6A       >        adc     hl,hl           ; ...
3164+ AECE ED 42       >        sbc     hl,bc           ; ...
3165+ AED0 30 02       >        jr      nc,$+4          ; ...
3166+ AED2 09          >        add     hl,bc           ; ...
3167+ AED3 1D          >        dec     e               ; ...
3160+ AED4 CB 33       >        sll     e               ; unroll 24 times
3161+ AED6 CB 12       >        rl      d               ; ...
3162+ AED8 17          >        rla                     ; ...
3163+ AED9 ED 6A       >        adc     hl,hl           ; ...
3164+ AEDB ED 42       >        sbc     hl,bc           ; ...
3165+ AEDD 30 02       >        jr      nc,$+4          ; ...
3166+ AEDF 09          >        add     hl,bc           ; ...
3167+ AEE0 1D          >        dec     e               ; ...
3160+ AEE1 CB 33       >        sll     e               ; unroll 24 times
3161+ AEE3 CB 12       >        rl      d               ; ...
3162+ AEE5 17          >        rla                     ; ...
3163+ AEE6 ED 6A       >        adc     hl,hl           ; ...
3164+ AEE8 ED 42       >        sbc     hl,bc           ; ...
3165+ AEEA 30 02       >        jr      nc,$+4          ; ...
3166+ AEEC 09          >        add     hl,bc           ; ...
3167+ AEED 1D          >        dec     e               ; ...
3160+ AEEE CB 33       >        sll     e               ; unroll 24 times
3161+ AEF0 CB 12       >        rl      d               ; ...
3162+ AEF2 17          >        rla                     ; ...
3163+ AEF3 ED 6A       >        adc     hl,hl           ; ...
3164+ AEF5 ED 42       >        sbc     hl,bc           ; ...
3165+ AEF7 30 02       >        jr      nc,$+4          ; ...
3166+ AEF9 09          >        add     hl,bc           ; ...
3167+ AEFA 1D          >        dec     e               ; ...
3160+ AEFB CB 33       >        sll     e               ; unroll 24 times
3161+ AEFD CB 12       >        rl      d               ; ...
3162+ AEFF 17          >        rla                     ; ...
3163+ AF00 ED 6A       >        adc     hl,hl           ; ...
3164+ AF02 ED 42       >        sbc     hl,bc           ; ...
3165+ AF04 30 02       >        jr      nc,$+4          ; ...
3166+ AF06 09          >        add     hl,bc           ; ...
3167+ AF07 1D          >        dec     e               ; ...
3160+ AF08 CB 33       >        sll     e               ; unroll 24 times
3161+ AF0A CB 12       >        rl      d               ; ...
3162+ AF0C 17          >        rla                     ; ...
3163+ AF0D ED 6A       >        adc     hl,hl           ; ...
3164+ AF0F ED 42       >        sbc     hl,bc           ; ...
3165+ AF11 30 02       >        jr      nc,$+4          ; ...
3166+ AF13 09          >        add     hl,bc           ; ...
3167+ AF14 1D          >        dec     e               ; ...
3160+ AF15 CB 33       >        sll     e               ; unroll 24 times
3161+ AF17 CB 12       >        rl      d               ; ...
3162+ AF19 17          >        rla                     ; ...
3163+ AF1A ED 6A       >        adc     hl,hl           ; ...
3164+ AF1C ED 42       >        sbc     hl,bc           ; ...
3165+ AF1E 30 02       >        jr      nc,$+4          ; ...
3166+ AF20 09          >        add     hl,bc           ; ...
3167+ AF21 1D          >        dec     e               ; ...
3160+ AF22 CB 33       >        sll     e               ; unroll 24 times
3161+ AF24 CB 12       >        rl      d               ; ...
3162+ AF26 17          >        rla                     ; ...
3163+ AF27 ED 6A       >        adc     hl,hl           ; ...
3164+ AF29 ED 42       >        sbc     hl,bc           ; ...
3165+ AF2B 30 02       >        jr      nc,$+4          ; ...
3166+ AF2D 09          >        add     hl,bc           ; ...
3167+ AF2E 1D          >        dec     e               ; ...
3160+ AF2F CB 33       >        sll     e               ; unroll 24 times
3161+ AF31 CB 12       >        rl      d               ; ...
3162+ AF33 17          >        rla                     ; ...
3163+ AF34 ED 6A       >        adc     hl,hl           ; ...
3164+ AF36 ED 42       >        sbc     hl,bc           ; ...
3165+ AF38 30 02       >        jr      nc,$+4          ; ...
3166+ AF3A 09          >        add     hl,bc           ; ...
3167+ AF3B 1D          >        dec     e               ; ...
3160+ AF3C CB 33       >        sll     e               ; unroll 24 times
3161+ AF3E CB 12       >        rl      d               ; ...
3162+ AF40 17          >        rla                     ; ...
3163+ AF41 ED 6A       >        adc     hl,hl           ; ...
3164+ AF43 ED 42       >        sbc     hl,bc           ; ...
3165+ AF45 30 02       >        jr      nc,$+4          ; ...
3166+ AF47 09          >        add     hl,bc           ; ...
3167+ AF48 1D          >        dec     e               ; ...
3160+ AF49 CB 33       >        sll     e               ; unroll 24 times
3161+ AF4B CB 12       >        rl      d               ; ...
3162+ AF4D 17          >        rla                     ; ...
3163+ AF4E ED 6A       >        adc     hl,hl           ; ...
3164+ AF50 ED 42       >        sbc     hl,bc           ; ...
3165+ AF52 30 02       >        jr      nc,$+4          ; ...
3166+ AF54 09          >        add     hl,bc           ; ...
3167+ AF55 1D          >        dec     e               ; ...
3160+ AF56 CB 33       >        sll     e               ; unroll 24 times
3161+ AF58 CB 12       >        rl      d               ; ...
3162+ AF5A 17          >        rla                     ; ...
3163+ AF5B ED 6A       >        adc     hl,hl           ; ...
3164+ AF5D ED 42       >        sbc     hl,bc           ; ...
3165+ AF5F 30 02       >        jr      nc,$+4          ; ...
3166+ AF61 09          >        add     hl,bc           ; ...
3167+ AF62 1D          >        dec     e               ; ...
3168+ AF63                      EDUP
3169+ AF63 C9                   ret
3170+ AF64
3171+ AF64              ; a=+/- 127, e=0-127, a=result
3172+ AF64              ; requires mult table at #c000, page 1
3173+ AF64              ; (call mkmult at init)
3174+ AF64              mul7b:
3175+ AF64 08                   ex      af,af
3176+ AF65 3A 79 94             ld      a,(rotoid.vpage.mult)
3177+ AF68                      page_a
3177+ AF68 32 68 81    >         ld      (@page),a
3177+ AF6B             >         page_am
3177+ AF6B D3 FD       >         out    (#fd),a
3178+ AF6D 08                   ex      af,af
3179+ AF6E              ;-----------
3180+ AF6E A7                   and     a                          ;4
3181+ AF6F FA 86 AF             jp      m,.negs                    ;10
3182+ AF72 CB 13                rl      e                          ;8
3183+ AF74 1F                   rra                                ;4
3184+ AF75 CB 1B                rr      e                          ;8
3185+ AF77 F6 C0                or      #c0                        ;7
3186+ AF79 57                   ld      d,a                        ;4
3187+ AF7A 1A                   ld      a,(de)                     ;7 = sum 52
3188+ AF7B              ;-----------
3189+ AF7B 08                   ex      af,af
3190+ AF7C 3A 7B 94             ld      a,(rotoid.vpage.scen)
3191+ AF7F                      page_a
3191+ AF7F 32 68 81    >         ld      (@page),a
3191+ AF82             >         page_am
3191+ AF82 D3 FD       >         out    (#fd),a
3192+ AF84 08                   ex      af,af
3193+ AF85 C9                   ret
3194+ AF86
3195+ AF86 ED 44        .negs:  neg                                ;8
3196+ AF88 CB 13                rl      e                          ;8
3197+ AF8A 1F                   rra                                ;4
3198+ AF8B CB 1B                rr      e                          ;8
3199+ AF8D F6 C0                or      #c0                        ;7
3200+ AF8F 57                   ld      d,a                        ;4
3201+ AF90 1A                   ld      a,(de)                     ;7
3202+ AF91 ED 44                neg                                ;8 = sum 68
3203+ AF93              ;-----------
3204+ AF93 08                   ex      af,af
3205+ AF94 3A 7B 94             ld      a,(rotoid.vpage.scen)
3206+ AF97                      page_a
3206+ AF97 32 68 81    >         ld      (@page),a
3206+ AF9A             >         page_am
3206+ AF9A D3 FD       >         out    (#fd),a
3207+ AF9C 08                   ex      af,af
3208+ AF9D C9                   ret
3209+ AF9E
3210+ AF9E              ; a=0-255, e=0-127, a=result, l=e
3211+ AF9E              ; requires mult table at #c000, page 1
3212+ AF9E              ; (call mkmult at init)
3213+ AF9E              mul87:
3214+ AF9E 08                   ex      af,af
3215+ AF9F 3A 79 94             ld      a,(rotoid.vpage.mult)
3216+ AFA2                      page_a
3216+ AFA2 32 68 81    >         ld      (@page),a
3216+ AFA5             >         page_am
3216+ AFA5 D3 FD       >         out    (#fd),a
3217+ AFA7 08                   ex      af,af
3218+ AFA8 6B                   ld      l,e                        ;uncomment if l is not initialized
3219+ AFA9              ;-----------
3220+ AFA9 A7                   and     a                          ;4
3221+ AFAA FA C1 AF             jp      m,.poss                    ;10
3222+ AFAD CB 13                rl      e                          ;8
3223+ AFAF 1F                   rra                                ;4
3224+ AFB0 CB 1B                rr      e                          ;8
3225+ AFB2 F6 C0                or      #c0                        ;7
3226+ AFB4 57                   ld      d,a                        ;4
3227+ AFB5 1A                   ld      a,(de)                     ;7 = sum 52
3228+ AFB6              ;-----------
3229+ AFB6 08                   ex      af,af
3230+ AFB7 3A 7B 94             ld      a,(rotoid.vpage.scen)
3231+ AFBA                      page_a
3231+ AFBA 32 68 81    >         ld      (@page),a
3231+ AFBD             >         page_am
3231+ AFBD D3 FD       >         out    (#fd),a
3232+ AFBF 08                   ex      af,af
3233+ AFC0 C9                   ret
3234+ AFC1
3235+ AFC1 D6 7F        .poss:  sub     #7f
3236+ AFC3 CB 13                rl      e
3237+ AFC5 1F                   rra
3238+ AFC6 CB 1B                rr      e
3239+ AFC8 F6 C0                or      #c0
3240+ AFCA 57                   ld      d,a
3241+ AFCB 1A                   ld      a,(de)
3242+ AFCC 85                   add     a,l
3243+ AFCD              ;-----------
3244+ AFCD 08                   ex      af,af
3245+ AFCE 3A 7B 94             ld      a,(rotoid.vpage.scen)
3246+ AFD1                      page_a
3246+ AFD1 32 68 81    >         ld      (@page),a
3246+ AFD4             >         page_am
3246+ AFD4 D3 FD       >         out    (#fd),a
3247+ AFD6 08                   ex      af,af
3248+ AFD7 C9                   ret
3249+ AFD8
3250+ AFD8 57           mul7a:  ld      d,a
3251+ AFD9 08                   ex      af,af
3252+ AFDA 3A 68 81             ld      a,(@page)
3253+ AFDD 08                   ex      af,af
3254+ AFDE 3A 79 94             ld      a,(rotoid.vpage.mult)
3255+ AFE1                      page_a
3255+ AFE1 32 68 81    >         ld      (@page),a
3255+ AFE4             >         page_am
3255+ AFE4 D3 FD       >         out    (#fd),a
3256+ AFE6 7A                   ld      a,d
3257+ AFE7 CD F2 AF             call    mul7bp
3258+ AFEA 08                   ex      af,af
3259+ AFEB                      page_a
3259+ AFEB 32 68 81    >         ld      (@page),a
3259+ AFEE             >         page_am
3259+ AFEE D3 FD       >         out    (#fd),a
3260+ AFF0 08                   ex      af,af
3261+ AFF1 C9                   ret
3262+ AFF2
3263+ AFF2              ; signed multiply, multab in current page
3264+ AFF2              mul7bp:
3265+ AFF2 A7                   and     a                          ;4
3266+ AFF3 FA 00 B0             jp      m,.negs                    ;10
3267+ AFF6 CB 13                rl      e                          ;8
3268+ AFF8 1F                   rra                                ;4
3269+ AFF9 CB 1B                rr      e                          ;8
3270+ AFFB F6 C0                or      #c0                        ;7
3271+ AFFD 57                   ld      d,a                        ;4
3272+ AFFE 1A                   ld      a,(de)                     ;7 = sum 52
3273+ AFFF C9                   ret
3274+ B000
3275+ B000 ED 44        .negs:  neg                                ;8
3276+ B002 CB 13                rl      e                          ;8
3277+ B004 1F                   rra                                ;4
3278+ B005 CB 1B                rr      e                          ;8
3279+ B007 F6 C0                or      #c0                        ;7
3280+ B009 57                   ld      d,a                        ;4
3281+ B00A 1A                   ld      a,(de)                     ;7
3282+ B00B ED 44                neg                                ;8 = sum 68
3283+ B00D C9                   ret
3284+ B00E
3285+ B00E              ; calculate (co)sinus. e: amplitude, a: angle, returns a:
3286+ B00E C6 40        cos:    add     a,#40
3287+ B010 6F           sin:    ld      l,a
3288+ B011 26 93                ld      h,high rotoid.sintab
3289+ B013 4E                   ld      c,(hl)
3290+ B014 3A 68 81             ld      a,(@page)
3291+ B017 08                   ex      af,af
3292+ B018 3A 79 94             ld      a,(rotoid.vpage.mult)
3293+ B01B                      page_a
3293+ B01B 32 68 81    >         ld      (@page),a
3293+ B01E             >         page_am
3293+ B01E D3 FD       >         out    (#fd),a
3294+ B020 79                   ld      a,c
3295+ B021 CD F2 AF             call    mul7bp
3296+ B024 08                   ex      af,af
3297+ B025                      page_a
3297+ B025 32 68 81    >         ld      (@page),a
3297+ B028             >         page_am
3297+ B028 D3 FD       >         out    (#fd),a
3298+ B02A 08                   ex      af,af
3299+ B02B C9                   ret
3300+ B02C              ;-------------------------------------------------------------------------------
3301+ B02C                      ENDMODULE ; end of math module
3302+ B02C ~            /*
3303+ B02C ~            ; dithering matrices
3304+ B02C ~            dthData:
3305+ B02C ~            .v0:                            ; 4x4 ordered
3306+ B02C ~                    db     1,8,2,10         ; 1,... modified matrix to have black and white) 0,... standard matrix
3307+ B02C ~                    db     12,4,14,6
3308+ B02C ~                    db     3,11,1,9
3309+ B02C ~                    db     15,7,13,5
3310+ B02C ~            .v1:                            ; 2X2 ordered
3311+ B02C ~                    db     1,15,1,15
3312+ B02C ~                    db     7,3,7,3
3313+ B02C ~                    db     1,15,1,15
3314+ B02C ~                    db     7,3,7,3
3315+ B02C ~
3316+ B02C ~            ; -------------
3317+ B02C ~            ; cosinus table
3318+ B02C ~            costab:
3319+ B02C ~                    db    #7F, #7E, #7E, #7D, #7C, #7B, #79, #77
3320+ B02C ~                    db    #75, #72, #6F, #6C, #69, #65, #61, #5D
3321+ B02C ~                    db    #59, #54, #4F, #4A, #45, #40, #3A, #35
3322+ B02C ~                    db    #2F, #29, #23, #1D, #17, #11, #0A, #04
3323+ B02C ~                    db    #FE, #F8, #F1, #EB, #E5, #DF, #D9, #D3
3324+ B02C ~                    db    #CD, #C7, #C2, #BC, #B7, #B2, #AD, #A9
3325+ B02C ~                    db    #A4, #A0, #9C, #98, #95, #91, #8E, #8C
3326+ B02C ~                    db    #89, #87, #85, #84, #82, #81, #81, #81
3327+ B02C ~            */
3328+ B02C              ; -------------
3329+ B02C              ; misc
3330+ B02C 00           fpstmp: db     0
3331+ B02D              ; -------------
3332+ B02D              ; line y-pos table
3333+ B02D              linedef: = temp3k      ; deformation table of y-values
3334+ B02D
3335+ B02D              ; -------------
3336+ B02D              ; call print routine from resource manager
3337+ B02D              ; routine specified in inicmd and execmd, test specified in prttxt
3338+ B02D
3339+ B02D 00 00        prttxt: dw     0
3340+ B02F 00           inicmd: db     0
3341+ B030 00           execmd: db     0
3342+ B031              _print:
3343+ B031 3A 68 81              ld      a,(@page)
3344+ B034 F5                    push    af
3345+ B035 3A 2F B0              ld      a,(inicmd)
3346+ B038 11 57 B0              ld      de,res_tab
3347+ B03B 2A 2D B0              ld      hl,(prttxt)
3348+ B03E CD 73 77              call    rsc.runhl2ix
3349+ B041
3350+ B041 3A 30 B0     1        ld      a,(execmd)
3351+ B044 11 57 B0              ld      de,res_tab
3352+ B047 2A 2D B0              ld      hl,(prttxt)
3353+ B04A CD 73 77              call    rsc.runhl2ix
3354+ B04D 30 F2                 jr      nc,1B
3355+ B04F F1                    pop     af
3356+ B050 32 68 81              ld      (@page),a
3357+ B053                       page_c
3357+ B053 CD 5A BF    >         call   @apage
3358+ B056 C9                    ret
3359+ B057              ; -------------
3360+ B057              end:
3361+ B057                      ENDMODULE
3362+ B057
3363+ B057              s_e: = 0
3364+ B057                      IFDEF sce_ed
3365+ B057 ~            s_e: = 1
3366+ B057                      ENDIF
3367+ B057                      IFDEF seg_ed
3368+ B057 ~            s_e: = 1
3369+ B057                      ENDIF
3370+ B057
3371+ B057              ;------------------------------------------------------
3372+ B057              ; rotoid editors
3373+ B057              ;------------------------------------------------------
3374+ B057                      IF s_e=1
3375+ B057 ~                      include "demo/rotoid/red.a80"
3376+ B057                      ENDIF
3377+ B057
3378+ B057              ;        include "libs/fader.a80"
# file closed: Q:\Development\Dev-ZX\demo_cats\demo/rotoid/rotoid.a80
 539  B057              reload:
 540  B057
 541  B057              ;------------------------------------------------------
 542  B057              ; rotoid data
 543  B057              ;------------------------------------------------------
 544  B057              ;---- scene and object data (max 16k)
 545  B057                      ORG      #c000
 546  C000                      PAGE     0
 547  C000                      MODULE   rotoid
 548  C000                      include "demo/data/rotoid/_rt_objects.a80 "
# file opened: Q:\Development\Dev-ZX\demo_cats\demo/data/rotoid/_rt_objects.a80 
   1+ C000              ; rotoid objects (27.04.2019)
   2+ C000              ;------------------------------------------------------------------------------
   3+ C000              _ob:
   4+ C000              ; ---- primitives
   5+ C000              segCirc3f30:      mSegBall   #78,#3f,#30
   5+ C000             >          box #78, 2*#78, 0
   5+ C000 02          >          db    2
   5+ C001 78          >          db    #78
   5+ C002 F0          >          db    2*#78
   5+ C003 00          >          db    0
   5+ C004 00          >          db    0
   5+ C005 00          >          db    0
   5+ C006 00          >          db    0
   5+ C007 00          >          db    0
   5+ C008 00          >          db    0
   5+ C009 00          >          db    0
   5+ C00A             >          arc 0,  0, 0, #78, #78, 1, #3f, #30
   5+ C00A 00          >          db    0         ; arc type
   5+ C00B 00          >          db    0
   5+ C00C 00          >          db    0
   5+ C00D 00          >          db    0
   5+ C00E 00          >          db    0
   5+ C00F 78          >          db    #78
   5+ C010 78          >          db    #78
   5+ C011 01          >          db    1
   5+ C012 3F          >          db    #3f
   5+ C013 30          >          db    #30
   5+ C014             >          arc 0,#78, 0, #78, #78, 4, #3f, #30
   5+ C014 00          >          db    0         ; arc type
   5+ C015 00          >          db    0
   5+ C016 78          >          db    #78
   5+ C017 00          >          db    0
   5+ C018 00          >          db    0
   5+ C019 78          >          db    #78
   5+ C01A 78          >          db    #78
   5+ C01B 04          >          db    4
   5+ C01C 3F          >          db    #3f
   5+ C01D 30          >          db    #30
   5+ C01E FF          >          db  #ff
   6+ C01F              segCirc3f3f:      mSegBall   #78,#3f,#3f
   6+ C01F             >          box #78, 2*#78, 0
   6+ C01F 02          >          db    2
   6+ C020 78          >          db    #78
   6+ C021 F0          >          db    2*#78
   6+ C022 00          >          db    0
   6+ C023 00          >          db    0
   6+ C024 00          >          db    0
   6+ C025 00          >          db    0
   6+ C026 00          >          db    0
   6+ C027 00          >          db    0
   6+ C028 00          >          db    0
   6+ C029             >          arc 0,  0, 0, #78, #78, 1, #3f, #3f
   6+ C029 00          >          db    0         ; arc type
   6+ C02A 00          >          db    0
   6+ C02B 00          >          db    0
   6+ C02C 00          >          db    0
   6+ C02D 00          >          db    0
   6+ C02E 78          >          db    #78
   6+ C02F 78          >          db    #78
   6+ C030 01          >          db    1
   6+ C031 3F          >          db    #3f
   6+ C032 3F          >          db    #3f
   6+ C033             >          arc 0,#78, 0, #78, #78, 4, #3f, #3f
   6+ C033 00          >          db    0         ; arc type
   6+ C034 00          >          db    0
   6+ C035 78          >          db    #78
   6+ C036 00          >          db    0
   6+ C037 00          >          db    0
   6+ C038 78          >          db    #78
   6+ C039 78          >          db    #78
   6+ C03A 04          >          db    4
   6+ C03B 3F          >          db    #3f
   6+ C03C 3F          >          db    #3f
   6+ C03D FF          >          db  #ff
   7+ C03E              segCirc0f00:      mSegBall   #78,#0f,#00
   7+ C03E             >          box #78, 2*#78, 0
   7+ C03E 02          >          db    2
   7+ C03F 78          >          db    #78
   7+ C040 F0          >          db    2*#78
   7+ C041 00          >          db    0
   7+ C042 00          >          db    0
   7+ C043 00          >          db    0
   7+ C044 00          >          db    0
   7+ C045 00          >          db    0
   7+ C046 00          >          db    0
   7+ C047 00          >          db    0
   7+ C048             >          arc 0,  0, 0, #78, #78, 1, #0f, #00
   7+ C048 00          >          db    0         ; arc type
   7+ C049 00          >          db    0
   7+ C04A 00          >          db    0
   7+ C04B 00          >          db    0
   7+ C04C 00          >          db    0
   7+ C04D 78          >          db    #78
   7+ C04E 78          >          db    #78
   7+ C04F 01          >          db    1
   7+ C050 0F          >          db    #0f
   7+ C051 00          >          db    #00
   7+ C052             >          arc 0,#78, 0, #78, #78, 4, #0f, #00
   7+ C052 00          >          db    0         ; arc type
   7+ C053 00          >          db    0
   7+ C054 78          >          db    #78
   7+ C055 00          >          db    0
   7+ C056 00          >          db    0
   7+ C057 78          >          db    #78
   7+ C058 78          >          db    #78
   7+ C059 04          >          db    4
   7+ C05A 0F          >          db    #0f
   7+ C05B 00          >          db    #00
   7+ C05C FF          >          db  #ff
   8+ C05D              segCirc0700:      mSegBall   #78,#07,#00
   8+ C05D             >          box #78, 2*#78, 0
   8+ C05D 02          >          db    2
   8+ C05E 78          >          db    #78
   8+ C05F F0          >          db    2*#78
   8+ C060 00          >          db    0
   8+ C061 00          >          db    0
   8+ C062 00          >          db    0
   8+ C063 00          >          db    0
   8+ C064 00          >          db    0
   8+ C065 00          >          db    0
   8+ C066 00          >          db    0
   8+ C067             >          arc 0,  0, 0, #78, #78, 1, #07, #00
   8+ C067 00          >          db    0         ; arc type
   8+ C068 00          >          db    0
   8+ C069 00          >          db    0
   8+ C06A 00          >          db    0
   8+ C06B 00          >          db    0
   8+ C06C 78          >          db    #78
   8+ C06D 78          >          db    #78
   8+ C06E 01          >          db    1
   8+ C06F 07          >          db    #07
   8+ C070 00          >          db    #00
   8+ C071             >          arc 0,#78, 0, #78, #78, 4, #07, #00
   8+ C071 00          >          db    0         ; arc type
   8+ C072 00          >          db    0
   8+ C073 78          >          db    #78
   8+ C074 00          >          db    0
   8+ C075 00          >          db    0
   8+ C076 78          >          db    #78
   8+ C077 78          >          db    #78
   8+ C078 04          >          db    4
   8+ C079 07          >          db    #07
   8+ C07A 00          >          db    #00
   8+ C07B FF          >          db  #ff
   9+ C07C              segCirc3030:      mSegBall   #78,#30,#30
   9+ C07C             >          box #78, 2*#78, 0
   9+ C07C 02          >          db    2
   9+ C07D 78          >          db    #78
   9+ C07E F0          >          db    2*#78
   9+ C07F 00          >          db    0
   9+ C080 00          >          db    0
   9+ C081 00          >          db    0
   9+ C082 00          >          db    0
   9+ C083 00          >          db    0
   9+ C084 00          >          db    0
   9+ C085 00          >          db    0
   9+ C086             >          arc 0,  0, 0, #78, #78, 1, #30, #30
   9+ C086 00          >          db    0         ; arc type
   9+ C087 00          >          db    0
   9+ C088 00          >          db    0
   9+ C089 00          >          db    0
   9+ C08A 00          >          db    0
   9+ C08B 78          >          db    #78
   9+ C08C 78          >          db    #78
   9+ C08D 01          >          db    1
   9+ C08E 30          >          db    #30
   9+ C08F 30          >          db    #30
   9+ C090             >          arc 0,#78, 0, #78, #78, 4, #30, #30
   9+ C090 00          >          db    0         ; arc type
   9+ C091 00          >          db    0
   9+ C092 78          >          db    #78
   9+ C093 00          >          db    0
   9+ C094 00          >          db    0
   9+ C095 78          >          db    #78
   9+ C096 78          >          db    #78
   9+ C097 04          >          db    4
   9+ C098 30          >          db    #30
   9+ C099 30          >          db    #30
   9+ C09A FF          >          db  #ff
  10+ C09B
  11+ C09B              ;segCirc3037:      mSegBall   #78,#30,#37
  12+ C09B              ;segCirc3730:      mSegBall   #78,#37,#30
  13+ C09B              ;segCirc3f3fr:     mSegBall   #06,#3f,#3f
  14+ C09B              ;segCirc3333r:     mSegBall   #10,#33,#33
  15+ C09B
  16+ C09B              ; ---
  17+ C09B              segSun:           =       segCirc3f3f
  18+ C09B              ;segPlanet:        =       segCirc3730
  19+ C09B              segPlanet:        =       segCirc0f00
  20+ C09B              ;segPlant2:        =       segCirc3037
  21+ C09B              segPlant2:        =       segCirc0700
  22+ C09B
  23+ C09B              objSun:           anmmac  segSun   , 0, 0, 0, 0, #04
  23+ C09B 1F C0       >          dw     segSun          ; pointer to object definition
  23+ C09D 00          >          db     0          ; scale of the drawn object (set 7th bit = no scale)
  23+ C09E 00          >          db     0          ; angle of the shadow
  23+ C09F 00 00       >          dw     0          ; relative position X to the mob position x
  23+ C0A1 00 00       >          dw     0          ; dtto Y
  23+ C0A3 04          >          db     #04         ; 128=hidden, 0-displayed
  23+ C0A4 00 00 00... >          ds     objdef-9, 0
  24+ C0B4 00 00                          dw      0
  25+ C0B6
  26+ C0B6              objPlant2:        anmmac  segPlant2, 0, 0, 0, 0, #00
  26+ C0B6 5D C0       >          dw     segPlant2          ; pointer to object definition
  26+ C0B8 00          >          db     0          ; scale of the drawn object (set 7th bit = no scale)
  26+ C0B9 00          >          db     0          ; angle of the shadow
  26+ C0BA 00 00       >          dw     0          ; relative position X to the mob position x
  26+ C0BC 00 00       >          dw     0          ; dtto Y
  26+ C0BE 00          >          db     #00         ; 128=hidden, 0-displayed
  26+ C0BF 00 00 00... >          ds     objdef-9, 0
  27+ C0CF 00 00                          dw      0
  28+ C0D1
  29+ C0D1              objPlanet:        objmac  segPlanet, 0, 0, 0, 0
  29+ C0D1 3E C0       >          dw     segPlanet          ; pointer to object definition
  29+ C0D3 00          >          db     0          ; scale of the drawn object (set 7th bit = no scale)
  29+ C0D4 00          >          db     0          ; angle of the shadow
  29+ C0D5 00 00       >          dw     0          ; relative position X to the mob position x
  29+ C0D7 00 00       >          dw     0          ; dtto Y
  29+ C0D9 00          >          db     0              ; flag to hide object
  29+ C0DA 00 00 00... >          ds     objdef-9, 0
  30+ C0EA              ;                  objmac  segTile1 ,#08,0,-#40,#40
  31+ C0EA 00 00                          dw      0
  32+ C0EC
  33+ C0EC              mobSun:           mobmac  objSun   , #80+#10, 0,  0,  0, #80
  33+ C0EC 9B C0       >          dw     objSun         ; points to series of objdefs
  33+ C0EE 90          >          db     #80+#10
  33+ C0EF 00          >          db     0
  33+ C0F0 00 00       >          dw     0
  33+ C0F2 00 00       >          dw     0
  33+ C0F4 80 00       >          dw     #80
  34+ C0F6              mobPlant2:        mobmac  objPlant2, #3f, 0, #0, #0, #100
  34+ C0F6 B6 C0       >          dw     objPlant2         ; points to series of objdefs
  34+ C0F8 3F          >          db     #3f
  34+ C0F9 00          >          db     0
  34+ C0FA 00 00       >          dw     #0
  34+ C0FC 00 00       >          dw     #0
  34+ C0FE 00 01       >          dw     #100
  35+ C100              mobPlanet:        mobmac  objPlanet, #7f, 0, #0, #0, #30
  35+ C100 D1 C0       >          dw     objPlanet         ; points to series of objdefs
  35+ C102 7F          >          db     #7f
  35+ C103 00          >          db     0
  35+ C104 00 00       >          dw     #0
  35+ C106 00 00       >          dw     #0
  35+ C108 30 00       >          dw     #30
  36+ C10A
  37+ C10A              ;---- disemgaged rocket
  38+ C10A              segHead:          incbin   "demo/data/cats/kocka_ship2_inv_p1.bin"
  39+ C15B              segBody:          incbin   "demo/data/cats/kocka_ship2_inv_p3.bin"
  40+ C18E              objHead:          anmmac   segHead, 0, 0, 0, 0, 0
  40+ C18E 0A C1       >          dw     segHead          ; pointer to object definition
  40+ C190 00          >          db     0          ; scale of the drawn object (set 7th bit = no scale)
  40+ C191 00          >          db     0          ; angle of the shadow
  40+ C192 00 00       >          dw     0          ; relative position X to the mob position x
  40+ C194 00 00       >          dw     0          ; dtto Y
  40+ C196 00          >          db     0         ; 128=hidden, 0-displayed
  40+ C197 00 00 00... >          ds     objdef-9, 0
  41+ C1A7                                mEnd
  41+ C1A7 00 00       >        dw    0
  42+ C1A9              objBody:          anmmac   segBody, 0 ,0 ,0, 0, 0
  42+ C1A9 5B C1       >          dw     segBody          ; pointer to object definition
  42+ C1AB 00          >          db     0          ; scale of the drawn object (set 7th bit = no scale)
  42+ C1AC 00          >          db     0          ; angle of the shadow
  42+ C1AD 00 00       >          dw     0          ; relative position X to the mob position x
  42+ C1AF 00 00       >          dw     0          ; dtto Y
  42+ C1B1 00          >          db     0         ; 128=hidden, 0-displayed
  42+ C1B2 00 00 00... >          ds     objdef-9, 0
  43+ C1C2                                mEnd
  43+ C1C2 00 00       >        dw    0
  44+ C1C4              mobHead:          mobmac   objHead, #7f, 0, 0, 0, #40
  44+ C1C4 8E C1       >          dw     objHead         ; points to series of objdefs
  44+ C1C6 7F          >          db     #7f
  44+ C1C7 00          >          db     0
  44+ C1C8 00 00       >          dw     0
  44+ C1CA 00 00       >          dw     0
  44+ C1CC 40 00       >          dw     #40
  45+ C1CE              mobBody:          mobmac   objBody, #7f, 0, 0, #50, #40
  45+ C1CE A9 C1       >          dw     objBody         ; points to series of objdefs
  45+ C1D0 7F          >          db     #7f
  45+ C1D1 00          >          db     0
  45+ C1D2 00 00       >          dw     0
  45+ C1D4 50 00       >          dw     #50
  45+ C1D6 40 00       >          dw     #40
  46+ C1D8
  47+ C1D8              ;---- launchpad rocket
  48+ C1D8              segRocket:        incbin   "demo/data/cats/kocka_launch_rocket_4.bin"
  49+ C215              segFlame:         incbin   "demo/data/cats/kocka_launch_rocket_flame_2.bin"
  50+ C248              objRocket:        anmmac   segRocket, 0, 0, 0, 0, 0
  50+ C248 D8 C1       >          dw     segRocket          ; pointer to object definition
  50+ C24A 00          >          db     0          ; scale of the drawn object (set 7th bit = no scale)
  50+ C24B 00          >          db     0          ; angle of the shadow
  50+ C24C 00 00       >          dw     0          ; relative position X to the mob position x
  50+ C24E 00 00       >          dw     0          ; dtto Y
  50+ C250 00          >          db     0         ; 128=hidden, 0-displayed
  50+ C251 00 00 00... >          ds     objdef-9, 0
  51+ C261              objFlame:         anmmac   segFlame,  0, 0, 0, #a2, 0
  51+ C261 15 C2       >          dw     segFlame          ; pointer to object definition
  51+ C263 00          >          db     0          ; scale of the drawn object (set 7th bit = no scale)
  51+ C264 00          >          db     0          ; angle of the shadow
  51+ C265 00 00       >          dw     0          ; relative position X to the mob position x
  51+ C267 A2 00       >          dw     #a2          ; dtto Y
  51+ C269 00          >          db     0         ; 128=hidden, 0-displayed
  51+ C26A 00 00 00... >          ds     objdef-9, 0
  52+ C27A              ;                  objptr
  53+ C27A                                objexe
  53+ C27A 02 00       >          dw     #02            ; .runCode
  54+ C27C ED 5F                           ld      a,r
  55+ C27E E6 3F                           and     #3f
  56+ C280 C6 40                           add     a,#40
  57+ C282              ;                   ld      a,(objFlame + objdef.scale)
  58+ C282              ;                   xor     #80
  59+ C282 32 63 C2                        ld      (objFlame + objdef.scale),a
  60+ C285 C9                              ret
  61+ C286                                mEnd
  61+ C286 00 00       >        dw    0
  62+ C288
  63+ C288              mobRocket:        mobmac   objRocket, #7f, 0, #fff0, #e8, #30
  63+ C288 48 C2       >          dw     objRocket         ; points to series of objdefs
  63+ C28A 7F          >          db     #7f
  63+ C28B 00          >          db     0
  63+ C28C F0 FF       >          dw     #fff0
  63+ C28E E8 00       >          dw     #e8
  63+ C290 30 00       >          dw     #30
  64+ C292
  65+ C292              ;---- cat towing vessel
  66+ C292              segCat1:          incbin   "demo/data/cats/kocka_ship6.bin"
  67+ C301              segCat2:          mSegBall #78,#07,#00
  67+ C301             >          box #78, 2*#78, 0
  67+ C301 02          >          db    2
  67+ C302 78          >          db    #78
  67+ C303 F0          >          db    2*#78
  67+ C304 00          >          db    0
  67+ C305 00          >          db    0
  67+ C306 00          >          db    0
  67+ C307 00          >          db    0
  67+ C308 00          >          db    0
  67+ C309 00          >          db    0
  67+ C30A 00          >          db    0
  67+ C30B             >          arc 0,  0, 0, #78, #78, 1, #07, #00
  67+ C30B 00          >          db    0         ; arc type
  67+ C30C 00          >          db    0
  67+ C30D 00          >          db    0
  67+ C30E 00          >          db    0
  67+ C30F 00          >          db    0
  67+ C310 78          >          db    #78
  67+ C311 78          >          db    #78
  67+ C312 01          >          db    1
  67+ C313 07          >          db    #07
  67+ C314 00          >          db    #00
  67+ C315             >          arc 0,#78, 0, #78, #78, 4, #07, #00
  67+ C315 00          >          db    0         ; arc type
  67+ C316 00          >          db    0
  67+ C317 78          >          db    #78
  67+ C318 00          >          db    0
  67+ C319 00          >          db    0
  67+ C31A 78          >          db    #78
  67+ C31B 78          >          db    #78
  67+ C31C 04          >          db    4
  67+ C31D 07          >          db    #07
  67+ C31E 00          >          db    #00
  67+ C31F FF          >          db  #ff
  68+ C320              segCat3:          mSegBall #78,#0d,#01
  68+ C320             >          box #78, 2*#78, 0
  68+ C320 02          >          db    2
  68+ C321 78          >          db    #78
  68+ C322 F0          >          db    2*#78
  68+ C323 00          >          db    0
  68+ C324 00          >          db    0
  68+ C325 00          >          db    0
  68+ C326 00          >          db    0
  68+ C327 00          >          db    0
  68+ C328 00          >          db    0
  68+ C329 00          >          db    0
  68+ C32A             >          arc 0,  0, 0, #78, #78, 1, #0d, #01
  68+ C32A 00          >          db    0         ; arc type
  68+ C32B 00          >          db    0
  68+ C32C 00          >          db    0
  68+ C32D 00          >          db    0
  68+ C32E 00          >          db    0
  68+ C32F 78          >          db    #78
  68+ C330 78          >          db    #78
  68+ C331 01          >          db    1
  68+ C332 0D          >          db    #0d
  68+ C333 01          >          db    #01
  68+ C334             >          arc 0,#78, 0, #78, #78, 4, #0d, #01
  68+ C334 00          >          db    0         ; arc type
  68+ C335 00          >          db    0
  68+ C336 78          >          db    #78
  68+ C337 00          >          db    0
  68+ C338 00          >          db    0
  68+ C339 78          >          db    #78
  68+ C33A 78          >          db    #78
  68+ C33B 04          >          db    4
  68+ C33C 0D          >          db    #0d
  68+ C33D 01          >          db    #01
  68+ C33E FF          >          db  #ff
  69+ C33F
  70+ C33F              objCat2:          anmmac   segCat2, 0, 0, 0, 0, 0
  70+ C33F 01 C3       >          dw     segCat2          ; pointer to object definition
  70+ C341 00          >          db     0          ; scale of the drawn object (set 7th bit = no scale)
  70+ C342 00          >          db     0          ; angle of the shadow
  70+ C343 00 00       >          dw     0          ; relative position X to the mob position x
  70+ C345 00 00       >          dw     0          ; dtto Y
  70+ C347 00          >          db     0         ; 128=hidden, 0-displayed
  70+ C348 00 00 00... >          ds     objdef-9, 0
  71+ C358                                mEnd
  71+ C358 00 00       >        dw    0
  72+ C35A              mobCat2:          mobmac   objCat2, #20, 0, #00, 0, #00
  72+ C35A 3F C3       >          dw     objCat2         ; points to series of objdefs
  72+ C35C 20          >          db     #20
  72+ C35D 00          >          db     0
  72+ C35E 00 00       >          dw     #00
  72+ C360 00 00       >          dw     0
  72+ C362 00 00       >          dw     #00
  73+ C364              objCat3:          anmmac   segCat3, 0, 0, 0, 0, 0
  73+ C364 20 C3       >          dw     segCat3          ; pointer to object definition
  73+ C366 00          >          db     0          ; scale of the drawn object (set 7th bit = no scale)
  73+ C367 00          >          db     0          ; angle of the shadow
  73+ C368 00 00       >          dw     0          ; relative position X to the mob position x
  73+ C36A 00 00       >          dw     0          ; dtto Y
  73+ C36C 00          >          db     0         ; 128=hidden, 0-displayed
  73+ C36D 00 00 00... >          ds     objdef-9, 0
  74+ C37D                                mEnd
  74+ C37D 00 00       >        dw    0
  75+ C37F              mobCat3:          mobmac   objCat3, #20, 0, #00, 0, #00
  75+ C37F 64 C3       >          dw     objCat3         ; points to series of objdefs
  75+ C381 20          >          db     #20
  75+ C382 00          >          db     0
  75+ C383 00 00       >          dw     #00
  75+ C385 00 00       >          dw     0
  75+ C387 00 00       >          dw     #00
  76+ C389
  77+ C389
  78+ C389              objCat1:          anmmac  segCat1, 0, 0, 0, 0, 0
  78+ C389 92 C2       >          dw     segCat1          ; pointer to object definition
  78+ C38B 00          >          db     0          ; scale of the drawn object (set 7th bit = no scale)
  78+ C38C 00          >          db     0          ; angle of the shadow
  78+ C38D 00 00       >          dw     0          ; relative position X to the mob position x
  78+ C38F 00 00       >          dw     0          ; dtto Y
  78+ C391 00          >          db     0         ; 128=hidden, 0-displayed
  78+ C392 00 00 00... >          ds     objdef-9, 0
  79+ C3A2                                objptr
  79+ C3A2 01 00 A6 C3 >          dw     #01, ._ptr       ; .exeAnim
  79+ C3A6             >._ptr
  80+ C3A6 62 97 DC C3                    dw        animate.linkxyz, aniCat2
  81+ C3AA 62 97 E6 C3                    dw        animate.linkxyz, aniCat3
  82+ C3AE B6 96 C0 C3                    dw        animate.sin, aniCat2x
  83+ C3B2 B6 96 CE C3                    dw        animate.sin, aniCat2y
  84+ C3B6 B6 96 C7 C3                    dw        animate.sin, aniCat3x
  85+ C3BA B6 96 D5 C3                    dw        animate.sin, aniCat3y
  86+ C3BE                                mEnd
  86+ C3BE 00 00       >        dw    0
  87+ C3C0
  88+ C3C0                                ;mAniSin angle,amplitude,offset,speed,options,modptr,offsetptr
  89+ C3C0              aniCat2x:         mAniSin #c0    ,#7f, #00, #02, #00, aniCat2, linkxyz.offset_y
  89+ C3C0 C0 7F 00 02 >               db     #c0,#7f,#00,#02,#00
  89+ C3C4 00          >
  89+ C3C5 E2 C3       >               dw     aniCat2+linkxyz.offset_y
  90+ C3C7              aniCat3x:         mAniSin #c0-#80,#7f, #00, #02, #00, aniCat3, linkxyz.offset_x
  90+ C3C7 40 7F 00 02 >               db     #c0-#80,#7f,#00,#02,#00
  90+ C3CB 00          >
  90+ C3CC EA C3       >               dw     aniCat3+linkxyz.offset_x
  91+ C3CE              ;aniCat2y:         mAniSin #00    ,#7f, #20, #02, #00, aniCat2, linkxyz.offset_y
  92+ C3CE              ;aniCat3y:         mAniSin #00-#80,#7f, #20, #02, #00, aniCat3, linkxyz.offset_y
  93+ C3CE
  94+ C3CE              aniCat2y:         mAniSin #00    ,#18, #0c, #02, #00, aniCat2, linkxyz.offset_z
  94+ C3CE 00 18 0C 02 >               db     #00,#18,#0c,#02,#00
  94+ C3D2 00          >
  94+ C3D3 E4 C3       >               dw     aniCat2+linkxyz.offset_z
  95+ C3D5              aniCat3y:         mAniSin #00-#80,#18, #0c, #02, #00, aniCat3, linkxyz.offset_z
  95+ C3D5 80 18 0C 02 >               db     #00-#80,#18,#0c,#02,#00
  95+ C3D9 00          >
  95+ C3DA EE C3       >               dw     aniCat3+linkxyz.offset_z
  96+ C3DC
  97+ C3DC              aniCat2:          mAniLinkXYZ mobCat1,mobCat2,0, #20,#0
  97+ C3DC F4 C3       >               dw    mobCat1 + mobdef.posx
  97+ C3DE 5E C3       >               dw    mobCat2   + mobdef.posx
  97+ C3E0 00 00       >               dw    0
  97+ C3E2 20 00       >               dw    #20
  97+ C3E4 00 00       >               dw    #0
  98+ C3E6              aniCat3:          mAniLinkXYZ mobCat1,mobCat3,0, #20,#0
  98+ C3E6 F4 C3       >               dw    mobCat1 + mobdef.posx
  98+ C3E8 83 C3       >               dw    mobCat3   + mobdef.posx
  98+ C3EA 00 00       >               dw    0
  98+ C3EC 20 00       >               dw    #20
  98+ C3EE 00 00       >               dw    #0
  99+ C3F0
 100+ C3F0              mobCat1:          mobmac  objCat1, #7f, 0, 0, 0, #30
 100+ C3F0 89 C3       >          dw     objCat1         ; points to series of objdefs
 100+ C3F2 7F          >          db     #7f
 100+ C3F3 00          >          db     0
 100+ C3F4 00 00       >          dw     0
 100+ C3F6 00 00       >          dw     0
 100+ C3F8 30 00       >          dw     #30
 101+ C3FA
 102+ C3FA              objCatx:          anmmac  segCirc3f30, 0, 0, 0, 0, 0
 102+ C3FA 00 C0       >          dw     segCirc3f30          ; pointer to object definition
 102+ C3FC 00          >          db     0          ; scale of the drawn object (set 7th bit = no scale)
 102+ C3FD 00          >          db     0          ; angle of the shadow
 102+ C3FE 00 00       >          dw     0          ; relative position X to the mob position x
 102+ C400 00 00       >          dw     0          ; dtto Y
 102+ C402 00          >          db     0         ; 128=hidden, 0-displayed
 102+ C403 00 00 00... >          ds     objdef-9, 0
 103+ C413                                mEnd
 103+ C413 00 00       >        dw    0
 104+ C415              mobCatx:          mobmac  objCatx, #7f, 0, 0, 0, #30
 104+ C415 FA C3       >          dw     objCatx         ; points to series of objdefs
 104+ C417 7F          >          db     #7f
 104+ C418 00          >          db     0
 104+ C419 00 00       >          dw     0
 104+ C41B 00 00       >          dw     0
 104+ C41D 30 00       >          dw     #30
 105+ C41F
 106+ C41F              ; --- cheese planet
 107+ C41F              gfxPlanet:        machdi  tplanet, %00000100, 0, 8, #2f, #200
 107+ C41F 29 C4       >        dw       .l
 107+ C421 04 00       >        db       %00000100, 0
 107+ C423 08 00 2F 00 >        dw       8, #2f, #200
 107+ C427 00 02       >
 107+ C429 5E 5C       >.l      dw       tplanet
 107+ C42B 00 00 00... >        ds       8,0
 108+ C433              gfxMouse:         machdi  tmouse , %00000100, 0, #3a+8,-#20, #00
 108+ C433 3D C4       >        dw       .l
 108+ C435 04 00       >        db       %00000100, 0
 108+ C437 42 00 E0 FF >        dw       #3a+8, -#20, #00
 108+ C43B 00 00       >
 108+ C43D 00 5B       >.l      dw       tmouse
 108+ C43F 00 00 00... >        ds       8,0
 109+ C447 00 5B 00 00  .erase:           erahdi  tmouse
 109+ C44B 00 00 00 00
 109+ C44F 00 00
 110+ C451
 111+ C451              gfxAstrocat:      machdi  temp3k, %00000100, 0, #ffa0, #70, #200
 111+ C451 5B C4       >        dw       .l
 111+ C453 04 00       >        db       %00000100, 0
 111+ C455 A0 FF 70 00 >        dw       #ffa0, #70, #200
 111+ C459 00 02       >
 111+ C45B 00 5B       >.l      dw       temp3k
 111+ C45D 00 00 00... >        ds       8,0
 112+ C465              gfxTruck:         machdi  ttruck, %01110100, 1, #150, #250, #300
 112+ C465 6F C4       >        dw       .l
 112+ C467 74 01       >        db       %01110100, 1
 112+ C469 50 01 50 02 >        dw       #150, #250, #300
 112+ C46D 00 03       >
 112+ C46F 4C 5F       >.l      dw       ttruck
 112+ C471 00 00 00... >        ds       8,0
 113+ C479              ;gfxTruck:         machdi  ttruck, %01110100, 1, #149, #257, #600
 114+ C479
 115+ C479              ; --- editor
 116+ C479              objEdit:          objmac  temp3k, 0, 0, 0, 0                                 ;objmac  workspace, 0, 0, 0, 0
 116+ C479 00 5B       >          dw     temp3k          ; pointer to object definition
 116+ C47B 00          >          db     0          ; scale of the drawn object (set 7th bit = no scale)
 116+ C47C 00          >          db     0          ; angle of the shadow
 116+ C47D 00 00       >          dw     0          ; relative position X to the mob position x
 116+ C47F 00 00       >          dw     0          ; dtto Y
 116+ C481 00          >          db     0              ; flag to hide object
 116+ C482 00 00 00... >          ds     objdef-9, 0
 117+ C492 00 00                          dw      0
 118+ C494              mobEdit:          mobmac  objEdit, 127, 48, 0, 0, 32
 118+ C494 79 C4       >          dw     objEdit         ; points to series of objdefs
 118+ C496 7F          >          db     127
 118+ C497 30          >          db     48
 118+ C498 00 00       >          dw     0
 118+ C49A 00 00       >          dw     0
 118+ C49C 20 00       >          dw     32
 119+ C49E
 120+ C49E                                display "Objects start     :",_ob," len:",$-_ob, " end:", $
 121+ C49E
# file closed: Q:\Development\Dev-ZX\demo_cats\demo/data/rotoid/_rt_objects.a80 
 549  C49E                      include "demo/data/rotoid/_rt_scenes.a80"
# file opened: Q:\Development\Dev-ZX\demo_cats\demo/data/rotoid/_rt_scenes.a80
   1+ C49E              ; rotoid scenes (14.03.2023)
   2+ C49E              ;-------------------------------------------------------------------------------
   3+ C49E                        DEFINE KSceneNoCut   #80                        ; cut-scene/switch to next scene won't delete objects on screen (rotoid.setScene)
   4+ C49E                        DEFINE KSceneFadeOut #40                        ; fade-out effect
   5+ C49E                        DEFINE KSceneFadeIn  #30                        ; fade-in effect to scene (pre-render + fade in)
   6+ C49E                        DEFINE KSceneRender  #10                        ; Pre-render scene
   7+ C49E
   8+ C49E                        STRUCT scn
   9+ C49E ~            ptrs:     dw     0
  10+ C49E ~            lens:     dw     0
  11+ C49E ~            option:   db     0
  12+ C49E                        ENDS
  13+ C49E
  14+ C49E                        STRUCT scnptr
  15+ C49E ~            init:     dw     0             ; init for each scene
  16+ C49E ~            pini:     dw     0             ; post init (0 if not used)
  17+ C49E ~            erase:    dw     0
  18+ C49E ~            draw:     dw     0
  19+ C49E ~            anim:     dw     0
  20+ C49E ~            alen:     dw     0
  21+ C49E                        ENDS
  22+ C49E              _sc:
  23+ C49E 00 00        scrplay:  dw      0                                       ; pointer to screenplay table
  24+ C4A0 DB C4 FF FF  .scedit:  scn      scenes.scedit ,#ffff, #00
  24+ C4A4 00
  25+ C4A5 CF C4 FF FF  .sgedit:  scn      scenes.edit   ,#ffff, #00
  25+ C4A9 00
  26+ C4AA
  27+ C4AA                        IFDEF   d_scrplay
  28+ C4AA              .part1:
  29+ C4AA E7 C4 C8 00            scn      scenes.launchpad ,#0c8 ,  #30                         + #40
  29+ C4AE 70
  30+ C4AF F3 C4 4A 00            scn      scenes.disengage ,#04a ,  #30                         + #40
  30+ C4B3 70
  31+ C4B4 FF C4 B0 00            scn      scenes.escape    ,#0b0 ,  #30                         + #40
  31+ C4B8 70
  32+ C4B9 0B C5 04 00            scn      scenes.endtitles ,#004 , 0
  32+ C4BD 00
  33+ C4BE              .part2:
  34+ C4BE 17 C5 98 00            scn      scenes.cheese    ,#098 ,  #30                         + #40
  34+ C4C2 70
  35+ C4C3 2F C5 00 01            scn      scenes.crash     ,#100 ,  #30                         + #40
  35+ C4C7 70
  36+ C4C8 3B C5 68 00            scn      scenes.blank     ,#068 , #40
  36+ C4CC 40
  37+ C4CD                        mEnd
  37+ C4CD 00 00       >        dw    0
  38+ C4CF              ;            exeptr init   , exeptr erase   , exeptr draw    , exeptr anim
  39+ C4CF                        ENDIF
  40+ C4CF              scenes:
  41+ C4CF              ;---editors---
  42+ C4CF 60 C5 00 00  .edit:       scnptr s_edit.init       , 0, s_edit.erase       , s_edit.draw        , s_edit.anim       , s_edit.alen      ;--- segment editor
  42+ C4D3 9B C5 A1 C5
  42+ C4D7 A7 C5 02 00
  43+ C4DB              ;.scedit:     scnptr s_scedit.init , 0, s_scedit.erase , s_scedit.draw , s_scedit.anim, s_scedit.alen    ;--- scene editor
  44+ C4DB D8 C9 00 00  .scedit:     scnptr s_crash.init     , 0, s_crash.erase     , s_crash.draw      , s_crash.anim     , s_crash.alen
  44+ C4DF 3B CA 41 CA
  44+ C4E3 4B CA 12 00
  45+ C4E7              ;--- movie----
  46+ C4E7 88 C8 00 00  .launchpad:  scnptr s_launchpad.init  , 0, s_launchpad.erase  , s_launchpad.draw   , s_launchpad.anim  , s_launchpad.alen
  46+ C4EB FE C8 04 C9
  46+ C4EF 0A C9 0C 00
  47+ C4F3 16 C9 00 00  .disengage:  scnptr s_disengage.init  , 0, s_disengage.erase  , s_disengage.draw   , s_disengage.anim  , s_disengage.alen
  47+ C4F7 78 C9 82 C9
  47+ C4FB 90 C9 31 00
  48+ C4FF EE C7 00 00  .escape:     scnptr s_escape.init     , 0, s_escape.erase     , s_escape.draw      , s_escape.anim     , s_escape.alen
  48+ C503 58 C8 66 C8
  48+ C507 7C C8 0C 00
  49+ C50B E4 C7 00 00  .endtitles:  scnptr s_endtitles.init  , 0, s_endtitles.erase  , s_endtitles.draw   , s_endtitles.anim  , s_endtitles.alen
  49+ C50F EC C7 EC C7
  49+ C513 EC C7 02 00
  50+ C517 0A C7 00 00  .cheese:     scnptr s_cheese.init     , 0, s_cheese.erase     , s_cheese.draw      , s_cheese.anim     , s_cheese.alen
  50+ C51B 97 C7 A9 C7
  50+ C51F CC C7 18 00
  51+ C523 C1 C9 00 00  .crash0:     scnptr s_crash0.init     , 0, s_crash0.erase     , s_crash0.draw      , s_crash0.anim     , s_crash0.alen
  51+ C527 D6 C9 D6 C9
  51+ C52B D6 C9 02 00
  52+ C52F D8 C9 00 00  .crash:      scnptr s_crash.init      , 0, s_crash.erase      , s_crash.draw       , s_crash.anim      , s_crash.alen
  52+ C533 3B CA 41 CA
  52+ C537 4B CA 12 00
  53+ C53B 5D CA 00 00  .blank:      scnptr s_blank.init      , 0, s_blank.erase      , s_blank.draw       , s_blank.anim      , s_blank.alen
  53+ C53F 6F CA 6F CA
  53+ C543 6F CA 02 00
  54+ C547              ;-------------
  55+ C547
  56+ C547 0E BF 00 00  .anim:    dw   dummy, 0
  57+ C54B                        mEnd
  57+ C54B 00 00       >        dw    0
  58+ C54D              .alen:    = $-.anim
  59+ C54D
  60+ C54D              ; generic fadein
  61+ C54D              ffadeInColAdd:
  62+ C54D 32 5C C5               ld      (ffadeIn.col),a
  63+ C550 78                     ld      a,b
  64+ C551 32 5D C5               ld      (ffadeIn.add),a
  65+ C554              ffadeIn:
  66+ C554 CD 91 71               call    egl.backFlash
  67+ C557 00 00                  dw      0
  68+ C559 10 00                  dw      #10
  69+ C55B 0F                     db      #0f
  70+ C55C 05           .col:     db      5
  71+ C55D 08           .add:     db      8
  72+ C55E 08                     db      8
  73+ C55F C9                     ret
  74+ C560
  75+ C560              ;###############################################################################
  76+ C560              s_edit:
  77+ C560              .init:
  78+ C560                        cnmScnXYZ     0,0,0
  78+ C560 21 00 00    >         ld      hl,0
  78+ C563 22 83 94    >         ld      (rotoid.scene.posx),hl
  78+ C566 21 00 00    >         ld      hl,0
  78+ C569 22 85 94    >         ld      (rotoid.scene.posy),hl
  78+ C56C 21 00 00    >         ld      hl,0
  78+ C56F 22 87 94    >         ld      (rotoid.scene.posz),hl
  79+ C572                        cnmScrCenter  127+56,0
  79+ C572 21 B7 00    >         ld      hl,127+56
  79+ C575 22 98 94    >         ld      (rotoid.screen.posx),hl
  79+ C578 21 00 00    >         ld      hl,0
  79+ C57B 22 9A 94    >         ld      (rotoid.screen.posy),hl
  80+ C57E                        cnmScnFar     #200
  80+ C57E 21 00 02    >         ld      hl,#200
  80+ C581 22 89 94    >         ld      (rotoid.scene.far),hl
  81+ C584                        cnmScnFade    #100
  81+ C584 21 00 01    >         ld      hl,#100
  81+ C587 22 8B 94    >         ld      (rotoid.scene.fade),hl
  82+ C58A                        cnmScrTopBot  0,191
  82+ C58A 21 00 BF    >         ld      hl,0+191*256
  82+ C58D 22 9C 94    >         ld      (screen.cltop),hl
  83+ C590              ;          cnmMobPos     mobEdit, 0,  0, 50
  84+ C590                        cnmLightShade  #05
  84+ C590 3E 05       >          ld    a,#05
  84+ C592 32 96 94    >          ld    (rotoid.light.shade),a
  85+ C595                        cnmFocal       3
  85+ C595 3E 03       >          ld    a,3
  85+ C597 CD 31 A7    >          call  persp16b.init
  86+ C59A C9                     ret
  87+ C59B              .erase:
  88+ C59B                        mdel mobEdit
  88+ C59B BA 9A 94 C4 >         dw      eraseMultiObject,mobEdit
  89+ C59F                        mEnd
  89+ C59F 00 00       >        dw    0
  90+ C5A1              .draw:
  91+ C5A1                        mdraw mobEdit
  91+ C5A1 DB 9A 94 C4 >         dw      drawMultiObject,mobEdit
  92+ C5A5                        mEnd
  92+ C5A5 00 00       >        dw    0
  93+ C5A7              .anim:
  94+ C5A7                        mEnd
  94+ C5A7 00 00       >        dw    0
  95+ C5A9              .alen: =  $-.anim
  96+ C5A9              ;###############################################################################
  97+ C5A9
  98+ C5A9              s_scedit:
  99+ C5A9              .init:
 100+ C5A9                        cnmScreenplayDisable
 100+ C5A9 3E A7       >          ld    a,#a7                 ; and_a
 100+ C5AB 32 27 95    >          ld    (rotoid.run.scene),a
 101+ C5AE                        cnmFocal 3
 101+ C5AE 3E 03       >          ld    a,3
 101+ C5B0 CD 31 A7    >          call  persp16b.init
 102+ C5B3                        cnmScnXYZ      #0,#0,#000
 102+ C5B3 21 00 00    >         ld      hl,#0
 102+ C5B6 22 83 94    >         ld      (rotoid.scene.posx),hl
 102+ C5B9 21 00 00    >         ld      hl,#0
 102+ C5BC 22 85 94    >         ld      (rotoid.scene.posy),hl
 102+ C5BF 21 00 00    >         ld      hl,#000
 102+ C5C2 22 87 94    >         ld      (rotoid.scene.posz),hl
 103+ C5C5                        cnmScrCenter   #80,#60
 103+ C5C5 21 80 00    >         ld      hl,#80
 103+ C5C8 22 98 94    >         ld      (rotoid.screen.posx),hl
 103+ C5CB 21 60 00    >         ld      hl,#60
 103+ C5CE 22 9A 94    >         ld      (rotoid.screen.posy),hl
 104+ C5D1                        cnmScnFar      #300
 104+ C5D1 21 00 03    >         ld      hl,#300
 104+ C5D4 22 89 94    >         ld      (rotoid.scene.far),hl
 105+ C5D7                        cnmScnFade     #120
 105+ C5D7 21 20 01    >         ld      hl,#120
 105+ C5DA 22 8B 94    >         ld      (rotoid.scene.fade),hl
 106+ C5DD                        cnmScrTopBot   0,191
 106+ C5DD 21 00 BF    >         ld      hl,0+191*256
 106+ C5E0 22 9C 94    >         ld      (screen.cltop),hl
 107+ C5E3                        cnmLightShade  #03
 107+ C5E3 3E 03       >          ld    a,#03
 107+ C5E5 32 96 94    >          ld    (rotoid.light.shade),a
 108+ C5E8                        cnmLightBright #00,#07
 108+ C5E8 3E 00       >          ld      a,#00
 108+ C5EA 32 91 94    >          ld      (rotoid.light.bright),a
 108+ C5ED 3E 07       >          ld      a,#07
 108+ C5EF 32 92 94    >          ld      (rotoid.light.contrs),a
 109+ C5F2                        cnmLightMode   #00
 109+ C5F2 3E 00       >          ld      a,#00
 109+ C5F4 32 97 94    >          ld      (light.mode),a
 110+ C5F7                        cnmLightPos    #a800,#100
 110+ C5F7 21 00 A8    >          ld      hl,#a800
 110+ C5FA 22 8D 94    >          ld      (light.posx),hl
 110+ C5FD 21 00 01    >          ld      hl,#100
 110+ C600 22 8F 94    >          ld      (light.posz),hl
 111+ C603                        rscUnpack      KRscMouse, res_tab
 111+ C603 3E 04       >         ld      a,KRscMouse
 111+ C605 11 57 B0    >         ld      de,res_tab
 111+ C608 CD F0 77    >         call    rsc.unpack
 112+ C60B                        rscUnpack      KRscPlanet, res_tab
 112+ C60B 3E 03       >         ld      a,KRscPlanet
 112+ C60D 11 57 B0    >         ld      de,res_tab
 112+ C610 CD F0 77    >         call    rsc.unpack
 113+ C613                        callix         rotoid.scrClear, #4600
 113+ C613 DD 21 00 46 >         ld      ix,#4600
 113+ C617 CD 41 9C    >         call    rotoid.scrClear
 114+ C61A                        cnmMobPos      mobCat1, #140, #ffd0, #00
 114+ C61A 21 40 01    >         ld      hl,#140
 114+ C61D 22 F4 C3    >         ld      (mobCat1+mobdef.posx),hl
 114+ C620 21 D0 FF    >         ld      hl,#ffd0
 114+ C623 22 F6 C3    >         ld      (mobCat1+mobdef.posy),hl
 114+ C626 21 00 00    >         ld      hl,#00
 114+ C629 22 F8 C3    >         ld      (mobCat1+mobdef.posz),hl
 115+ C62C C9                     ret
 116+ C62D
 117+ C62D              .erase:
 118+ C62D              ;          run    makeStars.erase, starCalpamos
 119+ C62D                        gdel   gfxPlanet
 119+ C62D 4F A7 1F C4 >          dw     eraseMobHDI, gfxPlanet
 120+ C631                        gdel   gfxMouse
 120+ C631 4F A7 33 C4 >          dw     eraseMobHDI, gfxMouse
 121+ C635                        mdel   mobCat1
 121+ C635 BA 9A F0 C3 >         dw      eraseMultiObject,mobCat1
 122+ C639                        mdel   mobCat2
 122+ C639 BA 9A 5A C3 >         dw      eraseMultiObject,mobCat2
 123+ C63D                        mdel   mobCat3
 123+ C63D BA 9A 7F C3 >         dw      eraseMultiObject,mobCat3
 124+ C641                        mEnd
 124+ C641 00 00       >        dw    0
 125+ C643              .draw:
 126+ C643                        run    makeStars.draw, starCalpamos
 126+ C643 52 A0 DD 7C >        dw       makeStars.draw, starCalpamos
 127+ C647                        gotoFrom  .s1, #04
 127+ C647 05 00 50 C6 >          dw     #05, .s1
 127+ C64B 04          >          db     #04
 128+ C64C                        gdraw  gfxPlanet
 128+ C64C E5 A7 1F C4 >          dw     drawMobHDI, gfxPlanet
 129+ C650              .s1:
 130+ C650                        gdraw  gfxMouse
 130+ C650 E5 A7 33 C4 >          dw     drawMobHDI, gfxMouse
 131+ C654                        mSort  3
 131+ C654 A9 99 03 00 >         dw      bsort, 3
 132+ C658                        mdraw  mobCat3
 132+ C658 DB 9A 7F C3 >         dw      drawMultiObject,mobCat3
 133+ C65C                        mdraw  mobCat2
 133+ C65C DB 9A 5A C3 >         dw      drawMultiObject,mobCat2
 134+ C660                        mdraw  mobCat1
 134+ C660 DB 9A F0 C3 >         dw      drawMultiObject,mobCat1
 135+ C664                        mEnd
 135+ C664 00 00       >        dw    0
 136+ C666              .anim:
 137+ C666                        retUntil #40
 137+ C666 01 00 40 00 >        dw       #01,#40
 138+ C66A                        mAniMoveXYZf  mobCat1, mobdef.posx, -1, 0, 1
 138+ C66A BE 97       >         dw      animate.moveXYZf
 138+ C66C F4 C3 FF FF >         dw      mobCat1+mobdef.posx,-1,0,1
 138+ C670 00 00 01 00 >
 139+ C674                        mAniMoveCD    gfxMouse, mobdef.posy, 8, 5, 20
 139+ C674 94 98       >           dw      animate.moveCnt
 139+ C676 39 C4       >           dw      gfxMouse+mobdef.posy
 139+ C678 08 00       >           dw      8
 139+ C67A 14          >           db      20
 139+ C67B 05          >           db      5
 140+ C67C                        mEnd
 140+ C67C 00 00       >        dw    0
 141+ C67E              .alen: =  $-.anim
 142+ C67E
 143+ C67E              s_cheese_2:
 144+ C67E              .init:
 145+ C67E                        cnmScreenplayDisable
 145+ C67E 3E A7       >          ld    a,#a7                 ; and_a
 145+ C680 32 27 95    >          ld    (rotoid.run.scene),a
 146+ C683                        cnmFocal 3
 146+ C683 3E 03       >          ld    a,3
 146+ C685 CD 31 A7    >          call  persp16b.init
 147+ C688                        cnmScnXYZ      #0,#0,#000
 147+ C688 21 00 00    >         ld      hl,#0
 147+ C68B 22 83 94    >         ld      (rotoid.scene.posx),hl
 147+ C68E 21 00 00    >         ld      hl,#0
 147+ C691 22 85 94    >         ld      (rotoid.scene.posy),hl
 147+ C694 21 00 00    >         ld      hl,#000
 147+ C697 22 87 94    >         ld      (rotoid.scene.posz),hl
 148+ C69A                        cnmScrCenter   #80,#60
 148+ C69A 21 80 00    >         ld      hl,#80
 148+ C69D 22 98 94    >         ld      (rotoid.screen.posx),hl
 148+ C6A0 21 60 00    >         ld      hl,#60
 148+ C6A3 22 9A 94    >         ld      (rotoid.screen.posy),hl
 149+ C6A6                        cnmScnFar      #300
 149+ C6A6 21 00 03    >         ld      hl,#300
 149+ C6A9 22 89 94    >         ld      (rotoid.scene.far),hl
 150+ C6AC                        cnmScnFade     #120
 150+ C6AC 21 20 01    >         ld      hl,#120
 150+ C6AF 22 8B 94    >         ld      (rotoid.scene.fade),hl
 151+ C6B2                        cnmScrTopBot   0,191
 151+ C6B2 21 00 BF    >         ld      hl,0+191*256
 151+ C6B5 22 9C 94    >         ld      (screen.cltop),hl
 152+ C6B8                        cnmLightShade  #03
 152+ C6B8 3E 03       >          ld    a,#03
 152+ C6BA 32 96 94    >          ld    (rotoid.light.shade),a
 153+ C6BD                        cnmLightBright #00,#07
 153+ C6BD 3E 00       >          ld      a,#00
 153+ C6BF 32 91 94    >          ld      (rotoid.light.bright),a
 153+ C6C2 3E 07       >          ld      a,#07
 153+ C6C4 32 92 94    >          ld      (rotoid.light.contrs),a
 154+ C6C7                        cnmLightMode   #00
 154+ C6C7 3E 00       >          ld      a,#00
 154+ C6C9 32 97 94    >          ld      (light.mode),a
 155+ C6CC                        cnmLightPos    #a800,#100
 155+ C6CC 21 00 A8    >          ld      hl,#a800
 155+ C6CF 22 8D 94    >          ld      (light.posx),hl
 155+ C6D2 21 00 01    >          ld      hl,#100
 155+ C6D5 22 8F 94    >          ld      (light.posz),hl
 156+ C6D8                        cnmMobPos      mobCatx, #140, #ffd0, #30
 156+ C6D8 21 40 01    >         ld      hl,#140
 156+ C6DB 22 19 C4    >         ld      (mobCatx+mobdef.posx),hl
 156+ C6DE 21 D0 FF    >         ld      hl,#ffd0
 156+ C6E1 22 1B C4    >         ld      (mobCatx+mobdef.posy),hl
 156+ C6E4 21 30 00    >         ld      hl,#30
 156+ C6E7 22 1D C4    >         ld      (mobCatx+mobdef.posz),hl
 157+ C6EA                        callix         rotoid.scrClear, #4600
 157+ C6EA DD 21 00 46 >         ld      ix,#4600
 157+ C6EE CD 41 9C    >         call    rotoid.scrClear
 158+ C6F1 C9                     ret
 159+ C6F2
 160+ C6F2              .erase:   mdel           mobCatx
 160+ C6F2 BA 9A 15 C4 >         dw      eraseMultiObject,mobCatx
 161+ C6F6                        mEnd
 161+ C6F6 00 00       >        dw    0
 162+ C6F8              .draw:    mdraw          mobCatx
 162+ C6F8 DB 9A 15 C4 >         dw      drawMultiObject,mobCatx
 163+ C6FC                        mEnd
 163+ C6FC 00 00       >        dw    0
 164+ C6FE              .anim:    mAniMoveXYZ   mobCatx, mobdef.posx, -1, 0, 0
 164+ C6FE C3 97       >         dw      animate.moveXYZ
 164+ C700 19 C4 FF FF >         dw      mobCatx+mobdef.posx,-1,0,0
 164+ C704 00 00 00 00 >
 165+ C708                        mEnd
 165+ C708 00 00       >        dw    0
 166+ C70A              .alen: =  $-.anim
 167+ C70A              ;###############################################################################
 168+ C70A              s_cheese:
 169+ C70A              .init:
 170+ C70A                        debug_border_halt 2
 170+ C70A             >        ifdef debug
 170+ C70A ~           >          push bc,af
 170+ C70A ~           >1         ld   a,_val
 170+ C70A ~           >  out  (#fe),a
 170+ C70A ~           >          xor  a
 170+ C70A ~           >  out  (#fe),a
 170+ C70A ~           >          ld   bc,#7ffe
 170+ C70A ~           >          in   a,(c)
 170+ C70A ~           >          rra
 170+ C70A ~           >          jr   c,1B
 170+ C70A ~           >          pop  af,bc
 170+ C70A             >        endif
 171+ C70A                        ReturnVramAfterInterrupt
 171+ C70A 3E FF       >          ld    a,#ff
 171+ C70C 32 39 BC    >          ld    (@imask),a
 171+ C70F AF          >          xor   a
 171+ C710 32 3B BC    >          ld    (@ivram),a
 172+ C713                        cnmFocal 3
 172+ C713 3E 03       >          ld    a,3
 172+ C715 CD 31 A7    >          call  persp16b.init
 173+ C718                        cnmScnXYZ      #0,#0,#000
 173+ C718 21 00 00    >         ld      hl,#0
 173+ C71B 22 83 94    >         ld      (rotoid.scene.posx),hl
 173+ C71E 21 00 00    >         ld      hl,#0
 173+ C721 22 85 94    >         ld      (rotoid.scene.posy),hl
 173+ C724 21 00 00    >         ld      hl,#000
 173+ C727 22 87 94    >         ld      (rotoid.scene.posz),hl
 174+ C72A                        cnmScrCenter   #80,#60
 174+ C72A 21 80 00    >         ld      hl,#80
 174+ C72D 22 98 94    >         ld      (rotoid.screen.posx),hl
 174+ C730 21 60 00    >         ld      hl,#60
 174+ C733 22 9A 94    >         ld      (rotoid.screen.posy),hl
 175+ C736                        cnmScnFar      #300
 175+ C736 21 00 03    >         ld      hl,#300
 175+ C739 22 89 94    >         ld      (rotoid.scene.far),hl
 176+ C73C                        cnmScnFade     #120
 176+ C73C 21 20 01    >         ld      hl,#120
 176+ C73F 22 8B 94    >         ld      (rotoid.scene.fade),hl
 177+ C742                        cnmScrTopBot   0,191
 177+ C742 21 00 BF    >         ld      hl,0+191*256
 177+ C745 22 9C 94    >         ld      (screen.cltop),hl
 178+ C748                        cnmLightShade  #03
 178+ C748 3E 03       >          ld    a,#03
 178+ C74A 32 96 94    >          ld    (rotoid.light.shade),a
 179+ C74D                        cnmLightBright #00,#07
 179+ C74D 3E 00       >          ld      a,#00
 179+ C74F 32 91 94    >          ld      (rotoid.light.bright),a
 179+ C752 3E 07       >          ld      a,#07
 179+ C754 32 92 94    >          ld      (rotoid.light.contrs),a
 180+ C757                        cnmLightMode   #00
 180+ C757 3E 00       >          ld      a,#00
 180+ C759 32 97 94    >          ld      (light.mode),a
 181+ C75C                        cnmLightPos    #a800,#100
 181+ C75C 21 00 A8    >          ld      hl,#a800
 181+ C75F 22 8D 94    >          ld      (light.posx),hl
 181+ C762 21 00 01    >          ld      hl,#100
 181+ C765 22 8F 94    >          ld      (light.posz),hl
 182+ C768                        rscUnpack      KRscMouse, res_tab
 182+ C768 3E 04       >         ld      a,KRscMouse
 182+ C76A 11 57 B0    >         ld      de,res_tab
 182+ C76D CD F0 77    >         call    rsc.unpack
 183+ C770                        rscUnpack      KRscPlanet, res_tab
 183+ C770 3E 03       >         ld      a,KRscPlanet
 183+ C772 11 57 B0    >         ld      de,res_tab
 183+ C775 CD F0 77    >         call    rsc.unpack
 184+ C778                        callix         rotoid.scrClear, #4600
 184+ C778 DD 21 00 46 >         ld      ix,#4600
 184+ C77C CD 41 9C    >         call    rotoid.scrClear
 185+ C77F                        cnmMobPos      mobCat1, #120, #ffd0, #00                              ;z=0
 185+ C77F 21 20 01    >         ld      hl,#120
 185+ C782 22 F4 C3    >         ld      (mobCat1+mobdef.posx),hl
 185+ C785 21 D0 FF    >         ld      hl,#ffd0
 185+ C788 22 F6 C3    >         ld      (mobCat1+mobdef.posy),hl
 185+ C78B 21 00 00    >         ld      hl,#00
 185+ C78E 22 F8 C3    >         ld      (mobCat1+mobdef.posz),hl
 186+ C791                        WaitF          syncid_060
 186+ C791 CD 66 BF    >          call  wait4FrameInStack
 186+ C794 0E 1A       >          dw    syncid_060
 187+ C796 C9           .pini:    ret
 188+ C797
 189+ C797              .erase:
 190+ C797              ;          run    makeStars.erase, starCalpamos
 191+ C797              ;          gdel   gfxPlanet
 192+ C797                        gdel   gfxMouse
 192+ C797 4F A7 33 C4 >          dw     eraseMobHDI, gfxMouse
 193+ C79B                        mdel   mobCat1
 193+ C79B BA 9A F0 C3 >         dw      eraseMultiObject,mobCat1
 194+ C79F                        mdel   mobCat2
 194+ C79F BA 9A 5A C3 >         dw      eraseMultiObject,mobCat2
 195+ C7A3                        mdel   mobCat3
 195+ C7A3 BA 9A 7F C3 >         dw      eraseMultiObject,mobCat3
 196+ C7A7                        mEnd
 196+ C7A7 00 00       >        dw    0
 197+ C7A9              .draw:
 198+ C7A9                        run    makeStars.draw, starCalpamos
 198+ C7A9 52 A0 DD 7C >        dw       makeStars.draw, starCalpamos
 199+ C7AD                        gotoFrom  .s1, #04
 199+ C7AD 05 00 B6 C7 >          dw     #05, .s1
 199+ C7B1 04          >          db     #04
 200+ C7B2                        gdraw  gfxPlanet
 200+ C7B2 E5 A7 1F C4 >          dw     drawMobHDI, gfxPlanet
 201+ C7B6              .s1:
 202+ C7B6                        gdraw  gfxMouse
 202+ C7B6 E5 A7 33 C4 >          dw     drawMobHDI, gfxMouse
 203+ C7BA                        mSort  3
 203+ C7BA A9 99 03 00 >         dw      bsort, 3
 204+ C7BE                        mdraw  mobCat3
 204+ C7BE DB 9A 7F C3 >         dw      drawMultiObject,mobCat3
 205+ C7C2                        mdraw  mobCat2
 205+ C7C2 DB 9A 5A C3 >         dw      drawMultiObject,mobCat2
 206+ C7C6                        mdraw  mobCat1
 206+ C7C6 DB 9A F0 C3 >         dw      drawMultiObject,mobCat1
 207+ C7CA                        mEnd
 207+ C7CA 00 00       >        dw    0
 208+ C7CC              .anim:
 209+ C7CC                        retUntil #40
 209+ C7CC 01 00 40 00 >        dw       #01,#40
 210+ C7D0              ;          mAniMoveXYZf  mobCat1, mobdef.posx, -1, 0, 0
 211+ C7D0                        mAniMoveXYZf  mobCat1, mobdef.posx, -1, 0, 2
 211+ C7D0 BE 97       >         dw      animate.moveXYZf
 211+ C7D2 F4 C3 FF FF >         dw      mobCat1+mobdef.posx,-1,0,2
 211+ C7D6 00 00 02 00 >
 212+ C7DA                        mAniMoveCD    gfxMouse, mobdef.posy, 8, 5, 20
 212+ C7DA 94 98       >           dw      animate.moveCnt
 212+ C7DC 39 C4       >           dw      gfxMouse+mobdef.posy
 212+ C7DE 08 00       >           dw      8
 212+ C7E0 14          >           db      20
 212+ C7E1 05          >           db      5
 213+ C7E2                        mEnd
 213+ C7E2 00 00       >        dw    0
 214+ C7E4              .alen: =  $-.anim
 215+ C7E4
 216+ C7E4              ;###############################################################################
 217+ C7E4              s_endtitles:
 218+ C7E4              .init:
 219+ C7E4              ;          WaitF  syncid_1D6+8               ; latest start of titles
 220+ C7E4              ;          call   @rtd_tit:  dw  txb05
 221+ C7E4                        callpg  @screen.endtitles, #50
 221+ C7E4 CD 0F BF    >          call    longCall
 221+ C7E7 50          >          db      #50
 221+ C7E8 76 7F       >          dw      @screen.endtitles
 222+ C7EA C9                     ret
 223+ C7EB              .pini:
 224+ C7EB C9                     ret
 225+ C7EC              .anim:
 226+ C7EC              .draw:
 227+ C7EC              .erase:
 228+ C7EC                        mEnd
 228+ C7EC 00 00       >        dw    0
 229+ C7EE              .alen:    = $-.anim
 230+ C7EE              ;###############################################################################
 231+ C7EE
 232+ C7EE              s_escape:
 233+ C7EE              .init:
 234+ C7EE                        cnmFocal 3
 234+ C7EE 3E 03       >          ld    a,3
 234+ C7F0 CD 31 A7    >          call  persp16b.init
 235+ C7F3                        cnmScnXYZ      #fe40,#1e,#fe00
 235+ C7F3 21 40 FE    >         ld      hl,#fe40
 235+ C7F6 22 83 94    >         ld      (rotoid.scene.posx),hl
 235+ C7F9 21 1E 00    >         ld      hl,#1e
 235+ C7FC 22 85 94    >         ld      (rotoid.scene.posy),hl
 235+ C7FF 21 00 FE    >         ld      hl,#fe00
 235+ C802 22 87 94    >         ld      (rotoid.scene.posz),hl
 236+ C805                        cnmScrCenter   #62,#67
 236+ C805 21 62 00    >         ld      hl,#62
 236+ C808 22 98 94    >         ld      (rotoid.screen.posx),hl
 236+ C80B 21 67 00    >         ld      hl,#67
 236+ C80E 22 9A 94    >         ld      (rotoid.screen.posy),hl
 237+ C811                        cnmScnFar      #300
 237+ C811 21 00 03    >         ld      hl,#300
 237+ C814 22 89 94    >         ld      (rotoid.scene.far),hl
 238+ C817                        cnmScnFade     #120
 238+ C817 21 20 01    >         ld      hl,#120
 238+ C81A 22 8B 94    >         ld      (rotoid.scene.fade),hl
 239+ C81D                        cnmScrTopBot   16,167
 239+ C81D 21 10 A7    >         ld      hl,16+167*256
 239+ C820 22 9C 94    >         ld      (screen.cltop),hl
 240+ C823                        cnmLightShade  #03
 240+ C823 3E 03       >          ld    a,#03
 240+ C825 32 96 94    >          ld    (rotoid.light.shade),a
 241+ C828                        cnmLightBright #00,#07
 241+ C828 3E 00       >          ld      a,#00
 241+ C82A 32 91 94    >          ld      (rotoid.light.bright),a
 241+ C82D 3E 07       >          ld      a,#07
 241+ C82F 32 92 94    >          ld      (rotoid.light.contrs),a
 242+ C832                        cnmLightMode   #00
 242+ C832 3E 00       >          ld      a,#00
 242+ C834 32 97 94    >          ld      (light.mode),a
 243+ C837                        cnmLightPos    #a000,#100
 243+ C837 21 00 A0    >          ld      hl,#a000
 243+ C83A 22 8D 94    >          ld      (light.posx),hl
 243+ C83D 21 00 01    >          ld      hl,#100
 243+ C840 22 8F 94    >          ld      (light.posz),hl
 244+ C843                        rscUnpack      KRscEarth1, res_tab
 244+ C843 3E 01       >         ld      a,KRscEarth1
 244+ C845 11 57 B0    >         ld      de,res_tab
 244+ C848 CD F0 77    >         call    rsc.unpack
 245+ C84B                        callix         makeStars.draw, starEscape
 245+ C84B DD 21 E6 7C >         ld      ix,starEscape
 245+ C84F CD 52 A0    >         call    makeStars.draw
 246+ C852              ;          call           @mmu.cpscr57
 247+ C852                        WaitF          syncid_058
 247+ C852 CD 66 BF    >          call  wait4FrameInStack
 247+ C855 E8 07       >          dw    syncid_058
 248+ C857 C9                     ret
 249+ C858              .erase:
 250+ C858              ;          run    makeStars.erase, starCalpamos
 251+ C858                        mdel   mobCat1
 251+ C858 BA 9A F0 C3 >         dw      eraseMultiObject,mobCat1
 252+ C85C                        mdel   mobCat2
 252+ C85C BA 9A 5A C3 >         dw      eraseMultiObject,mobCat2
 253+ C860                        mdel   mobCat3
 253+ C860 BA 9A 7F C3 >         dw      eraseMultiObject,mobCat3
 254+ C864                        mEnd
 254+ C864 00 00       >        dw    0
 255+ C866              .draw:
 256+ C866                        run    makeStars.draw, starEscape
 256+ C866 52 A0 E6 7C >        dw       makeStars.draw, starEscape
 257+ C86A                        mSort  3
 257+ C86A A9 99 03 00 >         dw      bsort, 3
 258+ C86E                        mdraw  mobCat3
 258+ C86E DB 9A 7F C3 >         dw      drawMultiObject,mobCat3
 259+ C872                        mdraw  mobCat2
 259+ C872 DB 9A 5A C3 >         dw      drawMultiObject,mobCat2
 260+ C876                        mdraw  mobCat1
 260+ C876 DB 9A F0 C3 >         dw      drawMultiObject,mobCat1
 261+ C87A                        mEnd
 261+ C87A 00 00       >        dw    0
 262+ C87C              .anim:
 263+ C87C              ;          retUntil #20
 264+ C87C                        mAniMoveXYZf  mobCat1, mobdef.posx, 0, 0, -1
 264+ C87C BE 97       >         dw      animate.moveXYZf
 264+ C87E F4 C3 00 00 >         dw      mobCat1+mobdef.posx,0,0,-1
 264+ C882 00 00 FF FF >
 265+ C886                        mEnd
 265+ C886 00 00       >        dw    0
 266+ C888              .alen: =  $-.anim
 267+ C888
 268+ C888              ;###############################################################################
 269+ C888
 270+ C888              s_launchpad:
 271+ C888              .init:
 272+ C888                        callpg         screen.blueprint, #50
 272+ C888 CD 0F BF    >          call    longCall
 272+ C88B 50          >          db      #50
 272+ C88C A8 7D       >          dw      screen.blueprint
 273+ C88E                        cnmFocal 3
 273+ C88E 3E 03       >          ld    a,3
 273+ C890 CD 31 A7    >          call  persp16b.init
 274+ C893                        cnmScnXYZ      0,0,0
 274+ C893 21 00 00    >         ld      hl,0
 274+ C896 22 83 94    >         ld      (rotoid.scene.posx),hl
 274+ C899 21 00 00    >         ld      hl,0
 274+ C89C 22 85 94    >         ld      (rotoid.scene.posy),hl
 274+ C89F 21 00 00    >         ld      hl,0
 274+ C8A2 22 87 94    >         ld      (rotoid.scene.posz),hl
 275+ C8A5                        cnmScrCenter   #7f,#40
 275+ C8A5 21 7F 00    >         ld      hl,#7f
 275+ C8A8 22 98 94    >         ld      (rotoid.screen.posx),hl
 275+ C8AB 21 40 00    >         ld      hl,#40
 275+ C8AE 22 9A 94    >         ld      (rotoid.screen.posy),hl
 276+ C8B1                        cnmScnFar      #300
 276+ C8B1 21 00 03    >         ld      hl,#300
 276+ C8B4 22 89 94    >         ld      (rotoid.scene.far),hl
 277+ C8B7                        cnmScnFade     #120
 277+ C8B7 21 20 01    >         ld      hl,#120
 277+ C8BA 22 8B 94    >         ld      (rotoid.scene.fade),hl
 278+ C8BD                        cnmScrTopBot   0,191
 278+ C8BD 21 00 BF    >         ld      hl,0+191*256
 278+ C8C0 22 9C 94    >         ld      (screen.cltop),hl
 279+ C8C3                        cnmLightShade  #03
 279+ C8C3 3E 03       >          ld    a,#03
 279+ C8C5 32 96 94    >          ld    (rotoid.light.shade),a
 280+ C8C8                        cnmLightBright #00,#07
 280+ C8C8 3E 00       >          ld      a,#00
 280+ C8CA 32 91 94    >          ld      (rotoid.light.bright),a
 280+ C8CD 3E 07       >          ld      a,#07
 280+ C8CF 32 92 94    >          ld      (rotoid.light.contrs),a
 281+ C8D2                        cnmLightMode   #00
 281+ C8D2 3E 00       >          ld      a,#00
 281+ C8D4 32 97 94    >          ld      (light.mode),a
 282+ C8D7                        cnmLightPos    #a000,#100
 282+ C8D7 21 00 A0    >          ld      hl,#a000
 282+ C8DA 22 8D 94    >          ld      (light.posx),hl
 282+ C8DD 21 00 01    >          ld      hl,#100
 282+ C8E0 22 8F 94    >          ld      (light.posz),hl
 283+ C8E3
 284+ C8E3                        callix     rotoid.scrClear, #00
 284+ C8E3 DD 21 00 00 >         ld      ix,#00
 284+ C8E7 CD 41 9C    >         call    rotoid.scrClear
 285+ C8EA                        rscUnpack  KRscLaunchpad1, res_tab
 285+ C8EA 3E 00       >         ld      a,KRscLaunchpad1
 285+ C8EC 11 57 B0    >         ld      de,res_tab
 285+ C8EF CD F0 77    >         call    rsc.unpack
 286+ C8F2                        WaitF      syncid_048
 286+ C8F2 CD 66 BF    >          call  wait4FrameInStack
 286+ C8F5 00 04       >          dw    syncid_048
 287+ C8F7 21 19 81               ld         hl,exe_launchpad          ;add kernel process to blink with led
 288+ C8FA CD E3 BE               call       execmd.init
 289+ C8FD C9                     ret
 290+ C8FE              .erase:
 291+ C8FE                        mdel   mobRocket
 291+ C8FE BA 9A 88 C2 >         dw      eraseMultiObject,mobRocket
 292+ C902                        mEnd
 292+ C902 00 00       >        dw    0
 293+ C904              .draw:
 294+ C904                        mdraw  mobRocket
 294+ C904 DB 9A 88 C2 >         dw      drawMultiObject,mobRocket
 295+ C908                        mEnd
 295+ C908 00 00       >        dw    0
 296+ C90A              .anim:
 297+ C90A                        mAniMoveXYZf  mobRocket, mobdef.posx, 0, -1, 0
 297+ C90A BE 97       >         dw      animate.moveXYZf
 297+ C90C 8C C2 00 00 >         dw      mobRocket+mobdef.posx,0,-1,0
 297+ C910 FF FF 00 00 >
 298+ C914                        mEnd
 298+ C914 00 00       >        dw    0
 299+ C916              .alen: =  $-.anim
 300+ C916
 301+ C916              ;###############################################################################
 302+ C916
 303+ C916              s_disengage:
 304+ C916              .init:
 305+ C916                        cnmFocal 3
 305+ C916 3E 03       >          ld    a,3
 305+ C918 CD 31 A7    >          call  persp16b.init
 306+ C91B                        cnmScnXYZ      0,-#070,0
 306+ C91B 21 00 00    >         ld      hl,0
 306+ C91E 22 83 94    >         ld      (rotoid.scene.posx),hl
 306+ C921 21 90 FF    >         ld      hl,-#070
 306+ C924 22 85 94    >         ld      (rotoid.scene.posy),hl
 306+ C927 21 00 00    >         ld      hl,0
 306+ C92A 22 87 94    >         ld      (rotoid.scene.posz),hl
 307+ C92D                        cnmScrCenter   #7f,#40
 307+ C92D 21 7F 00    >         ld      hl,#7f
 307+ C930 22 98 94    >         ld      (rotoid.screen.posx),hl
 307+ C933 21 40 00    >         ld      hl,#40
 307+ C936 22 9A 94    >         ld      (rotoid.screen.posy),hl
 308+ C939                        cnmScnFar      #300
 308+ C939 21 00 03    >         ld      hl,#300
 308+ C93C 22 89 94    >         ld      (rotoid.scene.far),hl
 309+ C93F                        cnmScnFade     #120
 309+ C93F 21 20 01    >         ld      hl,#120
 309+ C942 22 8B 94    >         ld      (rotoid.scene.fade),hl
 310+ C945                        cnmScrTopBot   #10,#a0
 310+ C945 21 10 A0    >         ld      hl,#10+#a0*256
 310+ C948 22 9C 94    >         ld      (screen.cltop),hl
 311+ C94B                        cnmLightShade  #03
 311+ C94B 3E 03       >          ld    a,#03
 311+ C94D 32 96 94    >          ld    (rotoid.light.shade),a
 312+ C950                        cnmLightBright #00,#07
 312+ C950 3E 00       >          ld      a,#00
 312+ C952 32 91 94    >          ld      (rotoid.light.bright),a
 312+ C955 3E 07       >          ld      a,#07
 312+ C957 32 92 94    >          ld      (rotoid.light.contrs),a
 313+ C95A                        cnmLightMode   #00
 313+ C95A 3E 00       >          ld      a,#00
 313+ C95C 32 97 94    >          ld      (light.mode),a
 314+ C95F                        cnmLightPos    #a000,#100
 314+ C95F 21 00 A0    >          ld      hl,#a000
 314+ C962 22 8D 94    >          ld      (light.posx),hl
 314+ C965 21 00 01    >          ld      hl,#100
 314+ C968 22 8F 94    >          ld      (light.posz),hl
 315+ C96B                        callix         rotoid.scrClear, #4700
 315+ C96B DD 21 00 47 >         ld      ix,#4700
 315+ C96F CD 41 9C    >         call    rotoid.scrClear
 316+ C972                        WaitF          syncid_050
 316+ C972 CD 66 BF    >          call  wait4FrameInStack
 316+ C975 40 06       >          dw    syncid_050
 317+ C977 C9                     ret
 318+ C978              .erase:
 319+ C978              ;          run    makeStars.erase, starCalpamos
 320+ C978                        mdel   mobHead
 320+ C978 BA 9A C4 C1 >         dw      eraseMultiObject,mobHead
 321+ C97C                        mdel   mobBody
 321+ C97C BA 9A CE C1 >         dw      eraseMultiObject,mobBody
 322+ C980                        mEnd
 322+ C980 00 00       >        dw    0
 323+ C982              .draw:
 324+ C982                        run    makeStars.draw, starCalpamos
 324+ C982 52 A0 DD 7C >        dw       makeStars.draw, starCalpamos
 325+ C986                        mdraw  mobHead
 325+ C986 DB 9A C4 C1 >         dw      drawMultiObject,mobHead
 326+ C98A                        mdraw  mobBody
 326+ C98A DB 9A CE C1 >         dw      drawMultiObject,mobBody
 327+ C98E                        mEnd
 327+ C98E 00 00       >        dw    0
 328+ C990              .anim:
 329+ C990              ;          retUntil #20
 330+ C990              ;          mAniMoveXYZf  mobHead, mobdef.posx, 0, -1, 0
 331+ C990                        gotoFrom .anim_disengage, #30
 331+ C990 05 00 AB C9 >          dw     #05, .anim_disengage
 331+ C994 30          >          db     #30
 332+ C995              ;          mAniMoveXYZ scene, 0, 0, #f0, 0
 333+ C995              ;          mAniMoveXYZ mobBody, mobdef.posx, 0, #ef, 0
 334+ C995              ;          mAniMoveXYZ mobHead, mobdef.posx, 0, #ef, 0
 335+ C995
 336+ C995              ;          mAniMoveXYZ scene, 0, 0, #f0, 0
 337+ C995                        mAniMoveXYZ mobBody, mobdef.posx, 0, -2, 0
 337+ C995 C3 97       >         dw      animate.moveXYZ
 337+ C997 D2 C1 00 00 >         dw      mobBody+mobdef.posx,0,-2,0
 337+ C99B FE FF 00 00 >
 338+ C99F                        mAniMoveXYZ mobHead, mobdef.posx, 0, -2, 0
 338+ C99F C3 97       >         dw      animate.moveXYZ
 338+ C9A1 C8 C1 00 00 >         dw      mobHead+mobdef.posx,0,-2,0
 338+ C9A5 FE FF 00 00 >
 339+ C9A9
 340+ C9A9                        mEnd
 340+ C9A9 00 00       >        dw    0
 341+ C9AB
 342+ C9AB              .anim_disengage:
 343+ C9AB              ;          mAniMoveXYZ scene, 0, 0, #f0, 0
 344+ C9AB              ;          mAniMoveXYZ mobBody, mobdef.posx, 0, #f3, 0
 345+ C9AB              ;          mAniMoveXYZ mobHead, mobdef.posx, 0, #ef, 0
 346+ C9AB
 347+ C9AB              ;          mAniMoveXYZ scene, 0, 0, #f0, 0
 348+ C9AB                        mAniMoveXYZ mobBody, mobdef.posx, 0,  1, 0
 348+ C9AB C3 97       >         dw      animate.moveXYZ
 348+ C9AD D2 C1 00 00 >         dw      mobBody+mobdef.posx,0,1,0
 348+ C9B1 01 00 00 00 >
 349+ C9B5                        mAniMoveXYZ mobHead, mobdef.posx, 0, -3, 0
 349+ C9B5 C3 97       >         dw      animate.moveXYZ
 349+ C9B7 C8 C1 00 00 >         dw      mobHead+mobdef.posx,0,-3,0
 349+ C9BB FD FF 00 00 >
 350+ C9BF
 351+ C9BF                        mEnd
 351+ C9BF 00 00       >        dw    0
 352+ C9C1              .alen: =  $-.anim
 353+ C9C1
 354+ C9C1              ;###############################################################################
 355+ C9C1              s_crash0:
 356+ C9C1              .init:
 357+ C9C1                        WaitF          syncid_068
 357+ C9C1 CD 66 BF    >          call  wait4FrameInStack
 357+ C9C4 97 1B       >          dw    syncid_068
 358+ C9C6                        callix    rotoid.scrClear, #00
 358+ C9C6 DD 21 00 00 >         ld      ix,#00
 358+ C9CA CD 41 9C    >         call    rotoid.scrClear
 359+ C9CD                        rscUnpack KRscEnding, res_tab
 359+ C9CD 3E 0B       >         ld      a,KRscEnding
 359+ C9CF 11 57 B0    >         ld      de,res_tab
 359+ C9D2 CD F0 77    >         call    rsc.unpack
 360+ C9D5 C9                     ret
 361+ C9D6              .anim:
 362+ C9D6              .draw:
 363+ C9D6              .erase:
 364+ C9D6                        mEnd
 364+ C9D6 00 00       >        dw    0
 365+ C9D8              .alen:    = $-.anim
 366+ C9D8
 367+ C9D8              ;###############################################################################
 368+ C9D8              s_crash:
 369+ C9D8              .init:
 370+ C9D8                        WaitF          syncid_068
 370+ C9D8 CD 66 BF    >          call  wait4FrameInStack
 370+ C9DB 97 1B       >          dw    syncid_068
 371+ C9DD                        callix    rotoid.scrClear, #00
 371+ C9DD DD 21 00 00 >         ld      ix,#00
 371+ C9E1 CD 41 9C    >         call    rotoid.scrClear
 372+ C9E4                        rscUnpack KRscEnding, res_tab
 372+ C9E4 3E 0B       >         ld      a,KRscEnding
 372+ C9E6 11 57 B0    >         ld      de,res_tab
 372+ C9E9 CD F0 77    >         call    rsc.unpack
 373+ C9EC                        rscUnpack KRscAstrocat, res_tab
 373+ C9EC 3E 0C       >         ld      a,KRscAstrocat
 373+ C9EE 11 57 B0    >         ld      de,res_tab
 373+ C9F1 CD F0 77    >         call    rsc.unpack
 374+ C9F4                        rscLoad   KRscTruck, res_tab
 374+ C9F4 3E 0D       >         ld      a,KRscTruck
 374+ C9F6 11 57 B0    >         ld      de,res_tab
 374+ C9F9 CD CA 77    >         call    rsc.load
 375+ C9FC                        callix    invMobHDI, gfxTruck
 375+ C9FC DD 21 65 C4 >         ld      ix,gfxTruck
 375+ CA00 CD 7C AC    >         call    invMobHDI
 376+ CA03                        callix    rotMobHDI, gfxTruck
 376+ CA03 DD 21 65 C4 >         ld      ix,gfxTruck
 376+ CA07 CD 7A AB    >         call    rotMobHDI
 377+ CA0A                        cnmFocal       1
 377+ CA0A 3E 01       >          ld    a,1
 377+ CA0C CD 31 A7    >          call  persp16b.init
 378+ CA0F                        cnmScnXYZ      #0,#0,#00
 378+ CA0F 21 00 00    >         ld      hl,#0
 378+ CA12 22 83 94    >         ld      (rotoid.scene.posx),hl
 378+ CA15 21 00 00    >         ld      hl,#0
 378+ CA18 22 85 94    >         ld      (rotoid.scene.posy),hl
 378+ CA1B 21 00 00    >         ld      hl,#00
 378+ CA1E 22 87 94    >         ld      (rotoid.scene.posz),hl
 379+ CA21                        cnmScrCenter   #80,#40
 379+ CA21 21 80 00    >         ld      hl,#80
 379+ CA24 22 98 94    >         ld      (rotoid.screen.posx),hl
 379+ CA27 21 40 00    >         ld      hl,#40
 379+ CA2A 22 9A 94    >         ld      (rotoid.screen.posy),hl
 380+ CA2D                        cnmScrTopBot   0,191
 380+ CA2D 21 00 BF    >         ld      hl,0+191*256
 380+ CA30 22 9C 94    >         ld      (screen.cltop),hl
 381+ CA33                        callix    rotoid.drawMobHDI, gfxTruck
 381+ CA33 DD 21 65 C4 >         ld      ix,gfxTruck
 381+ CA37 CD E5 A7    >         call    rotoid.drawMobHDI
 382+ CA3A C9                     ret
 383+ CA3B
 384+ CA3B              .erase:   gdel      gfxAstrocat
 384+ CA3B 4F A7 51 C4 >          dw     eraseMobHDI, gfxAstrocat
 385+ CA3F                        mEnd
 385+ CA3F 00 00       >        dw    0
 386+ CA41
 387+ CA41              .draw:    gdraw     gfxAstrocat
 387+ CA41 E5 A7 51 C4 >          dw     drawMobHDI, gfxAstrocat
 388+ CA45                        gdraw     gfxTruck
 388+ CA45 E5 A7 65 C4 >          dw     drawMobHDI, gfxTruck
 389+ CA49                        mEnd
 389+ CA49 00 00       >        dw    0
 390+ CA4B
 391+ CA4B              .anim:    mAniMoveCD  gfxAstrocat, mobdef.posx, 8, 12, 140
 391+ CA4B 94 98       >           dw      animate.moveCnt
 391+ CA4D 55 C4       >           dw      gfxAstrocat+mobdef.posx
 391+ CA4F 08 00       >           dw      8
 391+ CA51 8C          >           db      140
 391+ CA52 0C          >           db      12
 392+ CA53                        mAniMoveCD  gfxTruck   , mobdef.posx,-1, 140, 1
 392+ CA53 94 98       >           dw      animate.moveCnt
 392+ CA55 69 C4       >           dw      gfxTruck+mobdef.posx
 392+ CA57 FF FF       >           dw      -1
 392+ CA59 01          >           db      1
 392+ CA5A 8C          >           db      140
 393+ CA5B                        mEnd
 393+ CA5B 00 00       >        dw    0
 394+ CA5D              .alen:    = $-.anim
 395+ CA5D
 396+ CA5D              ;###############################################################################
 397+ CA5D              s_blank:
 398+ CA5D              .init:    cnmScreenplayDisable
 398+ CA5D 3E A7       >          ld    a,#a7                 ; and_a
 398+ CA5F 32 27 95    >          ld    (rotoid.run.scene),a
 399+ CA62 01 00 02               ld        bc,#200
 400+ CA65 76           1         halt
 401+ CA66 0D                     dec       c
 402+ CA67 20 FC                  jr        nz,1B
 403+ CA69 10 FA                  djnz      1B
 404+ CA6B CD CC 73               call      egl.atrFadeFull
 405+ CA6E C9                     ret
 406+ CA6F              .anim:
 407+ CA6F              .erase:
 408+ CA6F              .draw:    mEnd
 408+ CA6F 00 00       >        dw    0
 409+ CA71              .alen:    = $-.anim
 410+ CA71
 411+ CA71 ~            /*
 412+ CA71 ~            ;###############################################################################
 413+ CA71 ~            s_narcis:
 414+ CA71 ~            .init:
 415+ CA71 ~                      cnmScreenplayEnable
 416+ CA71 ~                      cnmScnXYZ      -#40,0,0
 417+ CA71 ~                      cnmScrCenter   #9d,#2a
 418+ CA71 ~                      cnmScnFar      #100
 419+ CA71 ~                      cnmScnFade     #40
 420+ CA71 ~                      cnmScrTopBot   16,167
 421+ CA71 ~                      cnmLightShade  #06
 422+ CA71 ~                      cnmLightBright #03,#09
 423+ CA71 ~                      cnmLightMode   #00
 424+ CA71 ~                      cnmLightPos    #d000,#100
 425+ CA71 ~                      rscUnpack      KRscCloudB, res_tab
 426+ CA71 ~                      rscUnpack      KRscCloudL, res_tab
 427+ CA71 ~                      rscUnpack      KRscCloudR, res_tab
 428+ CA71 ~                      callix         rotoid.scrClear, #0500
 429+ CA71 ~                      cnmFocal       4
 430+ CA71 ~                      ret
 431+ CA71 ~
 432+ CA71 ~            ;.narcis_erase:
 433+ CA71 ~            .erase:
 434+ CA71 ~                      dw     makeStars.erase, starCity
 435+ CA71 ~                      mdel   mobNarcis2
 436+ CA71 ~                      dw     0
 437+ CA71 ~
 438+ CA71 ~            ;.narcis_draw:
 439+ CA71 ~            .draw:
 440+ CA71 ~                      dw     makeStars.draw, starCity
 441+ CA71 ~                      gdraw  gfxCloudL
 442+ CA71 ~                      gdraw  gfxCloudR
 443+ CA71 ~                      gdraw  gfxCloudB
 444+ CA71 ~                      mdraw  mobNarcis2
 445+ CA71 ~
 446+ CA71 ~            ;--------- animations
 447+ CA71 ~                      dw     animate.pal, palNarcis2l
 448+ CA71 ~                      dw     animate.pal, palNarcis2r
 449+ CA71 ~                      mAniMoveCD mobNarcis2, mobdef.posz, #ffff, #ff, #10
 450+ CA71 ~                      dw     0
 451+ CA71 ~
 452+ CA71 ~
 453+ CA71 ~            ;###############################################################################
 454+ CA71 ~            */
 455+ CA71                        display "Scenes start      :",_sc," len:",$-_sc, " end:",$
 456+ CA71
# file closed: Q:\Development\Dev-ZX\demo_cats\demo/data/rotoid/_rt_scenes.a80
 550  CA71                      ENDMODULE
 551  CA71              p0free:
 552  CA71                      DISPLAY "Scene and object free memory:",$10000-$
 553  CA71              ;-------
 554  CA71
 555  CA71                      display "reload:",reload
 556  CA71                      display "p0free:",p0free
 557  CA71
 558  CA71                      ORG  reload
 559  B057                      include "libs/rsc_load.a80"
# file opened: Q:\Development\Dev-ZX\demo_cats\libs/rsc_load.a80
   1+ B057                      DEFINE KtBin 0  ; incbin data into memory, no label is assigned
   2+ B057                      DEFINE KtAsm 1  ; include assembly file
   3+ B057                      DEFINE KtNon 2  ; no include, just data record is created (e.g. for executable resources init, run, draw...)
   4+ B057                      DEFINE KtDat 3  ; incbin with label assignment. Label is in position of RUN field
   5+ B057
   6+ B057              rscnt:  =      0
   7+ B057              _dadd:  =      $
   8+ B057              _dpag:  =      #0
   9+ B057
  10+ B057                      MACRO  rload kname, _rtype, dpg, dst, run, _rfile
  11+ B057 ~                    PAGE   _dpag
  12+ B057 ~                    ORG    _dadd
  13+ B057 ~                    db     _rpg, dpg
  14+ B057 ~            _dend:  =      $
  15+ B057 ~
  16+ B057 ~                    PAGE    _rpg and 7
  17+ B057 ~                    ORG    _radd
  18+ B057 ~
  19+ B057 ~                    IF _rtype=KtBin
  20+ B057 ~                       incbin _rfile
  21+ B057 ~                    ENDIF
  22+ B057 ~
  23+ B057 ~                    IF _rtype=KtDat
  24+ B057 ~            run        incbin _rfile
  25+ B057 ~                    ENDIF
  26+ B057 ~
  27+ B057 ~                    IF _rtype=KtAsm
  28+ B057 ~                       INCLUDE _rfile
  29+ B057 ~                    ENDIF
  30+ B057 ~
  31+ B057 ~                    IF _rtype=KtNon
  32+ B057 ~                       ; nothing to include, just pupulate table
  33+ B057 ~                    ENDIF
  34+ B057 ~            _rend:  =      $
  35+ B057 ~
  36+ B057 ~                    PAGE   _dpag
  37+ B057 ~                    ORG    _dend
  38+ B057 ~                    IF _rtype=KtDat
  39+ B057 ~                       dw     _radd, _rend-_radd, dst, 0
  40+ B057 ~                    ELSE
  41+ B057 ~                       dw     _radd, _rend-_radd, dst, run
  42+ B057 ~                    ENDIF
  43+ B057 ~            _dend:  =      $
  44+ B057 ~
  45+ B057 ~                    ;DISPLAY "Rsc:",rscnt," Start: ",_radd," Len:",_rend-_radd," Pg:",_rpg, " End:",_rend
  46+ B057 ~                    IF _rend>0x10000
  47+ B057 ~                       ; shut down the compiler if data exceeds memory limit
  48+ B057 ~                       LUA
  49+ B057 ~                          sj.exit(0)
  50+ B057 ~                       ENDLUA
  51+ B057 ~                    ENDIF
  52+ B057 ~            ;        display "#:",rscnt
  53+ B057 ~            kname   =      rscnt
  54+ B057 ~            rscnt   =      rscnt+1
  55+ B057 ~            _radd   =      _rend
  56+ B057 ~            _dadd   =      _dend
  57+ B057                      ENDM
  58+ B057
  59+ B057                      MACRO rinclude file
  60+ B057 ~                     PAGE _rpg and 7
  61+ B057 ~                     ORG  _radd
  62+ B057 ~                     INCLUDE file
  63+ B057 ~            _rend:   = $
  64+ B057 ~            _radd:   = $
  65+ B057 ~                     PAGE _dpag
  66+ B057 ~                     ORG  _dend
  67+ B057                      ENDM
  68+ B057
  69+ B057              ;----- resource table
  70+ B057              res_tab:             ; name of the resource table
  71+ B057              _rpg:   = #53          ; ram page to use
  72+ B057              _radd:  = #c000      ; start address in the page
  73+ B057              ;_rend:  = _radd      ; init value (not required)
  74+ B057
  75+ B057              ;        sytax:
  76+ B057              ;        rload kname, _rtype, dpg, dst, run, _rfile
  77+ B057
  78+ B057                       rload  KRscLaunchpad1 , 0  , #50+8, #4000, 0, "demo/data/cats/launchpad_beacon.scr.zx7"
  78+ B057             >        PAGE   _dpag
  78+ B057             >        ORG    _dadd
  78+ B057 53 58       >        db     _rpg, #50+8
  78+ B059             >_dend:  =      $
  78+ B059             >
  78+ B059             >        PAGE    _rpg and 7
  78+ B059             >        ORG    _radd
  78+ C000             >
  78+ C000             >        IF 0=0
  78+ C000             >           incbin "demo/data/cats/launchpad_beacon.scr.zx7"
  78+ C000             >        ENDIF
  78+ C3B4             >
  78+ C3B4             >        IF 0=3
  78+ C3B4 ~           >run        incbin _rfile
  78+ C3B4             >        ENDIF
  78+ C3B4             >
  78+ C3B4             >        IF 0=1
  78+ C3B4 ~           >           INCLUDE _rfile
  78+ C3B4             >        ENDIF
  78+ C3B4             >
  78+ C3B4             >        IF 0=2
  78+ C3B4 ~           >           ; nothing to include, just pupulate table
  78+ C3B4             >        ENDIF
  78+ C3B4             >_rend:  =      $
  78+ C3B4             >
  78+ C3B4             >        PAGE   _dpag
  78+ C3B4             >        ORG    _dend
  78+ B059             >        IF 0=3
  78+ B059 ~           >           dw     _radd, _rend-_radd, dst, 0
  78+ B059             >        ELSE
  78+ B059 00 C0 B4 03 >           dw     _radd, _rend-_radd, #4000, 0
  78+ B05D 00 40 00 00 >
  78+ B061             >        ENDIF
  78+ B061             >_dend:  =      $
  78+ B061             >
  78+ B061             >        ;DISPLAY "Rsc:",rscnt," Start: ",_radd," Len:",_rend-_radd," Pg:",_rpg, " End:",_rend
  78+ B061             >        IF _rend>0x10000
  78+ B061 ~           >           ; shut down the compiler if data exceeds memory limit
  78+ B061 ~           >           LUA
  78+ B061 ~           >              sj.exit(0)
  78+ B061 ~           >           ENDLUA
  78+ B061             >        ENDIF
  78+ B061             >;        display "#:",rscnt
  78+ B061             >KRscLaunchpad1   =      rscnt
  78+ B061             >rscnt   =      rscnt+1
  78+ B061             >_radd   =      _rend
  78+ B061             >_dadd   =      _dend
  79+ B061                       rload  KRscEarth1     , 0  , #50+8, #4000, 0, "demo/data/cats/earth_2.scr.zx7"
  79+ B061             >        PAGE   _dpag
  79+ B061             >        ORG    _dadd
  79+ B061 53 58       >        db     _rpg, #50+8
  79+ B063             >_dend:  =      $
  79+ B063             >
  79+ B063             >        PAGE    _rpg and 7
  79+ B063             >        ORG    _radd
  79+ C3B4             >
  79+ C3B4             >        IF 0=0
  79+ C3B4             >           incbin "demo/data/cats/earth_2.scr.zx7"
  79+ C3B4             >        ENDIF
  79+ C82D             >
  79+ C82D             >        IF 0=3
  79+ C82D ~           >run        incbin _rfile
  79+ C82D             >        ENDIF
  79+ C82D             >
  79+ C82D             >        IF 0=1
  79+ C82D ~           >           INCLUDE _rfile
  79+ C82D             >        ENDIF
  79+ C82D             >
  79+ C82D             >        IF 0=2
  79+ C82D ~           >           ; nothing to include, just pupulate table
  79+ C82D             >        ENDIF
  79+ C82D             >_rend:  =      $
  79+ C82D             >
  79+ C82D             >        PAGE   _dpag
  79+ C82D             >        ORG    _dend
  79+ B063             >        IF 0=3
  79+ B063 ~           >           dw     _radd, _rend-_radd, dst, 0
  79+ B063             >        ELSE
  79+ B063 B4 C3 79 04 >           dw     _radd, _rend-_radd, #4000, 0
  79+ B067 00 40 00 00 >
  79+ B06B             >        ENDIF
  79+ B06B             >_dend:  =      $
  79+ B06B             >
  79+ B06B             >        ;DISPLAY "Rsc:",rscnt," Start: ",_radd," Len:",_rend-_radd," Pg:",_rpg, " End:",_rend
  79+ B06B             >        IF _rend>0x10000
  79+ B06B ~           >           ; shut down the compiler if data exceeds memory limit
  79+ B06B ~           >           LUA
  79+ B06B ~           >              sj.exit(0)
  79+ B06B ~           >           ENDLUA
  79+ B06B             >        ENDIF
  79+ B06B             >;        display "#:",rscnt
  79+ B06B             >KRscEarth1   =      rscnt
  79+ B06B             >rscnt   =      rscnt+1
  79+ B06B             >_radd   =      _rend
  79+ B06B             >_dadd   =      _dend
  80+ B06B                       rload  KRscTitles     , 0  , #50, temp3k,0, "bin/end_titles.bin"                   ;compile 2 times to update addresses of routine calls!!!
  80+ B06B             >        PAGE   _dpag
  80+ B06B             >        ORG    _dadd
  80+ B06B 53 50       >        db     _rpg, #50
  80+ B06D             >_dend:  =      $
  80+ B06D             >
  80+ B06D             >        PAGE    _rpg and 7
  80+ B06D             >        ORG    _radd
  80+ C82D             >
  80+ C82D             >        IF 0=0
  80+ C82D             >           incbin "bin/end_titles.bin"
  80+ C82D             >        ENDIF
  80+ CA39             >
  80+ CA39             >        IF 0=3
  80+ CA39 ~           >run        incbin _rfile
  80+ CA39             >        ENDIF
  80+ CA39             >
  80+ CA39             >        IF 0=1
  80+ CA39 ~           >           INCLUDE _rfile
  80+ CA39             >        ENDIF
  80+ CA39             >
  80+ CA39             >        IF 0=2
  80+ CA39 ~           >           ; nothing to include, just pupulate table
  80+ CA39             >        ENDIF
  80+ CA39             >_rend:  =      $
  80+ CA39             >
  80+ CA39             >        PAGE   _dpag
  80+ CA39             >        ORG    _dend
  80+ B06D             >        IF 0=3
  80+ B06D ~           >           dw     _radd, _rend-_radd, dst, 0
  80+ B06D             >        ELSE
  80+ B06D 2D C8 0C 02 >           dw     _radd, _rend-_radd, temp3k, 0
  80+ B071 00 5B 00 00 >
  80+ B075             >        ENDIF
  80+ B075             >_dend:  =      $
  80+ B075             >
  80+ B075             >        ;DISPLAY "Rsc:",rscnt," Start: ",_radd," Len:",_rend-_radd," Pg:",_rpg, " End:",_rend
  80+ B075             >        IF _rend>0x10000
  80+ B075 ~           >           ; shut down the compiler if data exceeds memory limit
  80+ B075 ~           >           LUA
  80+ B075 ~           >              sj.exit(0)
  80+ B075 ~           >           ENDLUA
  80+ B075             >        ENDIF
  80+ B075             >;        display "#:",rscnt
  80+ B075             >KRscTitles   =      rscnt
  80+ B075             >rscnt   =      rscnt+1
  80+ B075             >_radd   =      _rend
  80+ B075             >_dadd   =      _dend
  81+ B075              tmouse:  = temp3k
  82+ B075              tplanet: = tmouse + 350
  83+ B075                       rload  KRscPlanet     , 0  , #50, tplanet,0, "demo/data/cats/cheese_planet_4.hdi.zx7"
  83+ B075             >        PAGE   _dpag
  83+ B075             >        ORG    _dadd
  83+ B075 53 50       >        db     _rpg, #50
  83+ B077             >_dend:  =      $
  83+ B077             >
  83+ B077             >        PAGE    _rpg and 7
  83+ B077             >        ORG    _radd
  83+ CA39             >
  83+ CA39             >        IF 0=0
  83+ CA39             >           incbin "demo/data/cats/cheese_planet_4.hdi.zx7"
  83+ CA39             >        ENDIF
  83+ CF49             >
  83+ CF49             >        IF 0=3
  83+ CF49 ~           >run        incbin _rfile
  83+ CF49             >        ENDIF
  83+ CF49             >
  83+ CF49             >        IF 0=1
  83+ CF49 ~           >           INCLUDE _rfile
  83+ CF49             >        ENDIF
  83+ CF49             >
  83+ CF49             >        IF 0=2
  83+ CF49 ~           >           ; nothing to include, just pupulate table
  83+ CF49             >        ENDIF
  83+ CF49             >_rend:  =      $
  83+ CF49             >
  83+ CF49             >        PAGE   _dpag
  83+ CF49             >        ORG    _dend
  83+ B077             >        IF 0=3
  83+ B077 ~           >           dw     _radd, _rend-_radd, dst, 0
  83+ B077             >        ELSE
  83+ B077 39 CA 10 05 >           dw     _radd, _rend-_radd, tplanet, 0
  83+ B07B 5E 5C 00 00 >
  83+ B07F             >        ENDIF
  83+ B07F             >_dend:  =      $
  83+ B07F             >
  83+ B07F             >        ;DISPLAY "Rsc:",rscnt," Start: ",_radd," Len:",_rend-_radd," Pg:",_rpg, " End:",_rend
  83+ B07F             >        IF _rend>0x10000
  83+ B07F ~           >           ; shut down the compiler if data exceeds memory limit
  83+ B07F ~           >           LUA
  83+ B07F ~           >              sj.exit(0)
  83+ B07F ~           >           ENDLUA
  83+ B07F             >        ENDIF
  83+ B07F             >;        display "#:",rscnt
  83+ B07F             >KRscPlanet   =      rscnt
  83+ B07F             >rscnt   =      rscnt+1
  83+ B07F             >_radd   =      _rend
  83+ B07F             >_dadd   =      _dend
  84+ B07F                       rload  KRscMouse      , 0  , #50, tmouse ,0, "demo/data/cats/lv137.hdi.zx7"
  84+ B07F             >        PAGE   _dpag
  84+ B07F             >        ORG    _dadd
  84+ B07F 53 50       >        db     _rpg, #50
  84+ B081             >_dend:  =      $
  84+ B081             >
  84+ B081             >        PAGE    _rpg and 7
  84+ B081             >        ORG    _radd
  84+ CF49             >
  84+ CF49             >        IF 0=0
  84+ CF49             >           incbin "demo/data/cats/lv137.hdi.zx7"
  84+ CF49             >        ENDIF
  84+ CFAE             >
  84+ CFAE             >        IF 0=3
  84+ CFAE ~           >run        incbin _rfile
  84+ CFAE             >        ENDIF
  84+ CFAE             >
  84+ CFAE             >        IF 0=1
  84+ CFAE ~           >           INCLUDE _rfile
  84+ CFAE             >        ENDIF
  84+ CFAE             >
  84+ CFAE             >        IF 0=2
  84+ CFAE ~           >           ; nothing to include, just pupulate table
  84+ CFAE             >        ENDIF
  84+ CFAE             >_rend:  =      $
  84+ CFAE             >
  84+ CFAE             >        PAGE   _dpag
  84+ CFAE             >        ORG    _dend
  84+ B081             >        IF 0=3
  84+ B081 ~           >           dw     _radd, _rend-_radd, dst, 0
  84+ B081             >        ELSE
  84+ B081 49 CF 65 00 >           dw     _radd, _rend-_radd, tmouse, 0
  84+ B085 00 5B 00 00 >
  84+ B089             >        ENDIF
  84+ B089             >_dend:  =      $
  84+ B089             >
  84+ B089             >        ;DISPLAY "Rsc:",rscnt," Start: ",_radd," Len:",_rend-_radd," Pg:",_rpg, " End:",_rend
  84+ B089             >        IF _rend>0x10000
  84+ B089 ~           >           ; shut down the compiler if data exceeds memory limit
  84+ B089 ~           >           LUA
  84+ B089 ~           >              sj.exit(0)
  84+ B089 ~           >           ENDLUA
  84+ B089             >        ENDIF
  84+ B089             >;        display "#:",rscnt
  84+ B089             >KRscMouse   =      rscnt
  84+ B089             >rscnt   =      rscnt+1
  84+ B089             >_radd   =      _rend
  84+ B089             >_dadd   =      _dend
  85+ B089                       rload  KRscBlueprint  , 0  , #50+8,  #4000,0, "demo/data/cats/kocka_blueprint.scr.zx7"
  85+ B089             >        PAGE   _dpag
  85+ B089             >        ORG    _dadd
  85+ B089 53 58       >        db     _rpg, #50+8
  85+ B08B             >_dend:  =      $
  85+ B08B             >
  85+ B08B             >        PAGE    _rpg and 7
  85+ B08B             >        ORG    _radd
  85+ CFAE             >
  85+ CFAE             >        IF 0=0
  85+ CFAE             >           incbin "demo/data/cats/kocka_blueprint.scr.zx7"
  85+ CFAE             >        ENDIF
  85+ D58B             >
  85+ D58B             >        IF 0=3
  85+ D58B ~           >run        incbin _rfile
  85+ D58B             >        ENDIF
  85+ D58B             >
  85+ D58B             >        IF 0=1
  85+ D58B ~           >           INCLUDE _rfile
  85+ D58B             >        ENDIF
  85+ D58B             >
  85+ D58B             >        IF 0=2
  85+ D58B ~           >           ; nothing to include, just pupulate table
  85+ D58B             >        ENDIF
  85+ D58B             >_rend:  =      $
  85+ D58B             >
  85+ D58B             >        PAGE   _dpag
  85+ D58B             >        ORG    _dend
  85+ B08B             >        IF 0=3
  85+ B08B ~           >           dw     _radd, _rend-_radd, dst, 0
  85+ B08B             >        ELSE
  85+ B08B AE CF DD 05 >           dw     _radd, _rend-_radd, #4000, 0
  85+ B08F 00 40 00 00 >
  85+ B093             >        ENDIF
  85+ B093             >_dend:  =      $
  85+ B093             >
  85+ B093             >        ;DISPLAY "Rsc:",rscnt," Start: ",_radd," Len:",_rend-_radd," Pg:",_rpg, " End:",_rend
  85+ B093             >        IF _rend>0x10000
  85+ B093 ~           >           ; shut down the compiler if data exceeds memory limit
  85+ B093 ~           >           LUA
  85+ B093 ~           >              sj.exit(0)
  85+ B093 ~           >           ENDLUA
  85+ B093             >        ENDIF
  85+ B093             >;        display "#:",rscnt
  85+ B093             >KRscBlueprint   =      rscnt
  85+ B093             >rscnt   =      rscnt+1
  85+ B093             >_radd   =      _rend
  85+ B093             >_dadd   =      _dend
  86+ B093                       rload  KRscKittens    , 0  , #50, temp3k,0, "demo/data/titles2/kitten.hdi.out.zx7"
  86+ B093             >        PAGE   _dpag
  86+ B093             >        ORG    _dadd
  86+ B093 53 50       >        db     _rpg, #50
  86+ B095             >_dend:  =      $
  86+ B095             >
  86+ B095             >        PAGE    _rpg and 7
  86+ B095             >        ORG    _radd
  86+ D58B             >
  86+ D58B             >        IF 0=0
  86+ D58B             >           incbin "demo/data/titles2/kitten.hdi.out.zx7"
  86+ D58B             >        ENDIF
  86+ D61A             >
  86+ D61A             >        IF 0=3
  86+ D61A ~           >run        incbin _rfile
  86+ D61A             >        ENDIF
  86+ D61A             >
  86+ D61A             >        IF 0=1
  86+ D61A ~           >           INCLUDE _rfile
  86+ D61A             >        ENDIF
  86+ D61A             >
  86+ D61A             >        IF 0=2
  86+ D61A ~           >           ; nothing to include, just pupulate table
  86+ D61A             >        ENDIF
  86+ D61A             >_rend:  =      $
  86+ D61A             >
  86+ D61A             >        PAGE   _dpag
  86+ D61A             >        ORG    _dend
  86+ B095             >        IF 0=3
  86+ B095 ~           >           dw     _radd, _rend-_radd, dst, 0
  86+ B095             >        ELSE
  86+ B095 8B D5 8F 00 >           dw     _radd, _rend-_radd, temp3k, 0
  86+ B099 00 5B 00 00 >
  86+ B09D             >        ENDIF
  86+ B09D             >_dend:  =      $
  86+ B09D             >
  86+ B09D             >        ;DISPLAY "Rsc:",rscnt," Start: ",_radd," Len:",_rend-_radd," Pg:",_rpg, " End:",_rend
  86+ B09D             >        IF _rend>0x10000
  86+ B09D ~           >           ; shut down the compiler if data exceeds memory limit
  86+ B09D ~           >           LUA
  86+ B09D ~           >              sj.exit(0)
  86+ B09D ~           >           ENDLUA
  86+ B09D             >        ENDIF
  86+ B09D             >;        display "#:",rscnt
  86+ B09D             >KRscKittens   =      rscnt
  86+ B09D             >rscnt   =      rscnt+1
  86+ B09D             >_radd   =      _rend
  86+ B09D             >_dadd   =      _dend
  87+ B09D                       rload  KRscInvaders   , 0  , #50, temp3k,0, "demo/data/titles2/invaders_2.hdi.zx7"
  87+ B09D             >        PAGE   _dpag
  87+ B09D             >        ORG    _dadd
  87+ B09D 53 50       >        db     _rpg, #50
  87+ B09F             >_dend:  =      $
  87+ B09F             >
  87+ B09F             >        PAGE    _rpg and 7
  87+ B09F             >        ORG    _radd
  87+ D61A             >
  87+ D61A             >        IF 0=0
  87+ D61A             >           incbin "demo/data/titles2/invaders_2.hdi.zx7"
  87+ D61A             >        ENDIF
  87+ D74D             >
  87+ D74D             >        IF 0=3
  87+ D74D ~           >run        incbin _rfile
  87+ D74D             >        ENDIF
  87+ D74D             >
  87+ D74D             >        IF 0=1
  87+ D74D ~           >           INCLUDE _rfile
  87+ D74D             >        ENDIF
  87+ D74D             >
  87+ D74D             >        IF 0=2
  87+ D74D ~           >           ; nothing to include, just pupulate table
  87+ D74D             >        ENDIF
  87+ D74D             >_rend:  =      $
  87+ D74D             >
  87+ D74D             >        PAGE   _dpag
  87+ D74D             >        ORG    _dend
  87+ B09F             >        IF 0=3
  87+ B09F ~           >           dw     _radd, _rend-_radd, dst, 0
  87+ B09F             >        ELSE
  87+ B09F 1A D6 33 01 >           dw     _radd, _rend-_radd, temp3k, 0
  87+ B0A3 00 5B 00 00 >
  87+ B0A7             >        ENDIF
  87+ B0A7             >_dend:  =      $
  87+ B0A7             >
  87+ B0A7             >        ;DISPLAY "Rsc:",rscnt," Start: ",_radd," Len:",_rend-_radd," Pg:",_rpg, " End:",_rend
  87+ B0A7             >        IF _rend>0x10000
  87+ B0A7 ~           >           ; shut down the compiler if data exceeds memory limit
  87+ B0A7 ~           >           LUA
  87+ B0A7 ~           >              sj.exit(0)
  87+ B0A7 ~           >           ENDLUA
  87+ B0A7             >        ENDIF
  87+ B0A7             >;        display "#:",rscnt
  87+ B0A7             >KRscInvaders   =      rscnt
  87+ B0A7             >rscnt   =      rscnt+1
  87+ B0A7             >_radd   =      _rend
  87+ B0A7             >_dadd   =      _dend
  88+ B0A7                       rload  KRscSinDiKat   , 0  , #50, temp3k,0, "demo/data/titles2/sindikat.hdi.out.zx7"
  88+ B0A7             >        PAGE   _dpag
  88+ B0A7             >        ORG    _dadd
  88+ B0A7 53 50       >        db     _rpg, #50
  88+ B0A9             >_dend:  =      $
  88+ B0A9             >
  88+ B0A9             >        PAGE    _rpg and 7
  88+ B0A9             >        ORG    _radd
  88+ D74D             >
  88+ D74D             >        IF 0=0
  88+ D74D             >           incbin "demo/data/titles2/sindikat.hdi.out.zx7"
  88+ D74D             >        ENDIF
  88+ D79E             >
  88+ D79E             >        IF 0=3
  88+ D79E ~           >run        incbin _rfile
  88+ D79E             >        ENDIF
  88+ D79E             >
  88+ D79E             >        IF 0=1
  88+ D79E ~           >           INCLUDE _rfile
  88+ D79E             >        ENDIF
  88+ D79E             >
  88+ D79E             >        IF 0=2
  88+ D79E ~           >           ; nothing to include, just pupulate table
  88+ D79E             >        ENDIF
  88+ D79E             >_rend:  =      $
  88+ D79E             >
  88+ D79E             >        PAGE   _dpag
  88+ D79E             >        ORG    _dend
  88+ B0A9             >        IF 0=3
  88+ B0A9 ~           >           dw     _radd, _rend-_radd, dst, 0
  88+ B0A9             >        ELSE
  88+ B0A9 4D D7 51 00 >           dw     _radd, _rend-_radd, temp3k, 0
  88+ B0AD 00 5B 00 00 >
  88+ B0B1             >        ENDIF
  88+ B0B1             >_dend:  =      $
  88+ B0B1             >
  88+ B0B1             >        ;DISPLAY "Rsc:",rscnt," Start: ",_radd," Len:",_rend-_radd," Pg:",_rpg, " End:",_rend
  88+ B0B1             >        IF _rend>0x10000
  88+ B0B1 ~           >           ; shut down the compiler if data exceeds memory limit
  88+ B0B1 ~           >           LUA
  88+ B0B1 ~           >              sj.exit(0)
  88+ B0B1 ~           >           ENDLUA
  88+ B0B1             >        ENDIF
  88+ B0B1             >;        display "#:",rscnt
  88+ B0B1             >KRscSinDiKat   =      rscnt
  88+ B0B1             >rscnt   =      rscnt+1
  88+ B0B1             >_radd   =      _rend
  88+ B0B1             >_dadd   =      _dend
  89+ B0B1                       rload  KRscEnginy     , 0  , #50, temp3k,0, "demo/data/titles2/engines3.hdi.out.zx7"
  89+ B0B1             >        PAGE   _dpag
  89+ B0B1             >        ORG    _dadd
  89+ B0B1 53 50       >        db     _rpg, #50
  89+ B0B3             >_dend:  =      $
  89+ B0B3             >
  89+ B0B3             >        PAGE    _rpg and 7
  89+ B0B3             >        ORG    _radd
  89+ D79E             >
  89+ D79E             >        IF 0=0
  89+ D79E             >           incbin "demo/data/titles2/engines3.hdi.out.zx7"
  89+ D79E             >        ENDIF
  89+ D839             >
  89+ D839             >        IF 0=3
  89+ D839 ~           >run        incbin _rfile
  89+ D839             >        ENDIF
  89+ D839             >
  89+ D839             >        IF 0=1
  89+ D839 ~           >           INCLUDE _rfile
  89+ D839             >        ENDIF
  89+ D839             >
  89+ D839             >        IF 0=2
  89+ D839 ~           >           ; nothing to include, just pupulate table
  89+ D839             >        ENDIF
  89+ D839             >_rend:  =      $
  89+ D839             >
  89+ D839             >        PAGE   _dpag
  89+ D839             >        ORG    _dend
  89+ B0B3             >        IF 0=3
  89+ B0B3 ~           >           dw     _radd, _rend-_radd, dst, 0
  89+ B0B3             >        ELSE
  89+ B0B3 9E D7 9B 00 >           dw     _radd, _rend-_radd, temp3k, 0
  89+ B0B7 00 5B 00 00 >
  89+ B0BB             >        ENDIF
  89+ B0BB             >_dend:  =      $
  89+ B0BB             >
  89+ B0BB             >        ;DISPLAY "Rsc:",rscnt," Start: ",_radd," Len:",_rend-_radd," Pg:",_rpg, " End:",_rend
  89+ B0BB             >        IF _rend>0x10000
  89+ B0BB ~           >           ; shut down the compiler if data exceeds memory limit
  89+ B0BB ~           >           LUA
  89+ B0BB ~           >              sj.exit(0)
  89+ B0BB ~           >           ENDLUA
  89+ B0BB             >        ENDIF
  89+ B0BB             >;        display "#:",rscnt
  89+ B0BB             >KRscEnginy   =      rscnt
  89+ B0BB             >rscnt   =      rscnt+1
  89+ B0BB             >_radd   =      _rend
  89+ B0BB             >_dadd   =      _dend
  90+ B0BB                       rload  KRscCat        , 0  , #50, temp3k,0, "demo/data/titles2/cat.hdi.zx7"
  90+ B0BB             >        PAGE   _dpag
  90+ B0BB             >        ORG    _dadd
  90+ B0BB 53 50       >        db     _rpg, #50
  90+ B0BD             >_dend:  =      $
  90+ B0BD             >
  90+ B0BD             >        PAGE    _rpg and 7
  90+ B0BD             >        ORG    _radd
  90+ D839             >
  90+ D839             >        IF 0=0
  90+ D839             >           incbin "demo/data/titles2/cat.hdi.zx7"
  90+ D839             >        ENDIF
  90+ D995             >
  90+ D995             >        IF 0=3
  90+ D995 ~           >run        incbin _rfile
  90+ D995             >        ENDIF
  90+ D995             >
  90+ D995             >        IF 0=1
  90+ D995 ~           >           INCLUDE _rfile
  90+ D995             >        ENDIF
  90+ D995             >
  90+ D995             >        IF 0=2
  90+ D995 ~           >           ; nothing to include, just pupulate table
  90+ D995             >        ENDIF
  90+ D995             >_rend:  =      $
  90+ D995             >
  90+ D995             >        PAGE   _dpag
  90+ D995             >        ORG    _dend
  90+ B0BD             >        IF 0=3
  90+ B0BD ~           >           dw     _radd, _rend-_radd, dst, 0
  90+ B0BD             >        ELSE
  90+ B0BD 39 D8 5C 01 >           dw     _radd, _rend-_radd, temp3k, 0
  90+ B0C1 00 5B 00 00 >
  90+ B0C5             >        ENDIF
  90+ B0C5             >_dend:  =      $
  90+ B0C5             >
  90+ B0C5             >        ;DISPLAY "Rsc:",rscnt," Start: ",_radd," Len:",_rend-_radd," Pg:",_rpg, " End:",_rend
  90+ B0C5             >        IF _rend>0x10000
  90+ B0C5 ~           >           ; shut down the compiler if data exceeds memory limit
  90+ B0C5 ~           >           LUA
  90+ B0C5 ~           >              sj.exit(0)
  90+ B0C5 ~           >           ENDLUA
  90+ B0C5             >        ENDIF
  90+ B0C5             >;        display "#:",rscnt
  90+ B0C5             >KRscCat   =      rscnt
  90+ B0C5             >rscnt   =      rscnt+1
  90+ B0C5             >_radd   =      _rend
  90+ B0C5             >_dadd   =      _dend
  91+ B0C5                       rload  KRscEnding     , 0  , #50+8, #4000,0, "demo/data/cats/crashcatship_nocat.zx7"
  91+ B0C5             >        PAGE   _dpag
  91+ B0C5             >        ORG    _dadd
  91+ B0C5 53 58       >        db     _rpg, #50+8
  91+ B0C7             >_dend:  =      $
  91+ B0C7             >
  91+ B0C7             >        PAGE    _rpg and 7
  91+ B0C7             >        ORG    _radd
  91+ D995             >
  91+ D995             >        IF 0=0
  91+ D995             >           incbin "demo/data/cats/crashcatship_nocat.zx7"
  91+ D995             >        ENDIF
  91+ DFCC             >
  91+ DFCC             >        IF 0=3
  91+ DFCC ~           >run        incbin _rfile
  91+ DFCC             >        ENDIF
  91+ DFCC             >
  91+ DFCC             >        IF 0=1
  91+ DFCC ~           >           INCLUDE _rfile
  91+ DFCC             >        ENDIF
  91+ DFCC             >
  91+ DFCC             >        IF 0=2
  91+ DFCC ~           >           ; nothing to include, just pupulate table
  91+ DFCC             >        ENDIF
  91+ DFCC             >_rend:  =      $
  91+ DFCC             >
  91+ DFCC             >        PAGE   _dpag
  91+ DFCC             >        ORG    _dend
  91+ B0C7             >        IF 0=3
  91+ B0C7 ~           >           dw     _radd, _rend-_radd, dst, 0
  91+ B0C7             >        ELSE
  91+ B0C7 95 D9 37 06 >           dw     _radd, _rend-_radd, #4000, 0
  91+ B0CB 00 40 00 00 >
  91+ B0CF             >        ENDIF
  91+ B0CF             >_dend:  =      $
  91+ B0CF             >
  91+ B0CF             >        ;DISPLAY "Rsc:",rscnt," Start: ",_radd," Len:",_rend-_radd," Pg:",_rpg, " End:",_rend
  91+ B0CF             >        IF _rend>0x10000
  91+ B0CF ~           >           ; shut down the compiler if data exceeds memory limit
  91+ B0CF ~           >           LUA
  91+ B0CF ~           >              sj.exit(0)
  91+ B0CF ~           >           ENDLUA
  91+ B0CF             >        ENDIF
  91+ B0CF             >;        display "#:",rscnt
  91+ B0CF             >KRscEnding   =      rscnt
  91+ B0CF             >rscnt   =      rscnt+1
  91+ B0CF             >_radd   =      _rend
  91+ B0CF             >_dadd   =      _dend
  92+ B0CF              ;         rload  KRscEnding     , KtBin, o0+8, #4000,0, "demo/data/cats/crashcatship.zx7"
  93+ B0CF                       rload  KRscAstrocat   , 0  , #50+8, temp3k,0, "demo/data/cats/cat_astronaut.hdi.zx7"
  93+ B0CF             >        PAGE   _dpag
  93+ B0CF             >        ORG    _dadd
  93+ B0CF 53 58       >        db     _rpg, #50+8
  93+ B0D1             >_dend:  =      $
  93+ B0D1             >
  93+ B0D1             >        PAGE    _rpg and 7
  93+ B0D1             >        ORG    _radd
  93+ DFCC             >
  93+ DFCC             >        IF 0=0
  93+ DFCC             >           incbin "demo/data/cats/cat_astronaut.hdi.zx7"
  93+ DFCC             >        ENDIF
  93+ E262             >
  93+ E262             >        IF 0=3
  93+ E262 ~           >run        incbin _rfile
  93+ E262             >        ENDIF
  93+ E262             >
  93+ E262             >        IF 0=1
  93+ E262 ~           >           INCLUDE _rfile
  93+ E262             >        ENDIF
  93+ E262             >
  93+ E262             >        IF 0=2
  93+ E262 ~           >           ; nothing to include, just pupulate table
  93+ E262             >        ENDIF
  93+ E262             >_rend:  =      $
  93+ E262             >
  93+ E262             >        PAGE   _dpag
  93+ E262             >        ORG    _dend
  93+ B0D1             >        IF 0=3
  93+ B0D1 ~           >           dw     _radd, _rend-_radd, dst, 0
  93+ B0D1             >        ELSE
  93+ B0D1 CC DF 96 02 >           dw     _radd, _rend-_radd, temp3k, 0
  93+ B0D5 00 5B 00 00 >
  93+ B0D9             >        ENDIF
  93+ B0D9             >_dend:  =      $
  93+ B0D9             >
  93+ B0D9             >        ;DISPLAY "Rsc:",rscnt," Start: ",_radd," Len:",_rend-_radd," Pg:",_rpg, " End:",_rend
  93+ B0D9             >        IF _rend>0x10000
  93+ B0D9 ~           >           ; shut down the compiler if data exceeds memory limit
  93+ B0D9 ~           >           LUA
  93+ B0D9 ~           >              sj.exit(0)
  93+ B0D9 ~           >           ENDLUA
  93+ B0D9             >        ENDIF
  93+ B0D9             >;        display "#:",rscnt
  93+ B0D9             >KRscAstrocat   =      rscnt
  93+ B0D9             >rscnt   =      rscnt+1
  93+ B0D9             >_radd   =      _rend
  93+ B0D9             >_dadd   =      _dend
  94+ B0D9              ttruck: = temp3k+1100
  95+ B0D9                       rload  KRscTruck      , 0  , #50+8, ttruck,0, "demo/data/cats/truck.hdi"
  95+ B0D9             >        PAGE   _dpag
  95+ B0D9             >        ORG    _dadd
  95+ B0D9 53 58       >        db     _rpg, #50+8
  95+ B0DB             >_dend:  =      $
  95+ B0DB             >
  95+ B0DB             >        PAGE    _rpg and 7
  95+ B0DB             >        ORG    _radd
  95+ E262             >
  95+ E262             >        IF 0=0
  95+ E262             >           incbin "demo/data/cats/truck.hdi"
  95+ E262             >        ENDIF
  95+ E28C             >
  95+ E28C             >        IF 0=3
  95+ E28C ~           >run        incbin _rfile
  95+ E28C             >        ENDIF
  95+ E28C             >
  95+ E28C             >        IF 0=1
  95+ E28C ~           >           INCLUDE _rfile
  95+ E28C             >        ENDIF
  95+ E28C             >
  95+ E28C             >        IF 0=2
  95+ E28C ~           >           ; nothing to include, just pupulate table
  95+ E28C             >        ENDIF
  95+ E28C             >_rend:  =      $
  95+ E28C             >
  95+ E28C             >        PAGE   _dpag
  95+ E28C             >        ORG    _dend
  95+ B0DB             >        IF 0=3
  95+ B0DB ~           >           dw     _radd, _rend-_radd, dst, 0
  95+ B0DB             >        ELSE
  95+ B0DB 62 E2 2A 00 >           dw     _radd, _rend-_radd, ttruck, 0
  95+ B0DF 4C 5F 00 00 >
  95+ B0E3             >        ENDIF
  95+ B0E3             >_dend:  =      $
  95+ B0E3             >
  95+ B0E3             >        ;DISPLAY "Rsc:",rscnt," Start: ",_radd," Len:",_rend-_radd," Pg:",_rpg, " End:",_rend
  95+ B0E3             >        IF _rend>0x10000
  95+ B0E3 ~           >           ; shut down the compiler if data exceeds memory limit
  95+ B0E3 ~           >           LUA
  95+ B0E3 ~           >              sj.exit(0)
  95+ B0E3 ~           >           ENDLUA
  95+ B0E3             >        ENDIF
  95+ B0E3             >;        display "#:",rscnt
  95+ B0E3             >KRscTruck   =      rscnt
  95+ B0E3             >rscnt   =      rscnt+1
  95+ B0E3             >_radd   =      _rend
  95+ B0E3             >_dadd   =      _dend
  96+ B0E3
  97+ B0E3                       DISPLAY "Resource page:",_rpg and 7," Free:",0x10000-_rend
  98+ B0E3
  99+ B0E3              ;        page 4 is occupied by rotoid engine. Resources can be used prior rotoid execution!
 100+ B0E3              _rpg:   = #54
 101+ B0E3              _radd:  = #c000
 102+ B0E3              _rend:  = _radd
 103+ B0E3
 104+ B0E3              ; multab is special case using new unpacktmp - decompress from temp buffer. Destination address is in "run" field
 105+ B0E3                       IFDEF _multabXls
 106+ B0E3 ~                       rload   KRscMultab     ,KtBin ,o6 ,temp3k ,#c000 ,"demo/rotoid/multab_round_rev.zx7"
 107+ B0E3                       ENDIF
 108+ B0E3                       IFDEF _multabBmp
 109+ B0E3                         rload   KRscMultab     ,0   ,#56 ,temp3k ,#c000 ,"demo/rotoid/multab_bitmap.zx7"
 109+ B0E3             >        PAGE   _dpag
 109+ B0E3             >        ORG    _dadd
 109+ B0E3 54 56       >        db     _rpg, #56
 109+ B0E5             >_dend:  =      $
 109+ B0E5             >
 109+ B0E5             >        PAGE    _rpg and 7
 109+ B0E5             >        ORG    _radd
 109+ C000             >
 109+ C000             >        IF 0=0
 109+ C000             >           incbin "demo/rotoid/multab_bitmap.zx7"
 109+ C000             >        ENDIF
 109+ C361             >
 109+ C361             >        IF 0=3
 109+ C361 ~           >run        incbin _rfile
 109+ C361             >        ENDIF
 109+ C361             >
 109+ C361             >        IF 0=1
 109+ C361 ~           >           INCLUDE _rfile
 109+ C361             >        ENDIF
 109+ C361             >
 109+ C361             >        IF 0=2
 109+ C361 ~           >           ; nothing to include, just pupulate table
 109+ C361             >        ENDIF
 109+ C361             >_rend:  =      $
 109+ C361             >
 109+ C361             >        PAGE   _dpag
 109+ C361             >        ORG    _dend
 109+ B0E5             >        IF 0=3
 109+ B0E5 ~           >           dw     _radd, _rend-_radd, dst, 0
 109+ B0E5             >        ELSE
 109+ B0E5 00 C0 61 03 >           dw     _radd, _rend-_radd, temp3k, #c000
 109+ B0E9 00 5B 00 C0 >
 109+ B0ED             >        ENDIF
 109+ B0ED             >_dend:  =      $
 109+ B0ED             >
 109+ B0ED             >        ;DISPLAY "Rsc:",rscnt," Start: ",_radd," Len:",_rend-_radd," Pg:",_rpg, " End:",_rend
 109+ B0ED             >        IF _rend>0x10000
 109+ B0ED ~           >           ; shut down the compiler if data exceeds memory limit
 109+ B0ED ~           >           LUA
 109+ B0ED ~           >              sj.exit(0)
 109+ B0ED ~           >           ENDLUA
 109+ B0ED             >        ENDIF
 109+ B0ED             >;        display "#:",rscnt
 109+ B0ED             >KRscMultab   =      rscnt
 109+ B0ED             >rscnt   =      rscnt+1
 109+ B0ED             >_radd   =      _rend
 109+ B0ED             >_dadd   =      _dend
 110+ B0ED                       ENDIF
 111+ B0ED                       DISPLAY "Resource page:",_rpg and 7," Free:",0x10000-_rend
 112+ B0ED
 113+ B0ED              ;        page 1 is occupied by rotoid engine. Resources can be used prior rotoid execution!
 114+ B0ED              _rpg:   = #56
 115+ B0ED              _radd:  = #c000
 116+ B0ED              _rend:  = _radd
 117+ B0ED                       DISPLAY "Resource page:",_rpg and 7," Free:",0x10000-_rend
 118+ B0ED
 119+ B0ED              _rpg:   = #51
 120+ B0ED              _radd:  = #c000
 121+ B0ED              _rend:  = _radd
 122+ B0ED              ; include assembly file, start address within the included file
 123+ B0ED              ; -- fzx font driver
 124+ B0ED                       rload  KRscFzxIni, 1  , _rpg, 0, fzx.init, "libs/fzx_drv_mod.a80"
 124+ B0ED             >        PAGE   _dpag
 124+ B0ED             >        ORG    _dadd
 124+ B0ED 51 51       >        db     _rpg, _rpg
 124+ B0EF             >_dend:  =      $
 124+ B0EF             >
 124+ B0EF             >        PAGE    _rpg and 7
 124+ B0EF             >        ORG    _radd
 124+ C000             >
 124+ C000             >        IF 1=0
 124+ C000 ~           >           incbin _rfile
 124+ C000             >        ENDIF
 124+ C000             >
 124+ C000             >        IF 1=3
 124+ C000 ~           >run        incbin _rfile
 124+ C000             >        ENDIF
 124+ C000             >
 124+ C000             >        IF 1=1
 124+ C000             >           INCLUDE "libs/fzx_drv_mod.a80"
# file opened: ./libs/fzx_drv_mod.a80
   1++C000             >; -----------------------------------------------------------------------------
   2++C000             >; FZX driver - Copyright (c) 2013 Einar Saukas
   3++C000             >; FZX format - Copyright (c) 2013 Andrew Owen
   4++C000             >; -----------------------------------------------------------------------------
   5++C000 ~           >/* fzx_drv_def.a80
   6++C000 ~           >        DEFINE  KFzxTab    6
   7++C000 ~           >        DEFINE  KFzxAt     22
   8++C000 ~           >        DEFINE  KFzxPos    21
   9++C000 ~           >        DEFINE  KFzxCR     13
  10++C000 ~           >        DEFINE  KFzxScrl   10
  11++C000 ~           >        DEFINE  KFzxMargin 7
  12++C000 ~           >        DEFINE  KFzxFont   1
  13++C000 ~           >        DEFINE  KFzxSpcy   2
  14++C000 ~           >        DEFINE  KFzxExe    3
  15++C000 ~           >        DEFINE  KFzxExe16  4
  16++C000 ~           >        DEFINE  KFzxLGap   5
  17++C000 ~           >
  18++C000 ~           >        define  _orhl   #b6
  19++C000 ~           >        define  _andhl  #a6
  20++C000 ~           >        define  _xorhl  #ae
  21++C000 ~           >*/
  22++C000             >        MODULE fzx
  23++C000             >
  24++C000             >MARGIN  EQU     0               ; left margin (in pixels)
  25++C000             >
  26++C000 DD 6E 02 DD >init:   ld      hl,(ix+sfzx.TEXT)
  26++C004 66 03       >
  27++C006 DD 75 06 DD >        ld      (ix+sfzx.CTXT),hl
  27++C00A 74 07       >
  28++C00C DD 7E 04    >        ld      a,(ix+sfzx.MARGIN)
  28++C00F 32 CB C1    >  ld (NEWLINE+1),a
  29++C012 DD 77 09    >        ld      (ix+sfzx.P_COL),a
  30++C015 DD 7E 05    >        ld      a,(ix+sfzx.spcy)
  30++C018 32 D3 C1    >  ld (SPCY+1),a
  31++C01B DD 36 0A BF >        ld      (ix+sfzx.P_LIN),191
  32++C01F DD 36 08 00 >        ld      (ix+sfzx.P_FLAG),0
  33++C023 DD 6E 00 DD >        ld      hl,(ix+sfzx.FONT)
  33++C027 66 01       >
  34++C029 22 2D C2    >        ld      (FONT),hl
  35++C02C C9          >        ret
  36++C02D             >
  37++C02D             >xoroperand:
  38++C02D 3E AE       >        ld      a, #ae
  39++C02F 18 06       >        jr      changeoperand
  40++C031             >andoperand:
  41++C031 3E A6       >        ld      a, #a6
  42++C033 18 02       >        jr      changeoperand
  43++C035             >oroperand:
  44++C035 3E B6       >        ld      a,  #b6
  45++C037             >changeoperand:
  46++C037 32 9D C1    >        ld      (m1),a
  47++C03A 32 A1 C1    >        ld      (m2),a
  48++C03D 32 A5 C1    >        ld      (m3),a
  49++C040 C9          >        ret
  50++C041             >
  51++C041             >; could not use run due to weird behavior of the compiler v1.13.00
  52++C041             >; it replaced rsc.run with rsc.init for no known reason (appeared with rload macro)
  53++C041 DD 22 E4 C1 >runc:   ld      (saveix+2),ix
  54++C045 DD 6E 00 DD >.load:  ld      hl,(ix+sfzx.FONT)
  54++C049 66 01       >
  54++C04B 22 2D C2    >   ld (FONT),hl
  55++C04E DD 7E 04    >        ld      a,(ix+sfzx.MARGIN)
  55++C051 32 CB C1    >   ld (NEWLINE+1),a
  56++C054 DD 7E 09    >        ld      a,(ix+sfzx.P_COL)
  56++C057 32 2B C2    >   ld (P_COL),a
  57++C05A DD 7E 0A    >        ld      a,(ix+sfzx.P_LIN)
  57++C05D 32 2C C2    >   ld (P_LIN),a
  58++C060 DD 7E 08    >        ld      a,(ix+sfzx.P_FLAG)
  58++C063 32 2A C2    >   ld (P_FLAG),a
  59++C066 DD 7E 05    >        ld      a,(ix+sfzx.spcy)
  59++C069 32 D3 C1    >  ld (SPCY+1),a
  60++C06C DD 6E 06 DD >        ld      hl,(ix+sfzx.CTXT)
  60++C070 66 07       >
  61++C072             >
  62++C072 ED 4B 2D C2 >.c0:    ld      bc,(FONT)
  63++C076 7E          >        ld      a,(hl)
  64++C077 FE FF       >        cp      #ff
  65++C079 CA DF C1    >        jp      z,fzret0
  66++C07C 23          >        inc     hl
  67++C07D             >
  68++C07D             >;--- multibyte commands
  69++C07D FE 16       >        cp          22                      ; at y,x
  70++C07F 20 0F       >        jr      nz,1F
  71++C081 7E          >        ld      a,(hl)
  72++C082 23          >        inc     hl
  73++C083 2F          >        cpl
  74++C084 C6 C0       >        add     a, 192                  ; now A = 191 - char
  75++C086 32 2C C2    >        ld      (P_LIN),a
  76++C089 7E          >        ld      a,(hl)
  77++C08A 23          >        inc     hl
  78++C08B 32 2B C2    >        ld      (P_COL),a
  79++C08E 18 E2       >        jr      .c0
  80++C090             >
  81++C090 FE 15       >1       cp         21                      ;pos x,y
  82++C092 20 0F       >        jr      nz,1F
  83++C094 7E          >        ld      a,(hl)
  83++C095 23          >  inc hl
  83++C096 32 2B C2    >  ld (P_COL),a
  84++C099 7E          >        ld      a,(hl)
  84++C09A 23          >  inc hl
  84++C09B             >
  85++C09B 2F          >        cpl
  86++C09C C6 C0       >        add     a, 192                         ; now A = 191 - char
  87++C09E 32 2C C2    >        ld      (P_LIN),a
  88++C0A1 18 CF       >        jr      .c0
  89++C0A3             >
  90++C0A3 FE 06       >1       cp         6                        ; tab x
  91++C0A5 20 07       >        jr      nz,1F
  92++C0A7 7E          >        ld      a,(hl)
  92++C0A8 23          >  inc hl
  93++C0A9 32 2B C2    >        ld      (P_COL),a
  94++C0AC 18 C4       >        jr      .c0
  95++C0AE             >
  96++C0AE FE 07       >1       cp      7                     ; margin x
  97++C0B0 20 0D       >        jr      nz,1F
  98++C0B2 7E          >        ld      a,(hl)
  98++C0B3 23          >  inc hl
  99++C0B4 DD 77 04    >        ld      (ix+sfzx.MARGIN),a
 100++C0B7 32 2B C2    >        ld      (P_COL),a
 101++C0BA 32 CB C1    >        ld      (NEWLINE+1),a
 102++C0BD 18 B3       >        jr      .c0
 103++C0BF             >
 104++C0BF FE 01       >1       cp        1                       ; set font
 105++C0C1 20 10       >        jr      nz,1F
 106++C0C3 4E          >        ld      c,(hl)
 106++C0C4 23          >  inc hl
 107++C0C5 46          >        ld      b,(hl)
 107++C0C6 23          >  inc hl
 108++C0C7 ED 43 2D C2 >        ld      (FONT),bc
 109++C0CB DD 71 00 DD >        ld      (ix+sfzx.FONT),bc
 109++C0CF 70 01       >
 110++C0D1 18 9F       >        jr      .c0
 111++C0D3             >
 112++C0D3 FE 02       >1       cp        2                       ; set spcy
 113++C0D5 20 07       >        jr      nz,1F
 114++C0D7 7E          >        ld      a,(hl)
 114++C0D8 23          >  inc hl
 115++C0D9 32 D3 C1    >        ld      (SPCY+1),a
 116++C0DC 18 94       >        jr      .c0
 117++C0DE             >
 118++C0DE FE 05       >1       cp        5
 119++C0E0 20 07       >        jr      nz,1F
 120++C0E2 7E          >        ld      a,(hl)
 120++C0E3 23          >  inc hl
 121++C0E4 32 AC 82    >        ld      (vscroll.lineGap),a
 122++C0E7 18 89       >        jr      .c0
 123++C0E9             >
 124++C0E9 FE 03       >1       cp         3                        ; custom call
 125++C0EB 20 19       >        jr      nz,1F
 126++C0ED 7E          >        ld      a,(hl)
 126++C0EE 23          >  inc hl         ; a=parametter passed to exe
 127++C0EF 5E          >2       ld      e,(hl)
 127++C0F0 23          >  inc hl         ; exe address
 128++C0F1 56          >        ld      d,(hl)
 128++C0F2 23          >  inc hl
 129++C0F3 E5 DD E5    >        push    hl,ix
 130++C0F6 ED 53 FE C0 >        ld      (.exe),de
 131++C0FA CD 0F BF    >        call    longCall
 132++C0FD 50          >        db      #50
 133++C0FE 55 55       >.exe:   dw      #5555
 134++C100 DD E1 E1    >        pop     ix,hl
 135++C103 C3 72 C0    >        jp      .c0
 136++C106             >
 137++C106 FE 04       >1       cp       4
 138++C108 20 06       >        jr      nz,1F
 139++C10A 4E          >        ld      c,(hl)
 139++C10B 23          >  inc hl
 140++C10C 46          >        ld      b,(hl)
 140++C10D 23          >  inc hl
 141++C10E 18 DF       >        jr      2B
 142++C110             >
 143++C110             >;--- single byte commands
 144++C110             >;- save text pointer, load font pointer
 145++C110 DD 75 06 DD >1       ld      (ix+sfzx.CTXT),hl       ; store txt pointer
 145++C114 74 07       >
 146++C116 C5          >        push    bc                      ; bc=font
 147++C117 DD E1       >        pop     ix
 148++C119             >
 149++C119             >;       test of enter (new line)
 150++C119 FE 0D       >        cp      13
 151++C11B CA CA C1    >        jp      z,NEWLINE
 152++C11E             >
 153++C11E             >;       test of scroll command (for end-titles)
 154++C11E FE 0A       >        cp      #0a
 155++C120 CA 1A C2    >        jp      z,scroll
 156++C123             >
 157++C123             >;--- processing text character
 158++C123             >
 159++C123             >CHK_CHAR:
 160++C123 3D          >        dec     a               ; now A = char - 1
 161++C124 DD BE 02    >        cp      (ix+2)          ; compare with lastchar
 162++C127 30 04       >        jr      nc, UNDEF_CHAR
 163++C129 D6 1F       >        sub     31              ; now A = char - 32
 164++C12B 30 02       >        jr      nc, PRINT_CHAR
 165++C12D             >UNDEF_CHAR:
 166++C12D 3E 1F       >        ld      a, '?'-32       ; print '?' instead of invalid character
 167++C12F             >PRINT_CHAR:
 168++C12F 3C          >        inc     a               ; now A = char - 31
 169++C130 6F          >        ld      l, a
 170++C131 26 00       >        ld      h, 0
 171++C133 54          >        ld      d, h
 172++C134 5D          >        ld      e, l
 173++C135 29          >        add     hl, hl
 174++C136 19          >        add     hl, de          ; now HL = (char - 31) * 3
 175++C137 09          >        add     hl, bc          ; now HL references offset/kern in char table
 176++C138 5E          >        ld      e, (hl)
 177++C139 23          >        inc     hl
 178++C13A 7E          >        ld      a, (hl)
 179++C13B E6 3F       >        and     63
 180++C13D 57          >        ld      d, a            ; now DE = offset
 181++C13E             >
 182++C13E AE          >        xor     (hl)
 183++C13F 07          >        rlca
 184++C140 07          >        rlca
 185++C141 4F          >        ld      c, a            ; now C = kern
 186++C142             >
 187++C142 E5          >        push    hl
 188++C143 19          >        add     hl, de
 189++C144 2B          >        dec     hl              ; now HL = char definition address
 190++C145 E3          >        ex      (sp), hl        ; now HL references offset/kern in char table
 191++C146 23          >        inc     hl              ; now HL references shift/width in char table
 192++C147 AF          >        xor     a
 193++C148 ED 6F       >        rld                     ; now A = char shift
 194++C14A F5          >        push    af
 195++C14B ED 6F       >        rld                     ; now A = (width - 1)
 196++C14D 32 C0 C1    >        ld      (WIDTH1+1), a
 197++C150 FE 08       >        cp      8               ; check if char width is larger than 8 bits
 198++C152 ED 6F       >        rld                     ; restore char shift/width
 199++C154             >
 200++C154 11 0E 00    >        ld      de, $000e       ; same as "LD C,0"
 201++C157 38 03       >        jr      c, NARROW_CHAR
 202++C159 11 4E 23    >        ld      de, $234e       ; same as "LD C,(HL)" and "INC HL"
 203++C15C             >NARROW_CHAR:
 204++C15C ED 53 8B C1 >        ld      (SMC), de       ; self-modify code to handle narrow/large chars
 205++C160             >
 206++C160 23          >        inc     hl              ; now HL references next char offset
 207++C161 7E          >        ld      a, (hl)         ; now A = LSB of next char offset
 208++C162 85          >        add     a, l
 209++C163 5F          >        ld      e, a            ; now E = LSB of next char definition address
 210++C164             >
 211++C164 3A 2B C2    >        ld      a, (P_COL)
 212++C167 91          >        sub     c               ; move left number of pixels specified by kern
 213++C168 30 01       >        jr      nc, ON_SCREEN   ; stop moving if it would fall outside screen
 214++C16A AF          >        xor     a
 215++C16B             >ON_SCREEN:
 216++C16B 32 2B C2    >        ld      (P_COL), a
 217++C16E 6F          >        ld      l,a
 218++C16F             >
 219++C16F 3A C0 C1    >        ld      a, (WIDTH1+1)   ; now A = (width - 1)
 220++C172 85          >        add     a, l            ; now A = (width - 1) + column
 221++C173 DC CA C1    >        call    c, NEWLINE      ; if char width won't fit then move to new line
 222++C176             >
 223++C176 ED 4B 2B C2 >        ld      bc, (P_COL)
 224++C17A 3E 01       >        ld      a, 1
 225++C17C DD 96 00    >        sub     (ix+0)          ; now A = 1 - height
 226++C17F 80          >        add     a, b            ; now A = P_LIN - height + 1
 227++C180             >;        jp      nc, $0c86       ; call routine REPORT-5 ("Out of screen")
 228++C180 F1          >        pop     af              ; now A = shift
 229++C181             >
 230++C181 C6 BF       >        add     a, 191          ; range 0-191
 231++C183 CD AC 22    >        call    $22aa + 2       ; call PIXEL-ADD + 2 to calculate screen address
 232++C186 08          >        ex      af, af'
 233++C187             >                                ; now A' = (col % 8)
 234++C187 18 2D       >        jr      CHK_LOOP
 235++C189             >
 236++C189             >MAIN_LOOP:
 237++C189 56          >        ld      d, (hl)         ; now D = 1st byte from char definition grid
 238++C18A 23          >        inc     hl              ; next character definition
 239++C18B             >SMC:
 240++C18B 4E          >        ld      c, (hl)         ; now C = 2nd byte from char definition or zero
 241++C18C 23          >        inc     hl              ;   (either "LD C,0" or "LD C,(HL)" + "INC HL")
 242++C18D AF          >        xor     a               ; now A = zero (since there's no 3rd byte)
 243++C18E E3          >        ex      (sp), hl        ; now HL = screen address
 244++C18F             >
 245++C18F 08          >        ex      af, af'
 246++C190             >                                ; now A = (col % 8), A' = 0
 247++C190 28 09       >        jr      z, NO_ROTATE
 248++C192 47          >        ld      b, a            ; now B = (col % 8)
 249++C193 08          >        ex      af, af'
 250++C194             >                                ; now A = 0, A' = (col % 8)
 251++C194             >ROTATE_PIXELS:
 252++C194 CB 3A       >        srl     d               ; rotate right char definition grid in D,C,A
 253++C196 CB 19       >        rr      c
 254++C198 1F          >        rra
 255++C199 10 F9       >        djnz    ROTATE_PIXELS
 256++C19B             >NO_ROTATE:
 257++C19B 2C          >        inc     l
 258++C19C 2C          >        inc     l
 259++C19D B6          >m1:     or      (hl)
 260++C19E 77          >        ld      (hl), a         ; put A on screen
 261++C19F 2D          >        dec     l
 262++C1A0 79          >        ld      a, c
 263++C1A1 B6          >m2:     or      (hl)
 264++C1A2 77          >        ld      (hl), a         ; put C on screen
 265++C1A3 2D          >        dec     l
 266++C1A4 7A          >        ld      a, d
 267++C1A5 B6          >m3:     or      (hl)
 268++C1A6 77          >        ld      (hl), a         ; put D on screen
 269++C1A7             >
 270++C1A7 24          >        inc     h               ; move screen address by 1 pixel down
 271++C1A8 7C          >        ld      a, h
 272++C1A9 E6 07       >        and     7
 273++C1AB 20 09       >        jr      nz, CHK_LOOP
 274++C1AD 7D          >        ld      a, l
 275++C1AE D6 E0       >        sub     -32
 276++C1B0 6F          >        ld      l, a
 277++C1B1 9F          >        sbc     a, a
 278++C1B2 E6 F8       >        and     -8
 279++C1B4 84          >        add     a, h
 280++C1B5 67          >        ld      h, a
 281++C1B6             >CHK_LOOP:
 282++C1B6 E3          >        ex      (sp), hl        ; now HL = char definition address
 283++C1B7 7D          >        ld      a, l
 284++C1B8 BB          >        cp      e               ; check if reached next char definition address
 285++C1B9 20 CE       >        jr      nz, MAIN_LOOP   ; loop otherwise
 286++C1BB             >
 287++C1BB E1          >        pop     hl              ; discard screen address from stack
 288++C1BC 3A 2B C2    >        ld      a, (P_COL)      ; now A = column
 289++C1BF             >WIDTH1:
 290++C1BF C6 00       >        add     a, 0            ; now A = column + (width - 1)
 291++C1C1 37          >        scf
 292++C1C2 DD 8E 01    >        adc     a, (ix+1)       ; now A = column + width + tracking
 293++C1C5 32 2B C2    >        ld      (P_COL),a
 294++C1C8 30 10       >        jr      nc, EXIT        ; if didn't fall outside the screen then exit
 295++C1CA             >NEWLINE:
 296++C1CA 3E 00       >        ld      a,MARGIN
 297++C1CC 32 2B C2    >        ld      (P_COL),a    ; move to initial column at left margin
 298++C1CF 3A 2C C2    >        ld      a,(P_LIN)
 299++C1D2 D6 55       >SPCY:   sub     #55
 300++C1D4 DD 96 00    >        sub     (ix+0)          ; now A = line - height
 301++C1D7 32 2C C2    >        ld      (P_LIN), a         ; move down a few pixels specified by height
 302++C1DA             >EXIT:
 303++C1DA             >;        ret
 304++C1DA             >
 305++C1DA CD E2 C1    >        call    saveix
 306++C1DD AF          >        xor     a
 307++C1DE C9          >        ret
 308++C1DF             >
 309++C1DF A7          >fzret0: and     a               ; a=#ff, S flag
 310++C1E0 37          >        scf
 311++C1E1 C9          >        ret
 312++C1E2             >
 313++C1E2 DD 21 55 55 >saveix: ld      ix,#5555        ; data of print instance
 314++C1E6 2A 2D C2    >        ld      hl,(FONT)
 314++C1E9 DD 75 00 DD >  ld (ix+sfzx.FONT),hl
 314++C1ED 74 01       >
 315++C1EF 3A CB C1    >        ld      a,(NEWLINE+1)
 315++C1F2 DD 77 04    >  ld (ix+sfzx.MARGIN),a
 316++C1F5 3A 2B C2    >        ld      a,(P_COL)
 316++C1F8 DD 77 09    >  ld (ix+sfzx.P_COL),a
 317++C1FB 3A 2C C2    >        ld      a,(P_LIN)
 317++C1FE DD 77 0A    >  ld (ix+sfzx.P_LIN),a
 318++C201 3A 2A C2    >        ld      a,(P_FLAG)
 318++C204 DD 77 08    >  ld (ix+sfzx.P_FLAG),a
 319++C207 3A D3 C1    >        ld      a,(SPCY+1)
 319++C20A DD 77 05    >  ld (ix+sfzx.spcy),a
 320++C20D C9          >        ret
 321++C20E             >
 322++C20E             >scroll_new:
 323++C20E 3A CB C1    >        ld      a,(NEWLINE+1)
 323++C211 32 2B C2    >  ld (P_COL),a
 324++C214 CD E2 C1    >        call    saveix
 325++C217 AF          >        xor     a
 326++C218 37          >        scf
 327++C219 C9          >        ret
 328++C21A             >
 329++C21A             >scroll:
 330++C21A 3A CB C1    >        ld      a,(NEWLINE+1)
 331++C21D 32 2B C2    >        ld      (P_COL),a
 332++C220 DD 2A E4 C1 >        ld      ix,(saveix+2)
 333++C224 DD 77 09    >        ld      (ix+sfzx.P_COL),a
 334++C227 AF          >        xor     a
 335++C228 37          >        scf
 336++C229 C9          >        ret
 337++C22A             >
 338++C22A             >;vscroll.endmark:    db 0
 339++C22A             >;vscroll.lineGap: db 0            ; temporary if vscroll is not included in main.a80
 340++C22A 00          >P_FLAG: defb        0
 341++C22B 00          >P_COL:  defb        MARGIN
 342++C22C BF          >P_LIN:  defb        191
 343++C22D 00 00       >FONT:   dw          0
 344++C22F             >
 345++C22F             >; -----------------------------------------------------------------------------
 346++C22F             >        ENDMODULE
# file closed: ./libs/fzx_drv_mod.a80
 124+ C22F             >        ENDIF
 124+ C22F             >
 124+ C22F             >        IF 1=2
 124+ C22F ~           >           ; nothing to include, just pupulate table
 124+ C22F             >        ENDIF
 124+ C22F             >_rend:  =      $
 124+ C22F             >
 124+ C22F             >        PAGE   _dpag
 124+ C22F             >        ORG    _dend
 124+ B0EF             >        IF 1=3
 124+ B0EF ~           >           dw     _radd, _rend-_radd, dst, 0
 124+ B0EF             >        ELSE
 124+ B0EF 00 C0 2F 02 >           dw     _radd, _rend-_radd, 0, fzx.init
 124+ B0F3 00 00 00 C0 >
 124+ B0F7             >        ENDIF
 124+ B0F7             >_dend:  =      $
 124+ B0F7             >
 124+ B0F7             >        ;DISPLAY "Rsc:",rscnt," Start: ",_radd," Len:",_rend-_radd," Pg:",_rpg, " End:",_rend
 124+ B0F7             >        IF _rend>0x10000
 124+ B0F7 ~           >           ; shut down the compiler if data exceeds memory limit
 124+ B0F7 ~           >           LUA
 124+ B0F7 ~           >              sj.exit(0)
 124+ B0F7 ~           >           ENDLUA
 124+ B0F7             >        ENDIF
 124+ B0F7             >;        display "#:",rscnt
 124+ B0F7             >KRscFzxIni   =      rscnt
 124+ B0F7             >rscnt   =      rscnt+1
 124+ B0F7             >_radd   =      _rend
 124+ B0F7             >_dadd   =      _dend
 125+ B0F7                       rload  KRscFzxRun, 2  , _rpg, 0, fzx.runc, ""                             ; create only record in the table (does not include any data), can be called as executable resource
 125+ B0F7             >        PAGE   _dpag
 125+ B0F7             >        ORG    _dadd
 125+ B0F7 51 51       >        db     _rpg, _rpg
 125+ B0F9             >_dend:  =      $
 125+ B0F9             >
 125+ B0F9             >        PAGE    _rpg and 7
 125+ B0F9             >        ORG    _radd
 125+ C22F             >
 125+ C22F             >        IF 2=0
 125+ C22F ~           >           incbin _rfile
 125+ C22F             >        ENDIF
 125+ C22F             >
 125+ C22F             >        IF 2=3
 125+ C22F ~           >run        incbin _rfile
 125+ C22F             >        ENDIF
 125+ C22F             >
 125+ C22F             >        IF 2=1
 125+ C22F ~           >           INCLUDE _rfile
 125+ C22F             >        ENDIF
 125+ C22F             >
 125+ C22F             >        IF 2=2
 125+ C22F             >           ; nothing to include, just pupulate table
 125+ C22F             >        ENDIF
 125+ C22F             >_rend:  =      $
 125+ C22F             >
 125+ C22F             >        PAGE   _dpag
 125+ C22F             >        ORG    _dend
 125+ B0F9             >        IF 2=3
 125+ B0F9 ~           >           dw     _radd, _rend-_radd, dst, 0
 125+ B0F9             >        ELSE
 125+ B0F9 2F C2 00 00 >           dw     _radd, _rend-_radd, 0, fzx.runc
 125+ B0FD 00 00 41 C0 >
 125+ B101             >        ENDIF
 125+ B101             >_dend:  =      $
 125+ B101             >
 125+ B101             >        ;DISPLAY "Rsc:",rscnt," Start: ",_radd," Len:",_rend-_radd," Pg:",_rpg, " End:",_rend
 125+ B101             >        IF _rend>0x10000
 125+ B101 ~           >           ; shut down the compiler if data exceeds memory limit
 125+ B101 ~           >           LUA
 125+ B101 ~           >              sj.exit(0)
 125+ B101 ~           >           ENDLUA
 125+ B101             >        ENDIF
 125+ B101             >;        display "#:",rscnt
 125+ B101             >KRscFzxRun   =      rscnt
 125+ B101             >rscnt   =      rscnt+1
 125+ B101             >_radd   =      _rend
 125+ B101             >_dadd   =      _dend
 126+ B101                       rload  KRscFzxAnd, 2  , _rpg, 0, fzx.andoperand, ""
 126+ B101             >        PAGE   _dpag
 126+ B101             >        ORG    _dadd
 126+ B101 51 51       >        db     _rpg, _rpg
 126+ B103             >_dend:  =      $
 126+ B103             >
 126+ B103             >        PAGE    _rpg and 7
 126+ B103             >        ORG    _radd
 126+ C22F             >
 126+ C22F             >        IF 2=0
 126+ C22F ~           >           incbin _rfile
 126+ C22F             >        ENDIF
 126+ C22F             >
 126+ C22F             >        IF 2=3
 126+ C22F ~           >run        incbin _rfile
 126+ C22F             >        ENDIF
 126+ C22F             >
 126+ C22F             >        IF 2=1
 126+ C22F ~           >           INCLUDE _rfile
 126+ C22F             >        ENDIF
 126+ C22F             >
 126+ C22F             >        IF 2=2
 126+ C22F             >           ; nothing to include, just pupulate table
 126+ C22F             >        ENDIF
 126+ C22F             >_rend:  =      $
 126+ C22F             >
 126+ C22F             >        PAGE   _dpag
 126+ C22F             >        ORG    _dend
 126+ B103             >        IF 2=3
 126+ B103 ~           >           dw     _radd, _rend-_radd, dst, 0
 126+ B103             >        ELSE
 126+ B103 2F C2 00 00 >           dw     _radd, _rend-_radd, 0, fzx.andoperand
 126+ B107 00 00 31 C0 >
 126+ B10B             >        ENDIF
 126+ B10B             >_dend:  =      $
 126+ B10B             >
 126+ B10B             >        ;DISPLAY "Rsc:",rscnt," Start: ",_radd," Len:",_rend-_radd," Pg:",_rpg, " End:",_rend
 126+ B10B             >        IF _rend>0x10000
 126+ B10B ~           >           ; shut down the compiler if data exceeds memory limit
 126+ B10B ~           >           LUA
 126+ B10B ~           >              sj.exit(0)
 126+ B10B ~           >           ENDLUA
 126+ B10B             >        ENDIF
 126+ B10B             >;        display "#:",rscnt
 126+ B10B             >KRscFzxAnd   =      rscnt
 126+ B10B             >rscnt   =      rscnt+1
 126+ B10B             >_radd   =      _rend
 126+ B10B             >_dadd   =      _dend
 127+ B10B                       rload  KRscFzxOr , 2  , _rpg, 0, fzx.oroperand, ""
 127+ B10B             >        PAGE   _dpag
 127+ B10B             >        ORG    _dadd
 127+ B10B 51 51       >        db     _rpg, _rpg
 127+ B10D             >_dend:  =      $
 127+ B10D             >
 127+ B10D             >        PAGE    _rpg and 7
 127+ B10D             >        ORG    _radd
 127+ C22F             >
 127+ C22F             >        IF 2=0
 127+ C22F ~           >           incbin _rfile
 127+ C22F             >        ENDIF
 127+ C22F             >
 127+ C22F             >        IF 2=3
 127+ C22F ~           >run        incbin _rfile
 127+ C22F             >        ENDIF
 127+ C22F             >
 127+ C22F             >        IF 2=1
 127+ C22F ~           >           INCLUDE _rfile
 127+ C22F             >        ENDIF
 127+ C22F             >
 127+ C22F             >        IF 2=2
 127+ C22F             >           ; nothing to include, just pupulate table
 127+ C22F             >        ENDIF
 127+ C22F             >_rend:  =      $
 127+ C22F             >
 127+ C22F             >        PAGE   _dpag
 127+ C22F             >        ORG    _dend
 127+ B10D             >        IF 2=3
 127+ B10D ~           >           dw     _radd, _rend-_radd, dst, 0
 127+ B10D             >        ELSE
 127+ B10D 2F C2 00 00 >           dw     _radd, _rend-_radd, 0, fzx.oroperand
 127+ B111 00 00 35 C0 >
 127+ B115             >        ENDIF
 127+ B115             >_dend:  =      $
 127+ B115             >
 127+ B115             >        ;DISPLAY "Rsc:",rscnt," Start: ",_radd," Len:",_rend-_radd," Pg:",_rpg, " End:",_rend
 127+ B115             >        IF _rend>0x10000
 127+ B115 ~           >           ; shut down the compiler if data exceeds memory limit
 127+ B115 ~           >           LUA
 127+ B115 ~           >              sj.exit(0)
 127+ B115 ~           >           ENDLUA
 127+ B115             >        ENDIF
 127+ B115             >;        display "#:",rscnt
 127+ B115             >KRscFzxOr   =      rscnt
 127+ B115             >rscnt   =      rscnt+1
 127+ B115             >_radd   =      _rend
 127+ B115             >_dadd   =      _dend
 128+ B115                       rload  KRscFzxFnt4, 3  , _rpg, 0, ffnt4 , "fonts/Programmer_osg.fzx"
 128+ B115             >        PAGE   _dpag
 128+ B115             >        ORG    _dadd
 128+ B115 51 51       >        db     _rpg, _rpg
 128+ B117             >_dend:  =      $
 128+ B117             >
 128+ B117             >        PAGE    _rpg and 7
 128+ B117             >        ORG    _radd
 128+ C22F             >
 128+ C22F             >        IF 3=0
 128+ C22F ~           >           incbin _rfile
 128+ C22F             >        ENDIF
 128+ C22F             >
 128+ C22F             >        IF 3=3
 128+ C22F             >ffnt4        incbin "fonts/Programmer_osg.fzx"
 128+ C22F             >        ENDIF
 128+ C564             >
 128+ C564             >        IF 3=1
 128+ C564 ~           >           INCLUDE _rfile
 128+ C564             >        ENDIF
 128+ C564             >
 128+ C564             >        IF 3=2
 128+ C564 ~           >           ; nothing to include, just pupulate table
 128+ C564             >        ENDIF
 128+ C564             >_rend:  =      $
 128+ C564             >
 128+ C564             >        PAGE   _dpag
 128+ C564             >        ORG    _dend
 128+ B117             >        IF 3=3
 128+ B117 2F C2 35 03 >           dw     _radd, _rend-_radd, 0, 0
 128+ B11B 00 00 00 00 >
 128+ B11F             >        ELSE
 128+ B11F ~           >           dw     _radd, _rend-_radd, dst, run
 128+ B11F             >        ENDIF
 128+ B11F             >_dend:  =      $
 128+ B11F             >
 128+ B11F             >        ;DISPLAY "Rsc:",rscnt," Start: ",_radd," Len:",_rend-_radd," Pg:",_rpg, " End:",_rend
 128+ B11F             >        IF _rend>0x10000
 128+ B11F ~           >           ; shut down the compiler if data exceeds memory limit
 128+ B11F ~           >           LUA
 128+ B11F ~           >              sj.exit(0)
 128+ B11F ~           >           ENDLUA
 128+ B11F             >        ENDIF
 128+ B11F             >;        display "#:",rscnt
 128+ B11F             >KRscFzxFnt4   =      rscnt
 128+ B11F             >rscnt   =      rscnt+1
 128+ B11F             >_radd   =      _rend
 128+ B11F             >_dadd   =      _dend
 129+ B11F                       rload  KRscFzxFnt5, 3  , _rpg, 0, ffnt5 , "fonts/DigitalDisco.fzx"
 129+ B11F             >        PAGE   _dpag
 129+ B11F             >        ORG    _dadd
 129+ B11F 51 51       >        db     _rpg, _rpg
 129+ B121             >_dend:  =      $
 129+ B121             >
 129+ B121             >        PAGE    _rpg and 7
 129+ B121             >        ORG    _radd
 129+ C564             >
 129+ C564             >        IF 3=0
 129+ C564 ~           >           incbin _rfile
 129+ C564             >        ENDIF
 129+ C564             >
 129+ C564             >        IF 3=3
 129+ C564             >ffnt5        incbin "fonts/DigitalDisco.fzx"
 129+ C564             >        ENDIF
 129+ CBA9             >
 129+ CBA9             >        IF 3=1
 129+ CBA9 ~           >           INCLUDE _rfile
 129+ CBA9             >        ENDIF
 129+ CBA9             >
 129+ CBA9             >        IF 3=2
 129+ CBA9 ~           >           ; nothing to include, just pupulate table
 129+ CBA9             >        ENDIF
 129+ CBA9             >_rend:  =      $
 129+ CBA9             >
 129+ CBA9             >        PAGE   _dpag
 129+ CBA9             >        ORG    _dend
 129+ B121             >        IF 3=3
 129+ B121 64 C5 45 06 >           dw     _radd, _rend-_radd, 0, 0
 129+ B125 00 00 00 00 >
 129+ B129             >        ELSE
 129+ B129 ~           >           dw     _radd, _rend-_radd, dst, run
 129+ B129             >        ENDIF
 129+ B129             >_dend:  =      $
 129+ B129             >
 129+ B129             >        ;DISPLAY "Rsc:",rscnt," Start: ",_radd," Len:",_rend-_radd," Pg:",_rpg, " End:",_rend
 129+ B129             >        IF _rend>0x10000
 129+ B129 ~           >           ; shut down the compiler if data exceeds memory limit
 129+ B129 ~           >           LUA
 129+ B129 ~           >              sj.exit(0)
 129+ B129 ~           >           ENDLUA
 129+ B129             >        ENDIF
 129+ B129             >;        display "#:",rscnt
 129+ B129             >KRscFzxFnt5   =      rscnt
 129+ B129             >rscnt   =      rscnt+1
 129+ B129             >_radd   =      _rend
 129+ B129             >_dadd   =      _dend
 130+ B129              ; include some texts
 131+ B129                       PAGE _rpg and 7
 132+ B129                       ORG  _radd
 133+ CBA9                       INCLUDE "demo/demo_txt.a80"
# file opened: ./demo/demo_txt.a80
   1++CBA9              _tb:                        ; text begin to calculate length
   2++CBA9              fzTitles1:
   3++CBA9 2F C2 B4 CB                  sfzx     ffnt4,.text,8,0
   3++CBAD 08 00 00 00
   3++CBB1 00 00 00
   4++CBB4 16 B0 08     .text:          db       22,176,8
   5++CBB7              fzTitles2:
   6++CBB7                              ORG      temp3k
   7++5B00              ;two parts with labels - "mid", "end"
   8++5B00                              include  "demo/vscroll/cats_titles.a80"
# file opened: ./demo/vscroll/cats_titles.a80
   1++5B00 ~            /*
   2++5B00 ~            Poznamky od mborika:
   3++5B00 ~             - ffnt4 = Programmer_osg.fzx
   4++5B00 ~             - ffnt5 = DigitalDisco.fzx
   5++5B00 ~
   6++5B00 ~            KRscKittens  [w: 14ch, h: 11px]
   7++5B00 ~            KRscInvaders [w:  6ch, h: 45px]
   8++5B00 ~            KRscSinDiKat [w: 15ch, h: 16px]
   9++5B00 ~            KRscEnginy   [w: 12ch, h: 11px]
  10++5B00 ~            */
  11++5B00
  12++5B00              ; TEXT data
  13++5B00                              macro   fzexe par,exe
  14++5B00 ~                            db      KFzxExe, par
  15++5B00 ~                            dw      exe
  16++5B00                              endm
  17++5B00
  18++5B00                              macro   fzexe16 par1,par2,exe
  19++5B00 ~                            db      KFzxExe16, par1, par2
  20++5B00 ~                            dw      exe
  21++5B00                              endm
  22++5B00
  23++5B00                              macro   fzexew  par1,exe
  24++5B00 ~                            db      KFzxExe16
  25++5B00 ~                            dw      par1
  26++5B00 ~                            dw      exe
  27++5B00                              endm
  28++5B00
  29++5B00                              macro   fzfont font
  30++5B00 ~                            db      KFzxFont
  31++5B00 ~                            dw      font
  32++5B00                              endm
  33++5B00
  34++5B00                              macro   fzmargin posx
  35++5B00 ~                            db      KFzxMargin, posx
  36++5B00                              endm
  37++5B00
  38++5B00                              macro   fztab tab
  39++5B00 ~                            db      KFzxTab, tab
  40++5B00                              endm
  41++5B00
  42++5B00                              macro   fzlgap spc
  43++5B00 ~                            db      KFzxLGap, spc
  44++5B00                              endm
  45++5B00
  46++5B00
  47++5B00              a:  = #0a
  48++5B00              lm: = #30
  49++5B00              mm: = #70
  50++5B00
  51++5B00                      OUTPUT "bin/end_titles.bin"
  52++5B00                      PHASE  temp3k
  53++5B00 ~            /*
  54++5B00 ~            fzTitles1:
  55++5B00 ~                    sfzx     ffnt4,.text,8,0
  56++5B00 ~            .text:  db       22,176,8
  57++5B00 ~            */
  58++5B00                      fzfont ffnt4
  58++5B00 01          >                db        1
  58++5B01 2F C2       >                dw      ffnt4
  59++5B03                      fzlgap 16
  59++5B03 05 10       >                db        5, 16
  60++5B05                      fztab 12
  60++5B05 06 0C       >                db         6, 12
  61++5B07 79 6F 75 27          db  "you've finally reached the end of demo by", a, a
  61++5B0B 76 65 20 66
  61++5B0F 69 6E 61 6C
  61++5B13 6C 79 20 72
  61++5B17 65 61 63 68
  61++5B1B 65 64 20 74
  61++5B1F 68 65 20 65
  61++5B23 6E 64 20 6F
  61++5B27 66 20 64 65
  61++5B2B 6D 6F 20 62
  61++5B2F 79 0A 0A
  62++5B32                      fzexe16  9,KRscKittens,unpackHdi          ; ------- image
  62++5B32 04 09 06    >                db       4, 9, KRscKittens
  62++5B35 30 80       >                dw      unpackHdi
  63++5B37              ;--
  64++5B37                      fzlgap    8
  64++5B37 05 08       >                db        5, 8
  65++5B39 0A                   db       a
  66++5B3A                      fztab    79
  66++5B3A 06 4F       >                db         6, 79
  67++5B3C 69 6E 20 63          db  "in cooperation with",a
  67++5B40 6F 6F 70 65
  67++5B44 72 61 74 69
  67++5B48 6F 6E 20 77
  67++5B4C 69 74 68 0A
  68++5B50                      fzlgap   60
  68++5B50 05 3C       >                db        5, 60
  69++5B52 0A                   db       a
  70++5B53                      fzexe16  9,KRscInvaders,unpackHdi          ; ------- image
  70++5B53 04 09 07    >                db       4, 9, KRscInvaders
  70++5B56 30 80       >                dw      unpackHdi
  71++5B58
  72++5B58                      fzlgap   10
  72++5B58 05 0A       >                db        5, 10
  73++5B5A                      fztab    62
  73++5B5A 06 3E       >                db         6, 62
  74++5B5C 75 6E 64 65          db  "under the supervision of", a
  74++5B60 72 20 74 68
  74++5B64 65 20 73 75
  74++5B68 70 65 72 76
  74++5B6C 69 73 69 6F
  74++5B70 6E 20 6F 66
  74++5B74 0A
  75++5B75                      fzlgap   20
  75++5B75 05 14       >                db        5, 20
  76++5B77 0A                   db       a
  77++5B78                      fzexe16  9,KRscSinDiKat,unpackHdi          ; ------- image
  77++5B78 04 09 08    >                db       4, 9, KRscSinDiKat
  77++5B7B 30 80       >                dw      unpackHdi
  78++5B7D
  79++5B7D                      fzlgap   10
  79++5B7D 05 0A       >                db        5, 10
  80++5B7F 0A 0A                db       a,a
  81++5B81                      fztab    68
  81++5B81 06 44       >                db         6, 68
  82++5B83 6F 72 69 67          db  "original soundtrack by", a
  82++5B87 69 6E 61 6C
  82++5B8B 20 73 6F 75
  82++5B8F 6E 64 74 72
  82++5B93 61 63 6B 20
  82++5B97 62 79 0A
  83++5B9A
  84++5B9A                      fzfont ffnt5
  84++5B9A 01          >                db        1
  84++5B9B 64 C5       >                dw      ffnt5
  85++5B9D                      fzmargin 118
  85++5B9D 07 76       >                db      7, 118
  86++5B9F 41 4B 49 0A          db  "AKI", a
  87++5BA3 2E 20 2E 20          db  ". . .", a, a
  87++5BA7 2E 0A 0A
  88++5BAA
  89++5BAA                      fzmargin 0
  89++5BAA 07 00       >                db      7, 0
  90++5BAC                      fztab    69
  90++5BAC 06 45       >                db         6, 69
  91++5BAE                      fzlgap   18
  91++5BAE 05 12       >                db        5, 18
  92++5BB0 70 72 6F 64          db  "production team", a
  92++5BB4 75 63 74 69
  92++5BB8 6F 6E 20 74
  92++5BBC 65 61 6D 0A
  93++5BC0                      fzlgap   12
  93++5BC0 05 0C       >                db        5, 12
  94++5BC2                      fzfont ffnt4
  94++5BC2 01          >                db        1
  94++5BC3 2F C2       >                dw      ffnt4
  95++5BC5                      fztab 68
  95++5BC5 06 44       >                db         6, 68
  96++5BC7 43 4F 44 45          db  "CODE"
  97++5BCB                      fztab 155
  97++5BCB 06 9B       >                db         6, 155
  98++5BCD 47 52 41 50          db  "GRAPHICS", a
  98++5BD1 48 49 43 53
  98++5BD5 0A
  99++5BD6
 100++5BD6                      fzlgap 9
 100++5BD6 05 09       >                db        5, 9
 101++5BD8                      fztab 54
 101++5BD8 06 36       >                db         6, 54
 102++5BDA 62 61 7A 65          db  "baze busy"
 102++5BDE 20 62 75 73
 102++5BE2 79
 103++5BE3                      fztab 152
 103++5BE3 06 98       >                db         6, 152
 104++5BE5 68 65 70 74          db  "hepterida", a
 104++5BE9 65 72 69 64
 104++5BED 61 0A
 105++5BEF                      fztab 44
 105++5BEF 06 2C       >                db         6, 44
 106++5BF1 6D 62 6F 72          db  "mborik mike"
 106++5BF5 69 6B 20 6D
 106++5BF9 69 6B 65
 107++5BFC                      fztab 140
 107++5BFC 06 8C       >                db         6, 140
 108++5BFE 6D 62 6F 72          db  "mborik mike", a
 108++5C02 69 6B 20 6D
 108++5C06 69 6B 65 0A
 109++5C0A                      fzlgap 12
 109++5C0A 05 0C       >                db        5, 12
 110++5C0C                      fztab 46
 110++5C0C 06 2E       >                db         6, 46
 111++5C0E 6F 6D 65 67          db  "omega ped"
 111++5C12 61 20 70 65
 111++5C16 64
 112++5C17                      fztab 142
 112++5C17 06 8E       >                db         6, 142
 113++5C19 6F 6D 65 67          db  "omega z00m", a
 113++5C1D 61 20 7A 30
 113++5C21 30 6D 0A
 114++5C24
 115++5C24                      fzlgap 9
 115++5C24 05 09       >                db        5, 9
 116++5C26                      fzmargin 102
 116++5C26 07 66       >                db      7, 102
 117++5C28 20 53 55 50          db  " SUPPORT", a
 117++5C2C 50 4F 52 54
 117++5C30 0A
 118++5C31 65 6C 6C 76          db  "ellvis ikon", a, a, a
 118++5C35 69 73 20 69
 118++5C39 6B 6F 6E 0A
 118++5C3D 0A 0A
 119++5C3F
 120++5C3F                      fzmargin 0
 120++5C3F 07 00       >                db      7, 0
 121++5C41                      fztab 43
 121++5C41 06 2B       >                db         6, 43
 122++5C43 64 69 72 65          db  "directed and linked together by", a
 122++5C47 63 74 65 64
 122++5C4B 20 61 6E 64
 122++5C4F 20 6C 69 6E
 122++5C53 6B 65 64 20
 122++5C57 74 6F 67 65
 122++5C5B 74 68 65 72
 122++5C5F 20 62 79 0A
 123++5C63                      fztab 86
 123++5C63 06 56       >                db         6, 86
 124++5C65 6D 62 6F 72          db  "mborik & omega", a, a
 124++5C69 69 6B 20 26
 124++5C6D 20 6F 6D 65
 124++5C71 67 61 0A 0A
 125++5C75                      fztab 98
 125++5C75 06 62       >                db         6, 98
 126++5C77 70 6F 77 65          db  "powered by", a
 126++5C7B 72 65 64 20
 126++5C7F 62 79 0A
 127++5C82                      fzlgap  18
 127++5C82 05 12       >                db        5, 18
 128++5C84 0A                   db     a
 129++5C85                      fzexe16  8,KRscEnginy,unpackHdi          ; ------- image
 129++5C85 04 08 09    >                db       4, 8, KRscEnginy
 129++5C88 30 80       >                dw      unpackHdi
 130++5C8A
 131++5C8A 0A                   db     a
 132++5C8B
 133++5C8B                      fzfont ffnt5
 133++5C8B 01          >                db        1
 133++5C8C 64 C5       >                dw      ffnt5
 134++5C8E                      fzlgap 20
 134++5C8E 05 14       >                db        5, 20
 135++5C90                      fztab 68
 135++5C90 06 44       >                db         6, 68
 136++5C92 63 6F 70 79          db  "copyright ",127," 2023", a, a
 136++5C96 72 69 67 68
 136++5C9A 74 20 7F 20
 136++5C9E 32 30 32 33
 136++5CA2 0A 0A
 137++5CA4
 138++5CA4                      fzfont ffnt4
 138++5CA4 01          >                db        1
 138++5CA5 2F C2       >                dw      ffnt4
 139++5CA7                      fzlgap 8
 139++5CA7 05 08       >                db        5, 8
 140++5CA9                      fztab 42
 140++5CA9 06 2A       >                db         6, 42
 141++5CAB 73 70 65 63          db  "special thanks to all organizers,", a
 141++5CAF 69 61 6C 20
 141++5CB3 74 68 61 6E
 141++5CB7 6B 73 20 74
 141++5CBB 6F 20 61 6C
 141++5CBF 6C 20 6F 72
 141++5CC3 67 61 6E 69
 141++5CC7 7A 65 72 73
 141++5CCB 2C 0A
 142++5CCD
 143++5CCD                      fzlgap 16
 143++5CCD 05 10       >                db        5, 16
 144++5CCF                      fztab 56
 144++5CCF 06 38       >                db         6, 56
 145++5CD1 76 69 73 69          db  "visitors and supporters of", a
 145++5CD5 74 6F 72 73
 145++5CD9 20 61 6E 64
 145++5CDD 20 73 75 70
 145++5CE1 70 6F 72 74
 145++5CE5 65 72 73 20
 145++5CE9 6F 66 0A
 146++5CEC
 147++5CEC                      fzfont ffnt5
 147++5CEC 01          >                db        1
 147++5CED 64 C5       >                dw      ffnt5
 148++5CEF                      fztab  98
 148++5CEF 06 62       >                db         6, 98
 149++5CF1 46 4F 52 65          db  "FOReVER", a
 149++5CF5 56 45 52 0A
 150++5CF9
 151++5CF9                      fztab 89
 151++5CF9 06 59       >                db         6, 89
 152++5CFB 64 65 6D 6F          db  "demoparty", a, a
 152++5CFF 70 61 72 74
 152++5D03 79 0A 0A
 153++5D06                      fzexew  syncid_061, wait4Frame
 153++5D06 04          >                db       4
 153++5D07 96 19       >                dw      syncid_061
 153++5D09 6C BF       >                dw      wait4Frame
 154++5D0B FF                   db  #ff                               ; ret
 155++5D0C                      ENT
 156++5D0C                      OUTEND
 157++5D0C
# file closed: ./demo/vscroll/cats_titles.a80
   9++5D0C
  10++5D0C              ;                ORG      fzTitles2
  11++5D0C              ;                include  "demo/fzcommand.a80"
  12++5D0C              ;                include  "demo/subtitles.a80"
  13++5D0C              ;                include  "demo/darkness.a80"
  14++5D0C              ;                include  "demo/vprint.a80"
  15++5D0C
  16++5D0C              ;----------------------------------------------------------------------------
  17++5D0C              ; between scenes titles
  18++5D0C              ;----------------------------------------------------------------------------
  19++5D0C ~            /*
  20++5D0C ~            txb01:          sfzx    ffnt5,txb01.text,0,0
  21++5D0C ~            .text:          db      22,88,0
  22++5D0C ~                            db      "THOUSANDS OF YEARS AGO..."
  23++5D0C ~            ;                db      "Hundreds of thousands years ago..."
  24++5D0C ~                            db      #ff
  25++5D0C ~
  26++5D0C ~            txb02:          sfzx    ffnt5,txb02.text,0,0
  27++5D0C ~            .text:          db      22,88,0
  28++5D0C ~            ;                db      "ZETA RETICULI SOLAR SYSTEM 2125"
  29++5D0C ~                            db      "ZETA II RETICULI SOLAR SYSTEM"
  30++5D0C ~                            db      13,13,"YEAR 2125"
  31++5D0C ~                            db      #ff
  32++5D0C ~
  33++5D0C ~            txb03:          sfzx    ffnt5,txb03.text,0,0
  34++5D0C ~            .text:          db      22,88,0
  35++5D0C ~                            db      "ALIEN WORLD"
  36++5D0C ~                            db      13,13,"MILLIONS OF LIGHTYEARS AWAY"
  37++5D0C ~                            db      #ff
  38++5D0C ~
  39++5D0C ~            txb04:          sfzx    ffnt5,txb04.text,0,0
  40++5D0C ~            .text:          db      22,88,0
  41++5D0C ~                            db      "HOLLISTOWN, EARTH"
  42++5D0C ~                            db      13,13,"PRESENT DAY"
  43++5D0C ~                            db      #ff
  44++5D0C ~
  45++5D0C ~            txb05:          sfzx    ffnt5,txb05.text,0,0
  46++5D0C ~            .text:          db      22,88,0
  47++5D0C ~                            db      "TO BE CONTINUED..."
  48++5D0C ~                            db      #ff
  49++5D0C ~
  50++5D0C ~            txb06:          sfzx    ffnt5,txb06.text,0,0
  51++5D0C ~            .text:          db      22,88,0
  52++5D0C ~                            db      "48 YEARS LATER..."
  53++5D0C ~                            db      #ff
  54++5D0C ~
  55++5D0C ~            txb07:          sfzx    ffnt5,txb07.text,0,0
  56++5D0C ~            .text:          ;db      22,  64 ,80, "YOU WATCHED"
  57++5D0C ~                            ;db      22,  80,112, "V O I D"
  58++5D0C ~                            ;db      22, 100, 52, "A MOVIE BY INVADERS"
  59++5D0C ~
  60++5D0C ~            .y: = 88
  61++5D0C ~                            db      22, .y    ,118, "VOID"
  62++5D0C ~                            db      22, .y+8  ,100, "INVADERS"
  63++5D0C ~                            db      22, .y+16 ,116, "2020"
  64++5D0C ~                            db      #ff
  65++5D0C ~            */
  66++5D0C
  67++5D0C                         display "** text :",_tb," len:",$-_tb
# file closed: ./demo/demo_txt.a80
 134+ 5D0C              _rend:   = $
 135+ 5D0C              _radd:   = $
 136+ 5D0C                       PAGE _dpag
 137+ 5D0C                       ORG  _dend
 138+ B129                       DISPLAY "Resource page:",_rpg and 7," Free:",0x10000-_rend
 139+ B129
 140+ B129              _rpg:   = #57
 141+ B129              _radd:  = #db00
 142+ B129              _rend:  = _radd
 143+ B129
 144+ B129                       PAGE _rpg and 7
 145+ B129                       ORG  _radd
 146+ DB00
 147+ DB00                       include "demo/msx/pt3extra.a80"
# file opened: ./demo/msx/pt3extra.a80
   1++DB00              ; ProTracker3 Extreme (P3X) player for ZX Spectrum
   2++DB00              ; Copyright (c) 2004, 2007 S.V.Bulba (http://bulba.untergrund.net)
   3++DB00              ; formatted for Pasmo by Gasman
   4++DB00              ; optimized by Cheveron
   5++DB00              ; improved and reformated for AS by mborik/GembaBoys (c) 2016
   6++DB00              ; simplified aj adopted to sjasmplus by mborik/SinDiKaT (c) 2019
   7++DB00
   8++DB00              ;------------------------------------------------------------------------------
   9++DB00
  10++DB00 18 06        music_init	jr	p3x_init
  11++DB02 C3 71 E0     music_stop	jp	p3x_mute
  12++DB05 C3 58 DF     music_play	jp	p3x_play
  13++DB08
  14++DB08 21 BE E2     p3x_init:	ld	hl,MDLADDR
  15++DB0B 22 50 DC     p3x_initv0:	ld	(modaddr+1),hl
  16++DB0E 22 DD DD     		ld	(mdaddr2+1),hl
  17++DB11 E5           		push	hl
  18++DB12 11 64 00     		ld	de,100
  19++DB15 19           		add	hl,de
  20++DB16 2B           		dec	hl
  21++DB17 7E           		ld	a,(hl)
  22++DB18 32 9C DB     		ld	(NoteTableMode+1),a
  23++DB1B 23           		inc	hl
  24++DB1C 7E           		ld	a,(hl)
  25++DB1D 32 E5 DF     		ld	(pl1d+1),a
  26++DB20 E5           		push	hl
  27++DB21 DD E1        		pop	ix
  28++DB23 19           		add	hl,de
  29++DB24 22 7C DF     		ld	(CrPsPtr+1),hl
  30++DB27 DD 5E 02     		ld	e,(ix+2)
  31++DB2A 19           		add	hl,de
  32++DB2B 23           		inc	hl
  33++DB2C 22 87 DF     		ld	(LPosPtr+1),hl
  34++DB2F D1           		pop	de
  35++DB30 DD 6E 03     		ld	l,(ix+3)
  36++DB33 DD 66 04     		ld	h,(ix+4)
  37++DB36 19           		add	hl,de
  38++DB37 22 94 DF     		ld	(PatsPtr+1),hl
  39++DB3A 21 A9 00     		ld	hl,$a9
  40++DB3D 19           		add	hl,de
  41++DB3E 22 D6 DD     		ld	(OrnPtrs+1),hl
  42++DB41 21 69 00     		ld	hl,$69
  43++DB44 19           		add	hl,de
  44++DB45 22 49 DC     		ld	(SamPtrs+1),hl
  45++DB48
  46++DB48              ; note table data depacker
  47++DB48 11 CF E0     		ld	de,T_PACK
  48++DB4B 01 D2 E1     		ld	bc,T1_+(2*49)-1
  49++DB4E 1A           tp_0:		ld	a,(de)
  50++DB4F 13           		inc	de
  51++DB50 FE 1E        		cp	15*2
  52++DB52 30 06        		jr	nc,tp_1
  53++DB54 67           		ld	h,a
  54++DB55 1A           		ld	a,(de)
  55++DB56 6F           		ld	l,a
  56++DB57 13           		inc	de
  57++DB58 18 07        		jr	tp_2
  58++DB5A D5           tp_1:		push	de
  59++DB5B 16 00        		ld	d,0
  60++DB5D 5F           		ld	e,a
  61++DB5E 19           		add	hl,de
  62++DB5F 19           		add	hl,de
  63++DB60 D1           		pop	de
  64++DB61 7C           tp_2:		ld	a,h
  65++DB62 02           		ld	(bc),a
  66++DB63 0B           		dec	bc
  67++DB64 7D           		ld	a,l
  68++DB65 02           		ld	(bc),a
  69++DB66 0B           		dec	bc
  70++DB67 D6 F0        		sub	$f0
  71++DB69 20 E3        		jr	nz,tp_0
  72++DB6B 21 04 E1     		ld	hl,vars
  73++DB6E 77           		ld	(hl),a
  74++DB6F 11 05 E1     		ld	de,vars+1
  75++DB72 01 6C 00     		ld	bc,VAR0END-vars-1
  76++DB75 ED B0        		ldir
  77++DB77 3C           		inc	a
  78++DB78 32 5B E1     		ld	(DelyCnt),a
  79++DB7B 21 01 F0     		ld	hl,$f001
  80++DB7E 22 1F E1     		ld	(ChanA+CHP_NtSkCn),hl
  81++DB81 22 3C E1     		ld	(ChanB+CHP_NtSkCn),hl
  82++DB84 22 59 E1     		ld	(ChanC+CHP_NtSkCn),hl
  83++DB87 21 CC E0     		ld	hl,emptysamorn
  84++DB8A 22 71 DF     		ld	(AdInPtA+1),hl
  85++DB8D 22 11 E1     		ld	(ChanA+CHP_OrnPtr),hl
  86++DB90 22 2E E1     		ld	(ChanB+CHP_OrnPtr),hl
  87++DB93 22 4B E1     		ld	(ChanC+CHP_OrnPtr),hl
  88++DB96
  89++DB96 3E 04        		ld	a,4
  90++DB98 32 E5 DF     		ld	(pl1d+1),a
  91++DB9B 3E 3A        NoteTableMode:	ld	a,$3a
  92++DB9D 17           		rla
  93++DB9E E6 07        		and	7
  94++DBA0
  95++DBA0              ; NoteTableCreator (c) Ivan Roshin
  96++DBA0              ; A - NoteTableNumber * 2 + VersionForNoteTable
  97++DBA0              ;	xx1b - 3.xx..3.4r
  98++DBA0              ;	xx0b - 3.4x..3.6x - VortexTracker II --- P3X is always PT3.6
  99++DBA0
 100++DBA0 21 7C E0     		ld	hl,nt_data
 101++DBA3 D5           		push	de
 102++DBA4 50           		ld	d,b
 103++DBA5 87           		add	a,a
 104++DBA6 5F           		ld	e,a
 105++DBA7 19           		add	hl,de
 106++DBA8 5E           		ld	e,(hl)
 107++DBA9 23           		inc	hl
 108++DBAA CB 3B        		srl	e
 109++DBAC 9F           		sbc	a,a
 110++DBAD E6 A7        		and	$a7	;#00 (NOP) or #A7 (AND A)
 111++DBAF 32 D5 DB     		ld	(l3),a
 112++DBB2 EB           		ex	de,hl
 113++DBB3 C1           		pop	bc	;bc = T1_
 114++DBB4 09           		add	hl,bc
 115++DBB5 1A           		ld	a,(de)
 116++DBB6 C6 8C        		add	a,low T_
 117++DBB8 4F           		ld	c,a
 118++DBB9 CE E0        		adc	a,high T_
 119++DBBB 91           		sub	c
 120++DBBC 47           		ld	b,a
 121++DBBD C5           		push	bc
 122++DBBE 11 61 E2     		ld	de,NT_
 123++DBC1 D5           		push	de
 124++DBC2 06 0C        		ld	b,12
 125++DBC4 C5           l1:		push	bc
 126++DBC5 4E           		ld	c,(hl)
 127++DBC6 23           		inc	hl
 128++DBC7 E5           		push	hl
 129++DBC8 46           		ld	b,(hl)
 130++DBC9 D5           		push	de
 131++DBCA EB           		ex	de,hl
 132++DBCB 11 17 00     		ld	de,$17
 133++DBCE DD 26 08     		ld	xh,8
 134++DBD1 CB 38        l2:		srl	b
 135++DBD3 CB 19        		rr	c
 136++DBD5 19           l3:		add	hl,de	; will be replaced by AND A or NOP apparently
 137++DBD6 79           		ld	a,c
 138++DBD7 8A           		adc	a,d
 139++DBD8 77           		ld	(hl),a
 140++DBD9 23           		inc	hl
 141++DBDA 78           		ld	a,b
 142++DBDB 8A           		adc	a,d
 143++DBDC 77           		ld	(hl),a
 144++DBDD 19           		add	hl,de
 145++DBDE DD 25        		dec	xh
 146++DBE0 20 EF        		jr	nz,l2
 147++DBE2
 148++DBE2 D1           		pop	de
 149++DBE3 13           		inc	de
 150++DBE4 13           		inc	de
 151++DBE5 E1           		pop	hl
 152++DBE6 23           		inc	hl
 153++DBE7 C1           		pop	bc
 154++DBE8 10 DA        		djnz	l1
 155++DBEA E1           		pop	hl
 156++DBEB D1           		pop	de
 157++DBEC 7B           		ld	a,e
 158++DBED FE 98        		cp	low TCOLD_1
 159++DBEF 20 05        		jr	nz,corr_1
 160++DBF1 3E FD        		ld	a,$fd
 161++DBF3 32 8F E2     		ld	(NT_+$02e),a
 162++DBF6 1A           corr_1:		ld	a,(de)
 163++DBF7 A7           		and	a
 164++DBF8 28 11        		jr	z,tc_exit
 165++DBFA 1F           		rra
 166++DBFB F5           		push	af
 167++DBFC 87           		add	a,a
 168++DBFD 4F           		ld	c,a
 169++DBFE 09           		add	hl,bc
 170++DBFF F1           		pop	af
 171++DC00 30 02        		jr	nc,corr_2
 172++DC02 35           		dec	(hl)
 173++DC03 35           		dec	(hl)
 174++DC04 34           corr_2:		inc	(hl)
 175++DC05 A7           		and	a
 176++DC06 ED 42        		sbc	hl,bc
 177++DC08 13           		inc	de
 178++DC09 18 EB        		jr	corr_1
 179++DC0B              tc_exit:
 180++DC0B
 181++DC0B              ; VolTableCreator (c) Ivan Roshin
 182++DC0B              ; A - VersionForVolumeTable
 183++DC0B              ;	(0..4 - v3.xx .. v3.4x
 184++DC0B              ;	(5..  - v3.5x .. v3.6x - VortexTracker II
 185++DC0B
 186++DC0B 21 11 00     		ld	hl,17
 187++DC0E 54           		ld	d,h
 188++DC0F 5C           		ld	e,h
 189++DC10 DD 21 71 E1  		ld	ix,VT_+16
 190++DC14 0E 10        		ld	c,16
 191++DC16 E5           p3x_initv2:	push	hl
 192++DC17 19           		add	hl,de
 193++DC18 EB           		ex	de,hl
 194++DC19 ED 62        		sbc	hl,hl
 195++DC1B 7D           p3x_initv1:	ld	a,l
 196++DC1C 7D           		ld	a,l
 197++DC1D 7C           		ld	a,h
 198++DC1E CE 00        		adc	a,0
 199++DC20 DD 77 00     		ld	(ix+0),a
 200++DC23 DD 23        		inc	ix
 201++DC25 19           		add	hl,de
 202++DC26 0C           		inc	c
 203++DC27 79           		ld	a,c
 204++DC28 E6 0F        		and	15
 205++DC2A 20 EF        		jr	nz,p3x_initv1
 206++DC2C E1           		pop	hl
 207++DC2D 7B           		ld	a,e
 208++DC2E FE 77        		cp	$77
 209++DC30 20 01        		jr	nz,m3
 210++DC32 1C           		inc	e
 211++DC33 79           m3:		ld	a,c
 212++DC34 A7           		and	a
 213++DC35 20 DF        		jr	nz,p3x_initv2
 214++DC37 C3 4B E0     		jp	rout_a0
 215++DC3A
 216++DC3A              ; pattern decoder
 217++DC3A DD 36 08 00  PD_OrSm:	ld	(ix+8),0
 218++DC3E CD CE DD     		call	setorn
 219++DC41 0A           		ld	a,(bc)
 220++DC42 03           		inc	bc
 221++DC43 0F           		rrca
 222++DC44 87           pd_sam:		add	a,a
 223++DC45 5F           pd_sam_:	ld	e,a
 224++DC46 16 00        		ld	d,0
 225++DC48 21 21 21     SamPtrs:	ld	hl,$2121
 226++DC4B 19           		add	hl,de
 227++DC4C 5E           		ld	e,(hl)
 228++DC4D 23           		inc	hl
 229++DC4E 56           		ld	d,(hl)
 230++DC4F 21 21 21     modaddr:	ld	hl,$2121
 231++DC52 19           		add	hl,de
 232++DC53 DD 75 03     		ld	(ix+3),l
 233++DC56 DD 74 04     		ld	(ix+4),h
 234++DC59 18 41        		jr	pd_loop
 235++DC5B
 236++DC5B 07           pd_vol:		rlca
 237++DC5C 07           		rlca
 238++DC5D 07           		rlca
 239++DC5E 07           		rlca
 240++DC5F DD 77 10     		ld	(ix+16),a
 241++DC62 18 3B        		jr	pd_lp2
 242++DC64
 243++DC64 DD 77 08     pd_eoff:	ld	(ix+8),a
 244++DC67 DD 77 F4     		ld	(ix-12),a
 245++DC6A 18 33        		jr	pd_lp2
 246++DC6C
 247++DC6C 3D           pd_SorE:	dec	a
 248++DC6D 20 07        		jr	nz,pd_env
 249++DC6F 0A           		ld	a,(bc)
 250++DC70 03           		inc	bc
 251++DC71 DD 77 05     		ld	(ix+5),a
 252++DC74 18 29        		jr	pd_lp2
 253++DC76
 254++DC76 CD B2 DD     pd_env:		call	setenv
 255++DC79 18 24        		jr	pd_lp2
 256++DC7B
 257++DC7B CD CE DD     pd_orn:		call	setorn
 258++DC7E 18 1C        		jr	pd_loop
 259++DC80
 260++DC80 DD 77 08     pd_esam:	ld	(ix+8),a
 261++DC83 DD 77 F4     		ld	(ix-12),a
 262++DC86 C4 B2 DD     		call	nz,setenv
 263++DC89 0A           		ld	a,(bc)
 264++DC8A 03           		inc	bc
 265++DC8B 18 B8        		jr	pd_sam_
 266++DC8D
 267++DC8D DD 7E 06     ptdecod:	ld	a,(ix+6)
 268++DC90 32 19 DD     		ld	(PrNote+1),a
 269++DC93 DD 6E FA     		ld	l,(ix-6)
 270++DC96 DD 66 FB     		ld	h,(ix-5)
 271++DC99 22 35 DD     		ld	(PrSlide+1),hl
 272++DC9C 11 10 20     pd_loop:	ld	de,$2010
 273++DC9F 0A           pd_lp2:		ld	a,(bc)
 274++DCA0 03           		inc	bc
 275++DCA1 83           		add	a,e
 276++DCA2 38 96        		jr	c,PD_OrSm
 277++DCA4 82           		add	a,d
 278++DCA5 28 49        		jr	z,pd_fin
 279++DCA7 38 9B        		jr	c,pd_sam
 280++DCA9 83           		add	a,e
 281++DCAA 28 25        		jr	z,pd_rel
 282++DCAC 38 AD        		jr	c,pd_vol
 283++DCAE 83           		add	a,e
 284++DCAF 28 B3        		jr	z,pd_eoff
 285++DCB1 38 B9        		jr	c,pd_SorE
 286++DCB3 C6 60        		add	a,96
 287++DCB5 38 20        		jr	c,pd_note
 288++DCB7 83           		add	a,e
 289++DCB8 38 C1        		jr	c,pd_orn
 290++DCBA 82           		add	a,d
 291++DCBB 38 0F        		jr	c,pd_nois
 292++DCBD 83           		add	a,e
 293++DCBE 38 C0        		jr	c,pd_esam
 294++DCC0 87           		add	a,a
 295++DCC1 5F           		ld	e,a
 296++DCC2 21 07 BD     		ld	hl,spccoms-$20e0
 297++DCC5 19           		add	hl,de
 298++DCC6 5E           		ld	e,(hl)
 299++DCC7 23           		inc	hl
 300++DCC8 56           		ld	d,(hl)
 301++DCC9 D5           		push	de
 302++DCCA 18 D0        		jr	pd_loop
 303++DCCC
 304++DCCC 32 5F E1     pd_nois:	ld	(ns_base),a
 305++DCCF 18 CE        		jr	pd_lp2
 306++DCD1
 307++DCD1 DD CB 09 86  pd_rel:		res	0,(ix+9)
 308++DCD5 18 08        		jr	pd_res
 309++DCD7
 310++DCD7 DD 77 06     pd_note:	ld	(ix+6),a
 311++DCDA DD CB 09 C6  		set	0,(ix+9)
 312++DCDE AF           		xor	a
 313++DCDF ED 73 EE DC  pd_res:		ld	(pdsp_+1),sp
 314++DCE3 DD F9        		ld	sp,ix
 315++DCE5 67           		ld	h,a
 316++DCE6 6F           		ld	l,a
 317++DCE7 E5           		push	hl
 318++DCE8 E5           		push	hl
 319++DCE9 E5           		push	hl
 320++DCEA E5           		push	hl
 321++DCEB E5           		push	hl
 322++DCEC E5           		push	hl
 323++DCED 31 31 31     pdsp_:		ld	sp,$3131
 324++DCF0 DD 7E 05     pd_fin:		ld	a,(ix+5)
 325++DCF3 DD 77 0F     		ld	(ix+15),a
 326++DCF6 C9           		ret
 327++DCF7
 328++DCF7 DD CB 09 96  c_portm:	res	2,(ix+9)
 329++DCFB 0A           		ld	a,(bc)
 330++DCFC 03           		inc	bc
 331++DCFD 03           		inc	bc
 332++DCFE 03           		inc	bc
 333++DCFF DD 77 0A     		ld	(ix+10),a
 334++DD02 DD 77 F9     		ld	(ix-7),a
 335++DD05 11 61 E2     		ld	de,NT_
 336++DD08 DD 7E 06     		ld	a,(ix+6)
 337++DD0B DD 77 07     		ld	(ix+7),a
 338++DD0E 87           		add	a,a
 339++DD0F 6F           		ld	l,a
 340++DD10 26 00        		ld	h,0
 341++DD12 19           		add	hl,de
 342++DD13 7E           		ld	a,(hl)
 343++DD14 23           		inc	hl
 344++DD15 66           		ld	h,(hl)
 345++DD16 6F           		ld	l,a
 346++DD17 E5           		push	hl
 347++DD18 3E 3E        PrNote:		ld	a,$3e
 348++DD1A DD 77 06     		ld	(ix+6),a
 349++DD1D 87           		add	a,a
 350++DD1E 6F           		ld	l,a
 351++DD1F 26 00        		ld	h,0
 352++DD21 19           		add	hl,de
 353++DD22 5E           		ld	e,(hl)
 354++DD23 23           		inc	hl
 355++DD24 56           		ld	d,(hl)
 356++DD25 E1           		pop	hl
 357++DD26 ED 52        		sbc	hl,de
 358++DD28 DD 75 0D     		ld	(ix+13),l
 359++DD2B DD 74 0E     		ld	(ix+14),h
 360++DD2E DD 5E FA     		ld	e,(ix-6)
 361++DD31 DD 56 FB     		ld	d,(ix-5)
 362++DD34 11 11 11     PrSlide:	ld	de,$1111
 363++DD37 DD 73 FA     		ld	(ix-6),e
 364++DD3A DD 72 FB     		ld	(ix-5),d
 365++DD3D 0A           		ld	a,(bc)
 366++DD3E 03           		inc	bc
 367++DD3F 08           		ex	af,af'
 368++DD40 0A           		ld	a,(bc)
 369++DD41 03           		inc	bc
 370++DD42 A7           		and	a
 371++DD43 28 01        		jr	z,nosig
 372++DD45 EB           		ex	de,hl
 373++DD46 ED 52        nosig:		sbc	hl,de
 374++DD48 F2 50 DD     		jp	p,set_stp
 375++DD4B 2F           		cpl
 376++DD4C 08           		ex	af,af'
 377++DD4D ED 44        		neg
 378++DD4F 08           		ex	af,af'
 379++DD50 DD 77 0C     set_stp:	ld	(ix+12),a
 380++DD53 08           		ex	af,af'
 381++DD54 DD 77 0B     		ld	(ix+11),a
 382++DD57 DD 36 FE 00  		ld	(ix-2),0
 383++DD5B C9           		ret
 384++DD5C
 385++DD5C DD CB 09 D6  c_gliss:	set	2,(ix+9)
 386++DD60 0A           		ld	a,(bc)
 387++DD61 03           		inc	bc
 388++DD62 DD 77 0A     		ld	(ix+10),a
 389++DD65 A7           		and	a
 390++DD66 20 01        		jr	nz,gl36
 391++DD68 AF           		xor	a
 392++DD69 DD 77 F9     gl36:		ld	(ix-7),a
 393++DD6C 0A           		ld	a,(bc)
 394++DD6D 03           		inc	bc
 395++DD6E 08           		ex	af,af'
 396++DD6F 0A           		ld	a,(bc)
 397++DD70 03           		inc	bc
 398++DD71 18 DD        		jr	set_stp
 399++DD73
 400++DD73 0A           c_smpos:	ld	a,(bc)
 401++DD74 03           		inc	bc
 402++DD75 DD 77 F5     		ld	(ix-11),a
 403++DD78 C9           		ret
 404++DD79
 405++DD79 0A           c_orpos:	ld	a,(bc)
 406++DD7A 03           		inc	bc
 407++DD7B DD 77 F4     		ld	(ix-12),a
 408++DD7E C9           		ret
 409++DD7F
 410++DD7F 0A           c_vibrt:	ld	a,(bc)
 411++DD80 03           		inc	bc
 412++DD81 DD 77 FF     		ld	(ix-1),a
 413++DD84 DD 77 FE     		ld	(ix-2),a
 414++DD87 0A           		ld	a,(bc)
 415++DD88 03           		inc	bc
 416++DD89 DD 77 00     		ld	(ix+0),a
 417++DD8C AF           		xor	a
 418++DD8D DD 77 F9     		ld	(ix-7),a
 419++DD90 DD 77 FA     		ld	(ix-6),a
 420++DD93 DD 77 FB     		ld	(ix-5),a
 421++DD96 C9           		ret
 422++DD97
 423++DD97 0A           c_engls:	ld	a,(bc)
 424++DD98 03           		inc	bc
 425++DD99 32 41 E0     		ld	(env_del+1),a
 426++DD9C 32 5E E1     		ld	(CurEDel),a
 427++DD9F 0A           		ld	a,(bc)
 428++DDA0 03           		inc	bc
 429++DDA1 6F           		ld	l,a
 430++DDA2 0A           		ld	a,(bc)
 431++DDA3 03           		inc	bc
 432++DDA4 67           		ld	h,a
 433++DDA5 22 44 E0     		ld	(ESldAdd+1),hl
 434++DDA8 C9           		ret
 435++DDA9
 436++DDA9 0A           c_delay:	ld	a,(bc)
 437++DDAA 03           		inc	bc
 438++DDAB 32 E5 DF     		ld	(pl1d+1),a
 439++DDAE 32 5B E1     		ld	(DelyCnt),a	; bugfix by Lee_dC
 440++DDB1 C9           		ret
 441++DDB2
 442++DDB2 DD 73 08     setenv:		ld	(ix+8),e
 443++DDB5 32 6E E1     		ld	(AYREGS+AR_EnvTp),a
 444++DDB8 0A           		ld	a,(bc)
 445++DDB9 03           		inc	bc
 446++DDBA 67           		ld	h,a
 447++DDBB 0A           		ld	a,(bc)
 448++DDBC 03           		inc	bc
 449++DDBD 6F           		ld	l,a
 450++DDBE 22 6F E1     		ld	(EnvBase),hl
 451++DDC1 AF           		xor	a
 452++DDC2 DD 77 F4     		ld	(ix-12),a
 453++DDC5 32 5E E1     		ld	(CurEDel),a
 454++DDC8 67           		ld	h,a
 455++DDC9 6F           		ld	l,a
 456++DDCA 22 5C E1     		ld	(CurESld),hl
 457++DDCD C9           c_nop:		ret
 458++DDCE
 459++DDCE 87           setorn:		add	a,a
 460++DDCF 5F           		ld	e,a
 461++DDD0 16 00        		ld	d,0
 462++DDD2 DD 72 F4     		ld	(ix-12),d
 463++DDD5 21 21 21     OrnPtrs:	ld	hl,$2121
 464++DDD8 19           		add	hl,de
 465++DDD9 5E           		ld	e,(hl)
 466++DDDA 23           		inc	hl
 467++DDDB 56           		ld	d,(hl)
 468++DDDC 21 21 21     mdaddr2:	ld	hl,$2121
 469++DDDF 19           		add	hl,de
 470++DDE0 DD 75 01     		ld	(ix+1),l
 471++DDE3 DD 74 02     		ld	(ix+2),h
 472++DDE6 C9           		ret
 473++DDE7
 474++DDE7              ; ALL 16 ADDRESSES TO PROTECT FROM BROKEN PT3 MODULES
 475++DDE7 CD DD        spccoms:	dw	c_nop
 476++DDE9 5C DD        		dw	c_gliss
 477++DDEB F7 DC        		dw	c_portm
 478++DDED 73 DD        		dw	c_smpos
 479++DDEF 79 DD        		dw	c_orpos
 480++DDF1 7F DD        		dw	c_vibrt
 481++DDF3 CD DD        		dw	c_nop
 482++DDF5 CD DD        		dw	c_nop
 483++DDF7 97 DD        		dw	c_engls
 484++DDF9 A9 DD        		dw	c_delay
 485++DDFB CD DD        		dw	c_nop
 486++DDFD CD DD        		dw	c_nop
 487++DDFF CD DD        		dw	c_nop
 488++DE01 CD DD        		dw	c_nop
 489++DE03 CD DD        		dw	c_nop
 490++DE05 CD DD        		dw	c_nop
 491++DE07
 492++DE07 AF           chregs:		xor	a
 493++DE08 32 6B E1     		ld	(Ampl),a
 494++DE0B DD CB 15 46  		bit	0,(ix+21)
 495++DE0F E5           		push	hl
 496++DE10 CA 35 DF     		jp	z,ch_exit
 497++DE13 ED 73 80 DE  		ld	(csp_+1),sp
 498++DE17 DD 6E 0D     		ld	l,(ix+13)
 499++DE1A DD 66 0E     		ld	h,(ix+14)
 500++DE1D F9           		ld	sp,hl
 501++DE1E D1           		pop	de
 502++DE1F 67           		ld	h,a
 503++DE20 DD 7E 00     		ld	a,(ix+0)
 504++DE23 6F           		ld	l,a
 505++DE24 39           		add	hl,sp
 506++DE25 3C           		inc	a
 507++DE26 BA           		cp	d
 508++DE27 38 01        		jr	c,ch_orps
 509++DE29 7B           		ld	a,e
 510++DE2A DD 77 00     ch_orps:	ld	(ix+0),a
 511++DE2D DD 7E 12     		ld	a,(ix+18)
 512++DE30 86           		add	a,(hl)
 513++DE31 F2 35 DE     		jp	p,ch_ntp
 514++DE34 AF           		xor	a
 515++DE35 FE 60        ch_ntp:		cp	96
 516++DE37 38 02        		jr	c,ch_nok
 517++DE39 3E 5F        		ld	a,95
 518++DE3B 87           ch_nok:		add	a,a
 519++DE3C 08           		ex	af,af'
 520++DE3D DD 6E 0F     		ld	l,(ix+15)
 521++DE40 DD 66 10     		ld	h,(ix+16)
 522++DE43 F9           		ld	sp,hl
 523++DE44 D1           		pop	de
 524++DE45 26 00        		ld	h,0
 525++DE47 DD 7E 01     		ld	a,(ix+1)
 526++DE4A 47           		ld	b,a
 527++DE4B 87           		add	a,a
 528++DE4C 87           		add	a,a
 529++DE4D 6F           		ld	l,a
 530++DE4E 39           		add	hl,sp
 531++DE4F F9           		ld	sp,hl
 532++DE50 78           		ld	a,b
 533++DE51 3C           		inc	a
 534++DE52 BA           		cp	d
 535++DE53 38 01        		jr	c,ch_smps
 536++DE55 7B           		ld	a,e
 537++DE56 DD 77 01     ch_smps:	ld	(ix+1),a
 538++DE59 C1           		pop	bc
 539++DE5A E1           		pop	hl
 540++DE5B DD 5E 08     		ld	e,(ix+8)
 541++DE5E DD 56 09     		ld	d,(ix+9)
 542++DE61 19           		add	hl,de
 543++DE62 CB 70        		bit	6,b
 544++DE64 28 06        		jr	z,ch_noac
 545++DE66 DD 75 08     		ld	(ix+8),l
 546++DE69 DD 74 09     		ld	(ix+9),h
 547++DE6C EB           ch_noac:	ex	de,hl
 548++DE6D 08           		ex	af,af'
 549++DE6E 6F           		ld	l,a
 550++DE6F 26 00        		ld	h,0
 551++DE71 31 61 E2     		ld	sp,NT_
 552++DE74 39           		add	hl,sp
 553++DE75 F9           		ld	sp,hl
 554++DE76 E1           		pop	hl
 555++DE77 19           		add	hl,de
 556++DE78 DD 5E 06     		ld	e,(ix+6)
 557++DE7B DD 56 07     		ld	d,(ix+7)
 558++DE7E 19           		add	hl,de
 559++DE7F 31 31 31     csp_:		ld	sp,$3131
 560++DE82 E3           		ex	(sp),hl
 561++DE83 AF           		xor	a
 562++DE84 DD B6 05     		or	(ix+5)
 563++DE87 28 3E        		jr	z,ch_amp
 564++DE89 DD 35 05     		dec	(ix+5)
 565++DE8C 20 39        		jr	nz,ch_amp
 566++DE8E DD 7E 16     		ld	a,(ix+22)
 567++DE91 DD 77 05     		ld	(ix+5),a
 568++DE94 DD 6E 17     		ld	l,(ix+23)
 569++DE97 DD 66 18     		ld	h,(ix+24)
 570++DE9A 7C           		ld	a,h
 571++DE9B 19           		add	hl,de
 572++DE9C DD 75 06     		ld	(ix+6),l
 573++DE9F DD 74 07     		ld	(ix+7),h
 574++DEA2 DD CB 15 56  		bit	2,(ix+21)
 575++DEA6 20 1F        		jr	nz,ch_amp
 576++DEA8 DD 5E 19     		ld	e,(ix+25)
 577++DEAB DD 56 1A     		ld	d,(ix+26)
 578++DEAE A7           		and	a
 579++DEAF 28 01        		jr	z,ch_stpp
 580++DEB1 EB           		ex	de,hl
 581++DEB2 ED 52        ch_stpp:	sbc	hl,de
 582++DEB4 FA C7 DE     		jp	m,ch_amp
 583++DEB7 DD 7E 13     		ld	a,(ix+19)
 584++DEBA DD 77 12     		ld	(ix+18),a
 585++DEBD AF           		xor	a
 586++DEBE DD 77 05     		ld	(ix+5),a
 587++DEC1 DD 77 06     		ld	(ix+6),a
 588++DEC4 DD 77 07     		ld	(ix+7),a
 589++DEC7 DD 7E 02     ch_amp:		ld	a,(ix+2)
 590++DECA CB 79        		bit	7,c
 591++DECC 28 13        		jr	z,ch_noam
 592++DECE CB 71        		bit	6,c
 593++DED0 28 07        		jr	z,ch_amin
 594++DED2 FE 0F        		cp	15
 595++DED4 28 0B        		jr	z,ch_noam
 596++DED6 3C           		inc	a
 597++DED7 18 05        		jr	ch_svam
 598++DED9 FE F1        ch_amin:	cp	-15
 599++DEDB 28 04        		jr	z,ch_noam
 600++DEDD 3D           		dec	a
 601++DEDE DD 77 02     ch_svam:	ld	(ix+2),a
 602++DEE1 6F           ch_noam:	ld	l,a
 603++DEE2 78           		ld	a,b
 604++DEE3 E6 0F        		and	15
 605++DEE5 85           		add	a,l
 606++DEE6 F2 EA DE     		jp	p,ch_apos
 607++DEE9 AF           		xor	a
 608++DEEA FE 10        ch_apos:	cp	16
 609++DEEC 38 02        		jr	c,ch_vol
 610++DEEE 3E 0F        		ld	a,15
 611++DEF0 DD B6 1C     ch_vol:		or	(ix+28)
 612++DEF3 6F           		ld	l,a
 613++DEF4 26 00        		ld	h,0
 614++DEF6 11 61 E1     		ld	de,VT_
 615++DEF9 19           		add	hl,de
 616++DEFA 7E           		ld	a,(hl)
 617++DEFB CB 41        ch_env:		bit	0,c
 618++DEFD 20 03        		jr	nz,ch_noen
 619++DEFF DD B6 14     		or	(ix+20)
 620++DF02 32 6B E1     ch_noen:	ld	(Ampl),a
 621++DF05 CB 78        		bit	7,b
 622++DF07 79           		ld	a,c
 623++DF08 28 19        		jr	z,no_ensl
 624++DF0A 17           		rla
 625++DF0B 17           		rla
 626++DF0C CB 2F        		sra	a
 627++DF0E CB 2F        		sra	a
 628++DF10 CB 2F        		sra	a
 629++DF12 DD 86 04     		add	a,(ix+4)
 630++DF15 CB 68        		bit	5,b
 631++DF17 28 03        		jr	z,no_enac
 632++DF19 DD 77 04     		ld	(ix+4),a
 633++DF1C 21 25 E0     no_enac:	ld	hl,AddToEn+1
 634++DF1F 86           		add	a,(hl)
 635++DF20 77           		ld	(hl),a
 636++DF21 18 0E        		jr	ch_mix
 637++DF23
 638++DF23 1F           no_ensl:	rra
 639++DF24 DD 86 03     		add	a,(ix+3)
 640++DF27 32 60 E1     		ld	(AddToNs),a
 641++DF2A CB 68        		bit	5,b
 642++DF2C 28 03        		jr	z,ch_mix
 643++DF2E DD 77 03     		ld	(ix+3),a
 644++DF31 78           ch_mix:		ld	a,b
 645++DF32 1F           		rra
 646++DF33 E6 48        		and	$48
 647++DF35 21 68 E1     ch_exit:	ld	hl,AYREGS+AR_Mixer
 648++DF38 B6           		or	(hl)
 649++DF39 0F           		rrca
 650++DF3A 77           		ld	(hl),a
 651++DF3B E1           		pop	hl
 652++DF3C AF           		xor	a
 653++DF3D DD B6 0A     		or	(ix+10)
 654++DF40 C8           		ret	z
 655++DF41 DD 35 0A     		dec	(ix+10)
 656++DF44 C0           		ret	nz
 657++DF45 DD AE 15     		xor	(ix+21)
 658++DF48 DD 77 15     		ld	(ix+21),a
 659++DF4B 1F           		rra
 660++DF4C DD 7E 0B     		ld	a,(ix+11)
 661++DF4F 38 03        		jr	c,ch_ondl
 662++DF51 DD 7E 0C     		ld	a,(ix+12)
 663++DF54 DD 77 0A     ch_ondl:	ld	(ix+10),a
 664++DF57 C9           		ret
 665++DF58
 666++DF58
 667++DF58 AF           p3x_play:	xor	a
 668++DF59 32 25 E0     		ld	(AddToEn+1),a
 669++DF5C 32 68 E1     		ld	(AYREGS+AR_Mixer),a
 670++DF5F 3D           		dec	a
 671++DF60 32 6E E1     		ld	(AYREGS+AR_EnvTp),a
 672++DF63 21 5B E1     		ld	hl,DelyCnt
 673++DF66 35           		dec	(hl)
 674++DF67 C2 E9 DF     		jp	nz,pl2
 675++DF6A 21 1F E1     		ld	hl,ChanA+CHP_NtSkCn
 676++DF6D 35           		dec	(hl)
 677++DF6E 20 4C        		jr	nz,pl1b
 678++DF70 01 01 01     AdInPtA:	ld	bc,$0101
 679++DF73 0A           		ld	a,(bc)
 680++DF74 A7           		and	a
 681++DF75 20 3A        		jr	nz,pl1a
 682++DF77 57           		ld	d,a
 683++DF78 32 5F E1     		ld	(ns_base),a
 684++DF7B 21 21 21     CrPsPtr:	ld	hl,$2121
 685++DF7E 23           		inc	hl
 686++DF7F 7E           		ld	a,(hl)
 687++DF80 3C           		inc	a
 688++DF81 20 08        		jr	nz,plnlp
 689++DF83 CD 68 E0     		call	checklp
 690++DF86 21 21 21     LPosPtr:	ld	hl,$2121
 691++DF89 7E           		ld	a,(hl)
 692++DF8A 3C           		inc	a
 693++DF8B 22 7C DF     plnlp:		ld	(CrPsPtr+1),hl
 694++DF8E 3D           		dec	a
 695++DF8F 87           		add	a,a
 696++DF90 5F           		ld	e,a
 697++DF91 CB 12        		rl	d
 698++DF93 21 21 21     PatsPtr:	ld	hl,$2121
 699++DF96 19           		add	hl,de
 700++DF97 ED 5B 50 DC  		ld	de,(modaddr+1)
 701++DF9B ED 73 AF DF  		ld	(psp_+1),sp
 702++DF9F F9           		ld	sp,hl
 703++DFA0 E1           		pop	hl
 704++DFA1 19           		add	hl,de
 705++DFA2 44           		ld	b,h
 706++DFA3 4D           		ld	c,l
 707++DFA4 E1           		pop	hl
 708++DFA5 19           		add	hl,de
 709++DFA6 22 C7 DF     		ld	(AdInPtB+1),hl
 710++DFA9 E1           		pop	hl
 711++DFAA 19           		add	hl,de
 712++DFAB 22 DB DF     		ld	(AdInPtC+1),hl
 713++DFAE 31 31 31     psp_:		ld	sp,$3131
 714++DFB1 DD 21 10 E1  pl1a:		ld	ix,ChanA+12
 715++DFB5 CD 8D DC     		call	ptdecod
 716++DFB8 ED 43 71 DF  		ld	(AdInPtA+1),bc
 717++DFBC 21 3C E1     pl1b:		ld	hl,ChanB+CHP_NtSkCn
 718++DFBF 35           		dec	(hl)
 719++DFC0 20 0E        		jr	nz,pl1c
 720++DFC2 DD 21 2D E1  		ld	ix,ChanB+12
 721++DFC6 01 01 01     AdInPtB:	ld	bc,$0101
 722++DFC9 CD 8D DC     		call	ptdecod
 723++DFCC ED 43 C7 DF  		ld	(AdInPtB+1),bc
 724++DFD0 21 59 E1     pl1c:		ld	hl,ChanC+CHP_NtSkCn
 725++DFD3 35           		dec	(hl)
 726++DFD4 20 0E        		jr	nz,pl1d
 727++DFD6 DD 21 4A E1  		ld	ix,ChanC+12
 728++DFDA 01 01 01     AdInPtC:	ld	bc,$0101
 729++DFDD CD 8D DC     		call	ptdecod
 730++DFE0 ED 43 DB DF  		ld	(AdInPtC+1),bc
 731++DFE4 3E 3E        pl1d:		ld	a,$3e
 732++DFE6 32 5B E1     		ld	(DelyCnt),a
 733++DFE9 DD 21 04 E1  pl2:		ld	ix,ChanA
 734++DFED 2A 61 E1     		ld	hl,(AYREGS+AR_TonA)
 735++DFF0 CD 07 DE     		call	chregs
 736++DFF3 22 61 E1     		ld	(AYREGS+AR_TonA),hl
 737++DFF6 3A 6B E1     		ld	a,(Ampl)
 738++DFF9 32 69 E1     		ld	(AYREGS+AR_AmplA),a
 739++DFFC DD 21 21 E1  		ld	ix,ChanB
 740++E000 2A 63 E1     		ld	hl,(AYREGS+AR_TonB)
 741++E003 CD 07 DE     		call	chregs
 742++E006 22 63 E1     		ld	(AYREGS+AR_TonB),hl
 743++E009 3A 6B E1     		ld	a,(Ampl)
 744++E00C 32 6A E1     		ld	(AYREGS+AR_AmplB),a
 745++E00F DD 21 3E E1  		ld	ix,ChanC
 746++E013 2A 65 E1     		ld	hl,(AYREGS+AR_TonC)
 747++E016 CD 07 DE     		call	chregs
 748++E019 22 65 E1     		ld	(AYREGS+AR_TonC),hl
 749++E01C 2A 5F E1     		ld	hl,(ns_base_AddToNs)
 750++E01F 7C           		ld	a,h
 751++E020 85           		add	a,l
 752++E021 32 67 E1     		ld	(AYREGS+AR_Noise),a
 753++E024
 754++E024 3E 3E        AddToEn:	ld	a,$3e
 755++E026 5F           		ld	e,a
 756++E027 87           		add	a,a
 757++E028 9F           		sbc	a,a
 758++E029 57           		ld	d,a
 759++E02A 2A 6F E1     		ld	hl,(EnvBase)
 760++E02D 19           		add	hl,de
 761++E02E ED 5B 5C E1  		ld	de,(CurESld)
 762++E032 19           		add	hl,de
 763++E033 22 6C E1     		ld	(AYREGS+AR_Env),hl
 764++E036
 765++E036 AF           		xor	a
 766++E037 21 5E E1     		ld	hl,CurEDel
 767++E03A B6           		or	(hl)
 768++E03B 28 0E        		jr	z,rout_a0
 769++E03D 35           		dec	(hl)
 770++E03E 20 0A        		jr	nz,rout
 771++E040 3E 3E        env_del:	ld	a,$3e
 772++E042 77           		ld	(hl),a
 773++E043 21 21 21     ESldAdd:	ld	hl,$2121
 774++E046 19           		add	hl,de
 775++E047 22 5C E1     		ld	(CurESld),hl
 776++E04A AF           rout:		xor	a
 777++E04B 11 BF FF     rout_a0:	ld	de,$ffbf
 778++E04E 01 FD FF     		ld	bc,$fffd
 779++E051 21 61 E1     		ld	hl,AYREGS
 780++E054 ED 79        lout:		out	(c),a
 781++E056 43           		ld	b,e
 782++E057 ED A3        		outi
 783++E059 42           		ld	b,d
 784++E05A 3C           		inc	a
 785++E05B FE 0D        		cp	13
 786++E05D 20 F5        		jr	nz,lout
 787++E05F ED 79        		out	(c),a
 788++E061 7E           		ld	a,(hl)
 789++E062 A7           		and	a
 790++E063 F8           		ret	m
 791++E064 43           		ld	b,e
 792++E065 ED 79        		out	(c),a
 793++E067 C9           		ret
 794++E068
 795++E068              checklp:
 796++E068 E1           		pop	hl
 797++E069 21 5B E1     		ld	hl,DelyCnt
 798++E06C 34           		inc	(hl)
 799++E06D 21 1F E1     		ld	hl,ChanA+CHP_NtSkCn
 800++E070 34           		inc	(hl)
 801++E071 AF           p3x_mute:	xor	a
 802++E072 67           		ld	h,a
 803++E073 6F           		ld	l,a
 804++E074 32 69 E1     		ld	(AYREGS+AR_AmplA),a
 805++E077 22 6A E1     		ld	(AYREGS+AR_AmplB),hl
 806++E07A 18 CF        		jr	rout_a0
 807++E07C
 808++E07C              ;------------------------------------------------------------------------------
 809++E07C              ; note table data
 810++E07C 64           nt_data:	db	(T_NEW_0-T1_)*2
 811++E07D 2A           		db	TCNEW_0-T_
 812++E07E 65           		db	(T_OLD_0-T1_)*2+1
 813++E07F 00           		db	TCOLD_0-T_
 814++E080 01           		db	(T_NEW_1-T1_)*2+1
 815++E081 0C           		db	TCNEW_1-T_
 816++E082 01           		db	(T_OLD_1-T1_)*2+1
 817++E083 0C           		db	TCOLD_1-T_
 818++E084 94           		db	(T_NEW_2-T1_)*2
 819++E085 35           		db	TCNEW_2-T_
 820++E086 30           		db	(T_OLD_2-T1_)*2
 821++E087 0E           		db	TCOLD_2-T_
 822++E088 60           		db	(T_NEW_3-T1_)*2
 823++E089 20           		db	TCNEW_3-T_
 824++E08A 60           		db	(T_OLD_3-T1_)*2
 825++E08B 21           		db	TCOLD_3-T_
 826++E08C              T_
 827++E08C
 828++E08C 01 05 09 0B  TCOLD_0		db	$00+1,$04+1,$08+1,$0a+1,$0c+1,$0e+1
 828++E090 0D 0F
 829++E092 13 15 19 25  		db	$12+1,$14+1,$18+1,$24+1,$3c+1,0
 829++E096 3D 00
 830++E098 5D 00        TCOLD_1		db	$5c+1,0
 831++E09A 31 37 4D 53  TCOLD_2		db	$30+1,$36+1,$4c+1,$52+1,$5e+1,$70+1,$82,$8c
 831++E09E 5F 71 82 8C
 832++E0A2 9C 9E A0 A6  		db	$9c,$9e,$a0,$a6,$a8,$aa,$ac,$ae,$ae,0
 832++E0A6 A8 AA AC AE
 832++E0AA AE 00
 833++E0AC 57           TCNEW_3		db	$56+1
 834++E0AD 1F 23 25 29  TCOLD_3		db	$1e+1,$22+1,$24+1,$28+1,$2c+1,$2e+1,$32+1,$be+1,0
 834++E0B1 2D 2F 33 BF
 834++E0B5 00
 835++E0B6 1D 21 23 27  TCNEW_0		db	$1c+1,$20+1,$22+1,$26+1,$2a+1,$2c+1,$30+1,$54+1
 835++E0BA 2B 2D 31 55
 836++E0BE BD BF 00     		db	$bc+1,$be+1,0
 837++E0C1              TCNEW_1		equ	TCOLD_1
 838++E0C1 1B 21 25 29  TCNEW_2		db	$1a+1,$20+1,$24+1,$28+1,$2a+1,$3a+1,$4c+1,$5e+1
 838++E0C5 2B 3B 4D 5F
 839++E0C9 BB BD BF 00  		db	$ba+1,$bc+1,$be+1,0
 840++E0CD
 841++E0CD              emptysamorn	equ	$-1
 842++E0CD 01 00        		db	1,0 ;$90 ; delete #90 if you don't need default sample
 843++E0CF
 844++E0CF              ; first 12 values of tone tables (packed)
 845++E0CF 0D D8        T_PACK		db	low ($06ec*2/256),low ($06ec*2)
 846++E0D1 69           		db	$0755-$06ec
 847++E0D2 70           		db	$07c5-$0755
 848++E0D3 76           		db	$083b-$07c5
 849++E0D4 7D           		db	$08b8-$083b
 850++E0D5 85           		db	$093d-$08b8
 851++E0D6 8D           		db	$09ca-$093d
 852++E0D7 95           		db	$0a5f-$09ca
 853++E0D8 9D           		db	$0afc-$0a5f
 854++E0D9 A8           		db	$0ba4-$0afc
 855++E0DA B1           		db	$0c55-$0ba4
 856++E0DB BB           		db	$0d10-$0c55
 857++E0DC 0C DA        		db	$066d*2/256,low ($066D*2)
 858++E0DE 62           		db	$06cf-$066d
 859++E0DF 68           		db	$0737-$06cf
 860++E0E0 6D           		db	$07a4-$0737
 861++E0E1 75           		db	$0819-$07a4
 862++E0E2 7B           		db	$0894-$0819
 863++E0E3 83           		db	$0917-$0894
 864++E0E4 8A           		db	$09a1-$0917
 865++E0E5 92           		db	$0a33-$09a1
 866++E0E6 9C           		db	$0acf-$0a33
 867++E0E7 A4           		db	$0b73-$0acf
 868++E0E8 AF           		db	$0c22-$0b73
 869++E0E9 B8           		db	$0cda-$0c22
 870++E0EA 0E 08        		db	$0704*2/256,low ($0704*2)
 871++E0EC 6A           		db	$076e-$0704
 872++E0ED 72           		db	$07e0-$076e
 873++E0EE 78           		db	$0858-$07e0
 874++E0EF 7E           		db	$08d6-$0858
 875++E0F0 86           		db	$095c-$08d6
 876++E0F1 90           		db	$09ec-$095c
 877++E0F2 96           		db	$0a82-$09ec
 878++E0F3 A0           		db	$0b22-$0a82
 879++E0F4 AA           		db	$0bcc-$0b22
 880++E0F5 B4           		db	$0c80-$0bcc
 881++E0F6 BE           		db	$0d3e-$0c80
 882++E0F7 0F C0        		db	$07e0*2/256,low ($07e0*2)
 883++E0F9 78           		db	$0858-$07e0
 884++E0FA 88           		db	$08e0-$0858
 885++E0FB 80           		db	$0960-$08e0
 886++E0FC 90           		db	$09f0-$0960
 887++E0FD 98           		db	$0a88-$09f0
 888++E0FE A0           		db	$0b28-$0a88
 889++E0FF B0           		db	$0bd8-$0b28
 890++E100 A8           		db	$0c80-$0bd8
 891++E101 E0           		db	$0d60-$0c80
 892++E102 B0           		db	$0e10-$0d60
 893++E103 E8           		db	$0ef8-$0e10
 894++E104
 895++E104              ;------------------------------------------------------------------------------
 896++E104              ; channel data offsets
 897++E104
 898++E104              CHP_PsInOr	equ	0
 899++E104              CHP_PsInSm	equ	1
 900++E104              CHP_CrAmSl	equ	2
 901++E104              CHP_CrNsSl	equ	3
 902++E104              CHP_CrEnSl	equ	4
 903++E104              CHP_TSlCnt	equ	5
 904++E104              CHP_CrTnSl	equ	6
 905++E104              CHP_TnAcc	equ	8
 906++E104              CHP_COnOff	equ	10
 907++E104              CHP_OnOffD	equ	11
 908++E104              CHP_OffOnD	equ	12	; IX for PTDECOD here (+12)
 909++E104              CHP_OrnPtr	equ	13
 910++E104              CHP_SamPtr	equ	15
 911++E104              CHP_NNtSkp	equ	17
 912++E104              CHP_Note	equ	18
 913++E104              CHP_SlToNt	equ	19
 914++E104              CHP_Env_En	equ	20
 915++E104              CHP_Flags	equ	21
 916++E104              CHP_TnSlDl	equ	22	; Enabled - 0, SimpleGliss - 2
 917++E104              CHP_TSlStp	equ	23
 918++E104              CHP_TnDelt	equ	25
 919++E104              CHP_NtSkCn	equ	27
 920++E104              CHP_Volume	equ	28
 921++E104
 922++E104              AR_TonA		equ	0
 923++E104              AR_TonB		equ	2
 924++E104              AR_TonC		equ	4
 925++E104              AR_Noise	equ	6
 926++E104              AR_Mixer	equ	7
 927++E104              AR_AmplA	equ	8
 928++E104              AR_AmplB	equ	9
 929++E104              AR_AmplC	equ	10
 930++E104              AR_Env		equ	11
 931++E104              AR_EnvTp	equ	13
 932++E104              AR_Size		equ	14
 933++E104
 934++E104
 935++E104              ;------------------------------------------------------------------------------
 936++E104              ; variables are 541 bytes long
 937++E104              vars
 938++E104 00 00 00...  ChanA		ds	29
 939++E121 00 00 00...  ChanB		ds	29
 940++E13E 00 00 00...  ChanC		ds	29
 941++E15B
 942++E15B
 943++E15B              ; GlobalVars
 944++E15B 00           DelyCnt		db	0
 945++E15C 00 00        CurESld		dw	0
 946++E15E 00           CurEDel		db	0
 947++E15F              ns_base_AddToNs
 948++E15F 00           ns_base		db	0
 949++E160 00           AddToNs		db	0
 950++E161
 951++E161
 952++E161              AYREGS		equ	$
 953++E161              Ampl		equ	AYREGS+AR_AmplC
 954++E161
 955++E161 00 00 00...  VT_		ds	256		; Volume Table
 956++E261 00 00 00...  NT_		ds	192		; Note Table
 957++E321
 958++E321              EnvBase		equ	VT_+14
 959++E321              T1_		equ	VT_+16		; Tone tables data depacked here
 960++E321              T_OLD_1		equ	T1_
 961++E321              T_OLD_2		equ	T_OLD_1+24
 962++E321              T_OLD_3		equ	T_OLD_2+24
 963++E321              T_OLD_0		equ	T_OLD_3+2
 964++E321              T_NEW_0		equ	T_OLD_0
 965++E321              T_NEW_1		equ	T_OLD_1
 966++E321              T_NEW_2		equ	T_NEW_0+24
 967++E321              T_NEW_3		equ	T_OLD_3
 968++E321
 969++E321              VAR0END		equ	T1_		; init zeroes from VARS to VAR0END-1
 970++E321
 971++E321
 972++E321              ;------------------------------------------------------------------------------
 973++E321              ; music in ProTracker 3.6 (Vortex Tracker II) format (without 99 byte header)
 974++E321              songdata
 975++E321              MDLADDR		equ	songdata-99
 976++E321
 977++E321              		incbin "final.pt3",99
 978++FD4D
# file closed: ./demo/msx/pt3extra.a80
 148+ FD4D              _rend:   = $
 149+ FD4D              _radd:   = $
 150+ FD4D                       PAGE _dpag
 151+ FD4D                       ORG  _dend
 152+ B129
 153+ B129              msx.ini:  = music_init
 154+ B129              msx.run:  = music_play
 155+ B129
 156+ B129              ;msx.ini:  = dummy
 157+ B129              ;msx.run:  = dummy
 158+ B129
 159+ B129                       PAGE _dpag
 160+ B129                       ORG  _dend
 161+ B129
 162+ B129                       DISPLAY "Resource page:",_rpg and 7," Free:", 0x10000-_rend
 163+ B129                       PAGE _dpag
 164+ B129                       ORG  _dend
 165+ B129
 166+ B129              _rpg:   = #50
 167+ B129              _radd:  = p0free
 168+ B129              _rend:  = _radd
 169+ B129
 170+ B129                       DISPLAY "Resource page:",_rpg and 7," Free:", 0x10000-_rend
 171+ B129
 172+ B129                       PAGE _dpag
 173+ B129                       ORG  _dend
 174+ B129
 175+ B129              ;-------
 176+ B129              ;         rload  KRscHdfFnt2, KtDat, o6, 0, hdffnt1 , "fontsql/plain1.hdf"
 177+ B129              ;         rload  KRscHdfFnt1, KtDat, o6, 0, hdffnt2 , "fontsql/nsanserif16_first.hdf"
 178+ B129              ;         rload  KRscHdfFnt1, KtDat, o6, 0, hdffnt2 , "fontsql/small3_first.hdf"
 179+ B129
 180+ B129              ;         rload   KRscHybrid     ,KtBin ,o0 ,temp3k ,0 ,"demo/gfx/hdi/hybrid.hdi.zx7"
 181+ B129              ;         rload   KRscJupiter    ,KtBin ,o0 ,temp3k ,0 ,"demo/gfx/hdi/jupiter.hdi.zx7"
 182+ B129              ;         rload   KRscJupiter_Bw ,KtBin ,o0 ,temp3k ,0 ,"demo/gfx/hdi/jupiter_bw.hdi.zx7"
 183+ B129              ;         rload   KRscOddysey_1  ,KtBin ,o0 ,temp3k ,0 ,"demo/gfx/hdi/oddysey_1.hdi.zx7"
 184+ B129              ;         rload   KRscStation1   ,KtBin ,o0 ,temp3k ,0 ,"demo/gfx/hdi/station1.hdi.zx7"
 185+ B129              ;         rload   KRscEye        ,KtBin ,o0 ,temp3k ,0 ,"demo/gfx/hdi/Eye.hdi.zx7"
 186+ B129              ;         rload   KRscPluto      ,KtBin ,o0 ,temp3k ,0 ,"demo/gfx/hdi/pluto.hdi.zx7"
 187+ B129
 188+ B129              ;         rload   KRscRedplanet  ,KtBin ,o0 ,temp3k ,0 ,"demo/gfx/hdi/redplanet.hdi.zx7"
 189+ B129              ;         rload   KRscPlanetLP   ,KtBin, o0, temp3k , 0, "demo/gfx/hdi/planet_pink_flip.hdi.zx7"
 190+ B129
 191+ B129              ;         rload   KRscTrainBack  ,KtBin, o0, _tr_back  , 0 ,"demo/gfx/hdi/city_back.hdi.zx7"
 192+ B129              ;         rload   KRscCompzoom   ,KtBin, o0, #4000     , 0 ,"demo/gfx/screens/computer_zoom.bin.zx7"
 193+ B129              ;         display "**** ",lback," ",temp3k.end
 194+ B129
 195+ B129              ;         rload  KRscFzxFnt1, KtDat, _rpg, 0, ffnt1   , "fonts/belegost3.fzx"
 196+ B129              ;         rload  KRscFzxFnt2, KtDat, _rpg, 0, ffnt2   , "fonts/Aribeth6.fzx"
 197+ B129              ;         rload  KRscChrFnt1, KtDat, _rpg, 0, scroll_font, "fonts/AlmostCharcoalWider.fnt"
 198+ B129
 199+ B129              ;         rload  KRscFzxFnt4, KtDat, _rpg, 0, ffnt4   , "fonts/consul1.fzx"
 200+ B129              ;         rload  KRscFzxFnt4, KtDat, _rpg, 0, ffnt4   , "fonts/up&up.fzx"
 201+ B129
 202+ B129              ;         rload  KRscFzxFnt4, KtDat, _rpg, 0, ffnt4   , "fonts/Soxz.fzx"
 203+ B129              ;         rload  KRscFzxFnt4, KtDat, _rpg, 0, ffnt4   , "fonts/ste-aff.fzx"
 204+ B129              ;         rload  KRscFzxFnt4, KtDat, _rpg, 0, ffnt4   , "fonts/Twombly.fzx"
 205+ B129              ;         rload  KRscFzxFnt4, KtDat, _rpg, 0, ffnt4   , "fonts/Programmer.fzx"
 206+ B129              ;         rload  KRscFzxFnt4, KtDat, _rpg, 0, ffnt4   , "fonts/Swiss.fzx"
 207+ B129
 208+ B129              ;         rload  KRscHdfFnt2, KtDat, o6, 0, hdffnt1 , "fontsql/excellent_first.hdf"
 209+ B129              ;         rload  KRscHdfFnt3, KtDat, o6, 0, hdffnt3 , "fontsql/small3_first.hdf"
 210+ B129
 211+ B129              ;         rload  KRscGramon,  KtBin, o0, #4000, #4000, "_tools/gramon.bin.zx7"
 212+ B129
 213+ B129              ;         rinclude "libs/egl_scroll.a80"
 214+ B129              ;        display "****", _apl1, _apl2
 215+ B129              ;         rload  KRscNostSide, KtBin, o0, temp3k,0, "demo/gfx/hdi/nostromo_side.hdi.zx7"        ; unused
 216+ B129              ;         rinclude "libs/egl_scroll.a80"
 217+ B129              ;         rload   KRscExplore    ,KtBin, o0, temp3k,     0 ,"demo/gfx/hdi/prometheus_explorer_zx_algn.hdi.zx7"
 218+ B129
 219+ B129              ; load binary file, it is not executable and no label defined
 220+ B129 ~            /*
 221+ B129 ~                     IFDEF _multabXls
 222+ B129 ~                       rload   KRscMultab     ,KtBin ,o1 ,temp3k ,#c000 ,"demo/rotoid/multab_round_rev.zx7"
 223+ B129 ~                     ENDIF
 224+ B129 ~                     IFDEF _multabBmp
 225+ B129 ~                       rload   KRscMultab     ,KtBin ,o1 ,temp3k ,#c000 ,"demo/rotoid/multab_bitmap.zx7"
 226+ B129 ~                     ENDIF
 227+ B129 ~            */
 228+ B129              ; multab is special case using new unpacktmp - decompress from temp buffer. Destination address is in "run" field
 229+ B129
 230+ B129              ;         rload   KRscVVoid     ,KtBin ,o0 ,temp3k      , 0, "demo/gfx/hdi/void/void_vertical_pos.hdi.zx7"
 231+ B129              ;         rload   KRscPlanet    ,KtBin ,o0 ,temp3k      , 0, "demo/gfx/hdi/planet.hdi.zx7"
 232+ B129
# file closed: Q:\Development\Dev-ZX\demo_cats\libs/rsc_load.a80
 560  B129
 561  B129              ;        display "rotoid core start :",rotoid.init, " len:",$-rotoid._rt
 562  B129
 563  B129                       savesna "main.sna",start
 564  B129                       display "main exec start:",start
 565  B129
 566  B129                       page    0
 567  B129              ;         savebin "bin/p0.bin",#c000,#4000
 568  B129                       savebin "bin/main.bin",start,#10000-start
 569  B129              ;         savebin "bin/p2s.bin",start,#c000-start
 570  B129                       page    1
 571  B129                       savebin "bin/p1.bin",#c000,#4000
 572  B129              ;         page    2
 573  B129              ;         savebin "bin/p2.bin",#c000,#4000
 574  B129                       page    3
 575  B129                       savebin "bin/p3.bin",#c000,#4000
 576  B129                       page    4
 577  B129                       savebin "bin/p4.bin",#c000,#4000
 578  B129              ;         page    5
 579  B129              ;         savebin "bin/p5.bin",#c000,#4000
 580  B129                       page    6
 581  B129                       savebin "bin/p6.bin",#c000,#4000
 582  B129                       page    7
 583  B129                       savebin "bin/p7.bin",#c000,#4000
 584  B129
 585  B129
 586  B129              ;        MCall screen.invader1a
 587  B129              ;        MCall screen.invader3
 588  B129
 589  B129 ~            /*
 590  B129 ~                     Frame #4,0
 591  B129 ~                      ExeRun  egl.clearatr,bpx_intro
 592  B129 ~                     EndF
 593  B129 ~
 594  B129 ~                     MCall screen.invader1b
 595  B129 ~            */
 596  B129 ~            /*
 597  B129 ~                     Frame #300,0
 598  B129 ~                      ExeRun  vfade.run1, vfade.data
 599  B129 ~                      ExeRun  vfade.line, vfade.lnBadpix
 600  B129 ~            ;          ExeWait egl.attwin, bpx_intrd, #70
 601  B129 ~            ;         EndF
 602  B129 ~                     EndAtFrame #a0
 603  B129 ~
 604  B129 ~                     Frame #4,0
 605  B129 ~                      ExeRun  egl.clearatr,bpx_intro
 606  B129 ~                     EndF
 607  B129 ~
 608  B129 ~            ;         MCall screen.badpixel2
 609  B129 ~
 610  B129 ~                     Frame #100,0
 611  B129 ~                      ExeRun  vfade.run1, vfade.data
 612  B129 ~                      ExeRun  vfade.seqRun, vfade.sqBadpix
 613  B129 ~                     EndF
 614  B129 ~            */
 615  B129
 616  B129              ; darkness text view
 617  B129 ~            /*
 618  B129 ~                     MCall screen.darkness                        ; test of fzx print routine
 619  B129 ~                     Frame #280,0
 620  B129 ~                      ExeRun  vfade.run1, vfade.data
 621  B129 ~                      ExeRun  vfade.line, vfade.lnDark
 622  B129 ~                      ExeWait egl.clearatr, atrDarkness1,  #00+#28
 623  B129 ~                      ExeWait egl.clearatr, atrDarkness2,  #60+#28
 624  B129 ~                      ExeWait egl.clearatr, atrDarkness3,  #c0+#28
 625  B129 ~                      ExeWait egl.clearatr, atrDarkness4, #120+#28
 626  B129 ~                     EndF
 627  B129 ~
 628  B129 ~                     Frame 50,0
 629  B129 ~                      ExePeriodic egl.attwin  , atrDarknessw, #100
 630  B129 ~                     EndF
 631  B129 ~
 632  B129 ~                     Frame #80,0
 633  B129 ~                      ExeRun  egl.clearatr, atrDarknessf
 634  B129 ~                      ExeRun  egl.attwin  , atrDarknessw2
 635  B129 ~                      ExeWait egl.attwin  , atrDarknessw3, #70
 636  B129 ~                     EndF
 637  B129 ~            */
 638  B129
 639  B129              ; narcissus helmet
 640  B129 ~            /*
 641  B129 ~                     MCall screen.helmet
 642  B129 ~                     Frame #280,0
 643  B129 ~                      ExeRun  vfade.run1, vfade.data
 644  B129 ~                      ExeRun  vfade.seqRun, vfade.sqHelmet
 645  B129 ~                      ExeWait egl.atrFade   , #5800, #270
 646  B129 ~                      ExeWait egl.atrFadeP7 , #d800, #270
 647  B129 ~                     EndF
 648  B129 ~            */
 649  B129              ; narcissus computer wake up
 650  B129 ~            /*
 651  B129 ~                     MCall screen.computer
 652  B129 ~                     Frame #80,0
 653  B129 ~                      ExeRun  vfade.run1, vfade.data
 654  B129 ~                      ExeRun  vfade.line, vfade.lnComp1
 655  B129 ~                     EndF
 656  B129 ~
 657  B129 ~                     Frame #130,0
 658  B129 ~                      ExeRun  vfade.run1, vfade.data
 659  B129 ~                      ExeRun  vfade.line, vfade.lnComp2
 660  B129 ~                     EndF
 661  B129 ~
 662  B129 ~                   Frame #ffff,0
 663  B129 ~                    ExeRun egl.border,#0505
 664  B129 ~                    ExeRun egl.border,#0501
 665  B129 ~                    ExeZ80start #0120
 666  B129 ~                       ld a,r
 667  B129 ~                       out (#fe),a
 668  B129 ~
 669  B129 ~                       ld  c,xh
 670  B129 ~            2          ld  b,xl
 671  B129 ~            1          djnz 1B
 672  B129 ~                       dec  c
 673  B129 ~                       jr   nz,2B
 674  B129 ~
 675  B129 ~                       xor  a
 676  B129 ~                       out  (#fe),a
 677  B129 ~                    ExeZ80end
 678  B129 ~                   EndF
 679  B129 ~                   Restart
 680  B129 ~
 681  B129 ~            rtSubtitle:
 682  B129 ~            .frm:    Frame #220,0
 683  B129 ~                       ExeSwapIX outix,o5+8,o7,1,1,0
 684  B129 ~            .fin:      ExeWait   egl.attwin, atrSubFadeIn , #100
 685  B129 ~            .fot:      ExeWait   egl.attwin, atrSubFadeOut, #200
 686  B129 ~                     EndF
 687  B129 ~                     Frame #02, 0
 688  B129 ~                       ExeRun    modrotoidpage , tit_win + pxwin.page
 689  B129 ~                       ExeRun    egl.pixwin, tit_win
 690  B129 ~                     EndF
 691  B129 ~                     Idle
 692  B129 ~
 693  B129 ~            modrotoidpage:
 694  B129 ~                     jr      nc,.p
 695  B129 ~                     ld      a,(rotoid.run.vpage+1)
 696  B129 ~                     ld      (ix+0),a
 697  B129 ~                     xor     #0a
 698  B129 ~                     ld      (.p+1),a
 699  B129 ~                     ret
 700  B129 ~            .p:      ld      a,#aa
 701  B129 ~                     ld      (ix+0),a
 702  B129 ~                     ret
 703  B129 ~
 704  B129 ~            rtComputer:
 705  B129 ~                     Frame #80,0
 706  B129 ~                      ExeRun  vfade.run1, vfade.data
 707  B129 ~                      ExeRun  vfade.line, vfade.lnComp1
 708  B129 ~                      ExeRun  vfade.seqRun, vfade.sqComp
 709  B129 ~                     EndF
 710  B129 ~                     Idle
 711  B129 ~
 712  B129 ~            rtComputer2:
 713  B129 ~                     Frame #40,0
 714  B129 ~                      ExeRun  egl.clearatr, atrComp.vram
 715  B129 ~                     EndF
 716  B129 ~                     Idle
 717  B129 ~
 718  B129 ~            rtAlien:
 719  B129 ~                     Frame #90,0                          ; #60 is height of pattern bitmap = loop twice
 720  B129 ~                      ExeRun  vfade.run2, 0
 721  B129 ~                     EndF
 722  B129 ~                     Idle
 723  B129 ~
 724  B129 ~            rtHelmet:
 725  B129 ~                     Frame #280,0
 726  B129 ~                      ExeRun  vfade.run1, vfade.data
 727  B129 ~                      ExeRun  vfade.seqRun, vfade.sqHelmet
 728  B129 ~            ;          ExeWait egl.atrFade   , #5800, #270
 729  B129 ~            ;          ExeWait egl.atrFadeP7 , #d800, #270
 730  B129 ~                     EndF
 731  B129 ~                     Idle
 732  B129 ~
 733  B129 ~            a=50
 734  B129 ~            b=58
 735  B129 ~            c=66
 736  B129 ~            d=200
 737  B129 ~            rtVtxtOver:
 738  B129 ~                     Frame #a0,0
 739  B129 ~                      ExeWait egl.attwin, atrVtxt6, a
 740  B129 ~                      ExeWait egl.vprint.run, vpEarth1, a
 741  B129 ~
 742  B129 ~                      ExeWait egl.attwin, atrVtxt7, b
 743  B129 ~                      ExeWait egl.vprint.run, vpEarth2, b
 744  B129 ~
 745  B129 ~                      ExeWait egl.attwin, atrVtxt8, c
 746  B129 ~                      ExeWait egl.vprint.run, vpCredits, c
 747  B129 ~
 748  B129 ~            ;          ExeWait egl.clearatr, atrVtxtFlash,d
 749  B129 ~                     EndF
 750  B129 ~                     Idle
 751  B129 ~
 752  B129 ~            a=50
 753  B129 ~            b=58
 754  B129 ~            c=66
 755  B129 ~            d=100
 756  B129 ~            rtVtxt:
 757  B129 ~                     Frame 150,0
 758  B129 ~                      ExeWait egl.attwin, atrVtxt1, a
 759  B129 ~                      ExeWait egl.vprint.run, vpStation, a
 760  B129 ~
 761  B129 ~                      ExeWait egl.attwin, atrVtxt2, b
 762  B129 ~                      ExeWait egl.vprint.run, vpDoom, b
 763  B129 ~
 764  B129 ~                      ExeWait egl.attwin, atrVtxt3, c
 765  B129 ~                      ExeWait egl.vprint.run, vpSun, c
 766  B129 ~
 767  B129 ~                      ExeWait egl.clearatr, atrVtxtFlash,d
 768  B129 ~                     EndF
 769  B129 ~                     Idle
 770  B129 ~
 771  B129 ~            a=50
 772  B129 ~            b=60
 773  B129 ~            d=#f0
 774  B129 ~
 775  B129 ~            rtEarth:
 776  B129 ~                     Frame #100,0
 777  B129 ~                      ExeWait egl.attwin, atrVtxt4, a
 778  B129 ~                      ExeWait egl.vprint.run, vpEarth1, a
 779  B129 ~
 780  B129 ~                      ExeWait egl.attwin, atrVtxt5, b
 781  B129 ~                      ExeWait egl.vprint.run, vpEarth2, b
 782  B129 ~
 783  B129 ~            ;          ExeWait egl.clearatr, atrVtxtFlash,d
 784  B129 ~                     EndF
 785  B129 ~                     Idle
 786  B129 ~
 787  B129 ~
 788  B129 ~            rtTest:                                           ; test of vfade
 789  B129 ~                     Frame #ffff,0
 790  B129 ~                      ExeRun  vfade.run2  , 0
 791  B129 ~                     EndF
 792  B129 ~
 793  B129 ~                     Frame #ffff,0
 794  B129 ~                      ExeRun  vfade.run1  , vfade.data
 795  B129 ~                      ExeRun  vfade.seqRun, vfade.sqTitles
 796  B129 ~                     EndF
 797  B129 ~
 798  B129 ~
 799  B129 ~            rtBigTitle:
 800  B129 ~                     Frame #d0,0
 801  B129 ~                      ExeRun   vfade.run1  , vfade.data
 802  B129 ~                      ExeRun   vfade.line  , vfade.lnTitles
 803  B129 ~                      ExeRun   egl.attwin  , atrTitFadeIn
 804  B129 ~            ;          ExeRun   egl.border, #0101
 805  B129 ~                     EndF
 806  B129 ~
 807  B129 ~                     Frame #20,0
 808  B129 ~                      ExeRun  egl.attwin  , atrTitFadeOut
 809  B129 ~            ;          ExeRun  egl.border, #0101
 810  B129 ~                     EndF
 811  B129 ~                     Idle
 812  B129 ~
 813  B129 ~                   IFUSED playIntro
 814  B129 ~            ;------
 815  B129 ~            ; invaders logo
 816  B129 ~                    Wait  #50
 817  B129 ~
 818  B129 ~                    MCall screen.invader3
 819  B129 ~                    Frame #30,0
 820  B129 ~                     ExeRun  vfade.run1, vfade.data
 821  B129 ~                     ExeRun  vfade.line, vfade.lnInvader
 822  B129 ~                    EndF
 823  B129 ~                    MCall screen.invader3b
 824  B129 ~            ;        Wait #40
 825  B129 ~
 826  B129 ~            ;        MCall     egl.atrFadeHalf
 827  B129 ~
 828  B129 ~            ;        Frame #10,0
 829  B129 ~            ;          ExeRun  egl.atrFade, #5800
 830  B129 ~            ;        EndF
 831  B129 ~
 832  B129 ~            ; rotoid engine logo
 833  B129 ~                    Wait #30
 834  B129 ~
 835  B129 ~                    MCall screen.engine
 836  B129 ~                    Wait #30
 837  B129 ~
 838  B129 ~                    MCall     egl.atrFadeHalf
 839  B129 ~
 840  B129 ~            ;        Frame #10,0
 841  B129 ~            ;          ExeRun  egl.atrFade, #5800
 842  B129 ~            ;        EndF
 843  B129 ~
 844  B129 ~            ; void logo
 845  B129 ~                    Wait #30
 846  B129 ~
 847  B129 ~                    MCall screen.voidlogo
 848  B129 ~                    Wait #50
 849  B129 ~
 850  B129 ~                    MCall     egl.atrFadeHalf
 851  B129 ~
 852  B129 ~            ; text of mr.kew
 853  B129 ~                    Wait #30
 854  B129 ~
 855  B129 ~                    MCall screen.text
 856  B129 ~
 857  B129 ~                    Wait #60
 858  B129 ~
 859  B129 ~                    Frame #20,0
 860  B129 ~                       ExeRun    egl.clearatr, atrVoidtxt
 861  B129 ~                    EndF
 862  B129 ~
 863  B129 ~                    Wait #60
 864  B129 ~
 865  B129 ~                    Frame #20,0
 866  B129 ~            ;           ExeSwapIX outix_persist,o5+8,o7,1,1,0
 867  B129 ~                       ExeSwapIX  poke, set_vram0, set_vram1, 1,1,0
 868  B129 ~                    EndF
 869  B129 ~
 870  B129 ~                    Wait #60
 871  B129 ~
 872  B129 ~                    Frame #40,0
 873  B129 ~            ;           ExeSwapIX outix_persist,o5+8,o7,1,1,0
 874  B129 ~                       ExeSwapIX  poke, set_vram0, set_vram1, 1,1,0
 875  B129 ~                    EndF
 876  B129 ~
 877  B129 ~                    Wait #80
 878  B129 ~
 879  B129 ~                    Frame #50,0
 880  B129 ~            ;           ExeSwapIX outix_persist,o5+8,o7,1,4,0
 881  B129 ~                       ExeSwapIX  poke, set_vram0, set_vram1, 1,4,0
 882  B129 ~                    EndF
 883  B129 ~
 884  B129 ~                    MCall     egl.atrFadeHalf
 885  B129 ~
 886  B129 ~            ; void city screen
 887  B129 ~
 888  B129 ~                    MCall screen.void
 889  B129 ~                    Frame #c0,0
 890  B129 ~            ;           ExeSwapIX outix_persist,o5+8,o7,1,1,0     ; blink and fade in
 891  B129 ~                       ExeSwapIX  poke, set_vram0, set_vram1, 1,1,0
 892  B129 ~                       ExeRun    egl.clearatr, atrVoidscrFI
 893  B129 ~                    EndF
 894  B129 ~
 895  B129 ~                    Frame #10,0
 896  B129 ~                       ExeRun    egl.clearatr, atrVoidscrFO
 897  B129 ~                    EndF
 898  B129 ~                   ENDIF
 899  B129 ~            ;------------end of intro
 900  B129 ~
 901  B129 ~
 902  B129 ~            */
 903  B129
# file closed: Q:\Development\Dev-ZX\demo_cats\main.a80
