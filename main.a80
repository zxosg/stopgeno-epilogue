; Main demo code; Startdate: 25.06.2018; compiler definitions        DEVICE ZXSPECTRUM128        LABELSLIST "main.sym"; Build        DEFINE KMachine 0           ; 0.. 128k, 1.. +3, 2.. Pentagon; kernel defines        DEFINE  outfd               ; use OUT (FD),A instead of OUT (C),A. Faster due to PUSH BC,POP BC        DEFINE  sinclair            ; sinclair = pages using #50 mask, undefined #10; define sample ay player type (nibble packed)        DEFINE aypck; development variables;        DEFINE debug               ; special option to enable border and other debug features        DEFINE debuglevel 0        ;DEFINE _erasedebug; rotoid multab config        DEFINE _multabBmp          ; multab expanded bitmap; enable or disable segment editor at startup;        DEFINE seg_ed;        DEFINE sce_ed; demo switches;        DEFINE vfadeTest;        DEFINE playIntro        DEFINE d_scrplay          ; compile screenplay - _rt_scenes (save memory)        DEFINE playmusic; load structures, macros, defines        include "kernel/kern_def.a80"        include "kernel/kern_macros.a80";-- lib defines        include "libs/keys_def.a80"        include "libs/editor_def.a80"        include "libs/osg_lualib.a80"        include "libs/fzx_drv_def.a80";-- demo effect defines        include "libs/egl_def.a80";        include "demo/light/3dlight_def.a80"        include "demo/rotoid/rotoid_def.a80"        include "demo/screenplay/demo_sync.a80"        ORG    #5b00;-- bufferstemp3k: ds     #0f00.end:swap:   ds      #100                     ; free buffer for memory operations;-- bin preparation;        include "demo/darkness.a80"; init code and interruptstart:        include "kernel/kern_exec.a80"   ; kernel init is executed, follows "exp.main" table of calls prior enabling interrupt        ORG     lowmem                   ; lowmem - resulting address from kernel init; ------------------------------------------------------------------------------; this code is called via kernel exeptr service; list of executed calls is in the table "exp" ended with dw 0setup:        border  0        ld      hl,#5800        ld      de,#5801        ld      bc,#2ff        ld      (hl),l        ldir        ld      hl,exe.demo                     ; table of demo script        call    execmd.init        ld      hl,exl.interrupt                ; system exec list (system services like music, keyboard)        ld      (ExeSetExl),hl;        call    displayMachine        ret;-- editor core libs;        include "libs/keys.a80"         ; keyscan routine with debouncer;        include "libs/editor16b.a80"    ; effect editor 16bit capable;--- e2 demo routines        include "libs/egl.a80"        include "libs/rsc.a80";--- demo data        include "demo/demo_dat.a80";        include "demo/demo_txt.a80"lowend: equ     $        display "lowend:",lowendmusic:        IFDEF playmusic.init:  ld      a,o7        page_a;        ld      hl,music_space.initaddr        jp      msx.ini;        ret.play:  ld      a,(@ivram)        or      o7                        ; msx page        page_am        debug_border 2        call    msx.run        debug_border 0        ret        ELSE.play:.init:   ret        ENDIF;-------------------------------------------------------------------------------screen:.part2:        ld      hl,rotoid.scrplay.part2        call    rotoid.setScene.init        ret.blueprint:         ld       a,o0+8         page_a         rscUnpack KRscBlueprint, res_tab         WaitF  syncid_008                ;Blueprint fade in         call     egl.atrFadeInFull         callix   egl.attwin.init, atrBP1         callix   egl.attwin.init, atrBP2         callix   egl.attwin.init, atrBP3         callix   egl.attwin.init, atrBP4         callix   egl.attwin.init, atrBP5         callix   egl.attwin.init, atrBP6;--         WaitF  syncid_010                ;Texline 1         callix   rotoid.fillRct, rcrBP1         callix   egl.attwin.run, atrBP1         rscRunIX KRscFzxIni, res_tab, fzblueprint11        rscRunIX KRscFzxRun, res_tab, fzblueprint1         jr       nc,1B1        halt         exx         callix   egl.attwin.run, atrBP1         exx         jr       nc,1B;--         WaitF  syncid_018                ;Texline 2         callix   rotoid.fillRct, rcrBP2         callix   egl.attwin.run, atrBP2         rscRunIX KRscFzxIni, res_tab, fzblueprint21        rscRunIX KRscFzxRun, res_tab, fzblueprint2         jr       nc,1B1        halt         exx         callix   egl.attwin.run, atrBP2         exx         jr       nc,1B;--         WaitF  syncid_020                ;Texline 3         callix   rotoid.fillRct, rcrBP3         callix   egl.attwin.run, atrBP3         rscRunIX KRscFzxIni, res_tab, fzblueprint31        rscRunIX KRscFzxRun, res_tab, fzblueprint3         jr       nc,1B1        halt         exx         callix   egl.attwin.run, atrBP3         exx         jr       nc,1B;--         WaitF  syncid_028                ;Texline 4         callix   rotoid.fillRct, rcrBP4         callix   egl.attwin.run, atrBP4         rscRunIX KRscFzxIni, res_tab, fzblueprint41        rscRunIX KRscFzxRun, res_tab, fzblueprint4         jr       nc,1B1        halt         exx         callix   egl.attwin.run, atrBP4         exx         jr       nc,1B;--         WaitF  syncid_030                ;Texline 5         callix   rotoid.fillRct, rcrBP5         callix   egl.attwin.run, atrBP5         rscRunIX KRscFzxIni, res_tab, fzblueprint51        rscRunIX KRscFzxRun, res_tab, fzblueprint5         jr       nc,1B1        halt         exx         callix   egl.attwin.run, atrBP5         exx         jr       nc,1B;--         WaitF  syncid_038                ;Texline 6         callix   rotoid.fillRct, rcrBP6         callix   egl.attwin.run, atrBP6         rscRunIX KRscFzxIni, res_tab, fzblueprint61        rscRunIX KRscFzxRun, res_tab, fzblueprint6         jr       nc,1B1        halt         exx         callix   egl.attwin.run, atrBP6         exx         jr       nc,1B         WaitF    syncid_040                ;fadeout         callix   egl.attwin.init, atrBP6h         ld       b,501        exx         halt         ld       a,(#5800)      .3 rrca         and      #7         out      (#fe),a         callix   egl.atrFade, #5800         callix   egl.attwin.run, atrBP6h         exx         djnz     1B         callix   mmu.clsix, #00         ret.texthighlight:         ;hl-address         ;b-width, c-height         ;a-color         ld       de,#20.l2:     push     bc         ld       c,l.l1:     ld       (hl),a         inc      l         djnz     .l1         ld       l,c         pop      bc         add      hl,de         dec      c         jr       nz,.l2         ret.endtitles:;         rscUnpack KRscTitles, res_tab         call      egl.atrFadeFull         rscLoad   KRscTitles, res_tab         mmucpy    temp3k, fzTitles2,#400*3,o1,o1                               ; reserve, text has 2431         HoldVramAfterInterrupt         call      vscroll.init         ld        hl,exe_titles         call      execmd.init         rscRunIX KRscFzxIni, res_tab, fzTitles11        halt         rscRunIX KRscFzxRun, res_tab, fzTitles1         ret       m         jr        nc,1B2        ld        a,(vscroll.toggle)         and       a         jr        z,2B         xor       a         ld        (vscroll.toggle),a         halt         call      vscroll.clearline         jr        1B.outline:         ld        a,(@page)         push      af         ld        a,o7         page_c         ld        a,KScrollOr         call      egl.copyRight         ld        a,KScrollOr         call      egl.copyLeft         ld        a,_orhl         ld        hl,#4100         ld        de,#c000         call      egl.copyFunc.HLDE         ld        a,_orhl         ld        hl,#4000         ld        de,#c100         call      egl.copyFunc.HLDE.lf:     ld        a,_orhl         ld        hl,#4000         ld        de,#c000         call      egl.copyFunc.HLDE         pop       af         page_c         ret;-------------------------------------------------------------------------------segment_editor_init:        IFDEF seg_ed        callix editor.init, segment_ed        ld     a,_anda        ld     (rotoid.run.scene),a        ENDIF        ret;-------------------------------------------------------------------------------scene_editor_init:        IFDEF sce_ed        callix editor.init, scene_ed        ld     a,_anda        ld     (rotoid.run.scene),a        ENDIF        ret;-------------------------------------------------------------------------------delayix:        ld      c,xl        ld      b,xh        include "libs/delay.a80"          ; Tdelay: wait bc T-cycles (including call; bc>=141);-------------------------------------------------------------------------------; endtitles code to unpack bitmapunpackHdi:        push   bc        ld     a,c        ld     (pdrwHdi.posx),a        xor    a                ; lock drawing of bitmap  (egl.drawLineHdi)        ld     (isUnpackedHdi),a        ld     (pdrwHdi.cury),a        ld     c,a              ; x=0        ld     b,56*3-5         ; pos y        call   PixCY2Adr:        ld     (pdrwHdi.vram),hl        pop    bc        ld     a,b              ; b=rsc        ld     de,res_tab       ; a=resource number, de=resource table        call   rsc.getptr       ; ix=resource table pointer        ld     de,temp3k        ; de=destination        call   rsc.unpack.dest  ; force destination of decompression        ld     a,1              ; unlock drawing of bitmap        ld     (@isUnpackedHdi),a        retinvHDI:        ld     hl,temp3k        jp     rotoid.invMobHDI.headless;-----------------------------------------------------pokeVram:            ld     a,(rotoid.run.vpage+1)            page_am            call   poke            ld     a,(page)            page_am            retpokeWVram:            ld     a,(rotoid.run.vpage+1)            page_am            call   pokew            ld     a,(page)            page_am            ret;-----------------------------------------------------pdrwHdi:.vram:      dw     #4000.pgfx:      dw     temp3k.mode:      db     #81              ; 0=blit, 1=or, 2=xor.posx:      db     0                ; x-offset (can be negative and over #1f).cury:      db     0isUnpackedHdi: db  0                ; variable for end titles. 0=bitmap NOT ready;-----------------------------------------------------; poke definitionsinfinite_frm:    dw  ExeFrames : db #ffreset_frames:    dw  frames    : dw #0000set_vram0:       dw  ivram     : db 0set_vram1:       dw  ivram     : db 8; launchpad blinkset_led6:        dw  #d868     : db 46set_led2:        dw  #d868     : db 41; list of calls executed after kernel initialization prior interrupt is enabled; format        dw pc,ix       load ix, call pc;               dw 0           end of table, retexp:.main:        dw  setup,       0        dw  music.init,  0; end of the list        dw  0; list of calls that are executed every interruptexl:.blank:        dw      0.interrupt:        dw      music.play        dw      0; executor language listexe:.demo:       Config;        HaltDisable        HaltEnable        AsyncEnable        AsyncCall  dummy       EndC/*       Frame #100,0         ExeRun   egl.border,#0107         ExeRun   egl.border,#0003       EndF       Restart       IFDEF  vfadeTest         Frame #ffff,0;          ExeRun  vfade.run1,   vfade.data          ExeRun  vfade.run2, 0;          ExeRun  vfade.seqRun, vfade.sqTest         EndF         Idle       ENDIF*/       MCall rotoid.init       Config        AsyncCall  rotoid.run       EndC       IFUSED sce_ed         MCall scene_editor_init         Frame #ffff,0           ExeRun      poke, infinite_frm           ExeSwapPC   editor.run, dummy, scene_ed, 1,4,1         EndF       ENDIF       IFUSED seg_ed         MCall segment_editor_init;         Frame 1,0;           ExeRun  editor.init, segment_ed;           ExeRun  rotoid.setScene, rotoid.scenes.edit;         EndF         Frame #ffff, 0           ExeRun      poke, infinite_frm           ExeSwapPC   editor.run, dummy, segment_ed, 1,4,1         EndF       ENDIF       Wait #ffff;=============== ENDTITLES =========================exe_titles:       Frame #ffff,0;        ExeRun     egl.border,#0101        ExeRun     vscroll.run, 0                              ; vertical scroller;        ExeSwapPC  vscroll.stars, dummy,         0, 1,11,0     ; draw stars - (sum shall be divisible by 6 (6 = move of screen by 2 pix))        ExeSwapPC  egl.drawLineHdi, dummy, pdrwHdi, 1, 5,0      ; draw bitmap gfx;        ExeRun     egl.border,#0100       EndAtFrame  syncid_061;       Frame #100,0;        ExeRun     egl.border,#2005;        ExeRun     egl.border,#2000;       EndF       Idle;--       Wait        #80       Frame       #20,0        ExeRun     poke, set_vram0        ExeRun     egl.clearatr,scr_intro.clout       EndF       Idle;================================================exe_launchpad:       WaitUntil   syncid_04a       Frame 480,0                                              ; divisable by sum of framecounts in exeswap        ExeSwapIX  pokeVram, set_led6, set_led2, 30, 10, 0       EndF;       EndAtFrame  syncid_049       Idle;================================================rtDummy:       Wait #ffffrtFlash:       WaitUntil   #f0f0                         ; syncid_10E.now:  Frame #100,0        ExeSwapPC  egl.clearatr.init, egl.clearatr.run2, atrScrFlash, 1,#1f,1       EndF       Idle.atFrame:   = rtFlash + 5               ; wait when FRAMES=atFrame.rtLength:  = rtFlash + 12              ; duration of flash effect (when one blink is required then gap shall be the same +1).fPulse:    = rtFlash + 17              ; shall be 1.fGap:      = rtFlash + 18              ; duration of one blink (can be longer, when short then it repeats).fState:    = rtFlash + 19              ; shall be 1;-------------------------------------------------------------------------------machine:  db     0.cpu:     db     0frames:   dw     0fps:      db     0page:     db     0memReads: dw     0                ; speed of bank1dbg:.border:  db     0;-------------------------------------------------------------------------------regsp:    ds     #40stackInt: ds     #40stackStart:;-------------------------------------------------------------------------------        include "demo/vscroll/vscroll.a80"        include "libs/vram_fade.a80"        include  "demo/fzblueprint.a80"load:;--- rotoid         include "demo/rotoid/rotoid.a80"reload:;------------------------------------------------------; rotoid data;------------------------------------------------------;---- scene and object data (max 16k)        ORG      #c000        PAGE     0        MODULE   rotoid        include "demo/data/rotoid/_rt_objects.a80 "        include "demo/data/rotoid/_rt_scenes.a80"        ENDMODULEp0free:        DISPLAY "Scene and object free memory:",$10000-$;-------        display "reload:",reload        display "p0free:",p0free        ORG  reload        include "libs/rsc_load.a80";        display "rotoid core start :",rotoid.init, " len:",$-rotoid._rt         savesna "main.sna",start         display "main exec start:",start         page    0;         savebin "bin/p0.bin",#c000,#4000         savebin "bin/main.bin",start,#10000-start;         savebin "bin/p2s.bin",start,#c000-start         page    1         savebin "bin/p1.bin",#c000,#4000;         page    2;         savebin "bin/p2.bin",#c000,#4000         page    3         savebin "bin/p3.bin",#c000,#4000         page    4         savebin "bin/p4.bin",#c000,#4000;         page    5;         savebin "bin/p5.bin",#c000,#4000         page    6         savebin "bin/p6.bin",#c000,#4000         page    7         savebin "bin/p7.bin",#c000,#4000;        MCall screen.invader1a;        MCall screen.invader3/*         Frame #4,0          ExeRun  egl.clearatr,bpx_intro         EndF         MCall screen.invader1b*//*         Frame #300,0          ExeRun  vfade.run1, vfade.data          ExeRun  vfade.line, vfade.lnBadpix;          ExeWait egl.attwin, bpx_intrd, #70;         EndF         EndAtFrame #a0         Frame #4,0          ExeRun  egl.clearatr,bpx_intro         EndF;         MCall screen.badpixel2         Frame #100,0          ExeRun  vfade.run1, vfade.data          ExeRun  vfade.seqRun, vfade.sqBadpix         EndF*/; darkness text view/*         MCall screen.darkness                        ; test of fzx print routine         Frame #280,0          ExeRun  vfade.run1, vfade.data          ExeRun  vfade.line, vfade.lnDark          ExeWait egl.clearatr, atrDarkness1,  #00+#28          ExeWait egl.clearatr, atrDarkness2,  #60+#28          ExeWait egl.clearatr, atrDarkness3,  #c0+#28          ExeWait egl.clearatr, atrDarkness4, #120+#28         EndF         Frame 50,0          ExePeriodic egl.attwin  , atrDarknessw, #100         EndF         Frame #80,0          ExeRun  egl.clearatr, atrDarknessf          ExeRun  egl.attwin  , atrDarknessw2          ExeWait egl.attwin  , atrDarknessw3, #70         EndF*/; narcissus helmet/*         MCall screen.helmet         Frame #280,0          ExeRun  vfade.run1, vfade.data          ExeRun  vfade.seqRun, vfade.sqHelmet          ExeWait egl.atrFade   , #5800, #270          ExeWait egl.atrFadeP7 , #d800, #270         EndF*/; narcissus computer wake up/*         MCall screen.computer         Frame #80,0          ExeRun  vfade.run1, vfade.data          ExeRun  vfade.line, vfade.lnComp1         EndF         Frame #130,0          ExeRun  vfade.run1, vfade.data          ExeRun  vfade.line, vfade.lnComp2         EndF       Frame #ffff,0        ExeRun egl.border,#0505        ExeRun egl.border,#0501        ExeZ80start #0120           ld a,r           out (#fe),a           ld  c,xh2          ld  b,xl1          djnz 1B           dec  c           jr   nz,2B           xor  a           out  (#fe),a        ExeZ80end       EndF       RestartrtSubtitle:.frm:    Frame #220,0           ExeSwapIX outix,o5+8,o7,1,1,0.fin:      ExeWait   egl.attwin, atrSubFadeIn , #100.fot:      ExeWait   egl.attwin, atrSubFadeOut, #200         EndF         Frame #02, 0           ExeRun    modrotoidpage , tit_win + pxwin.page           ExeRun    egl.pixwin, tit_win         EndF         Idlemodrotoidpage:         jr      nc,.p         ld      a,(rotoid.run.vpage+1)         ld      (ix+0),a         xor     #0a         ld      (.p+1),a         ret.p:      ld      a,#aa         ld      (ix+0),a         retrtComputer:         Frame #80,0          ExeRun  vfade.run1, vfade.data          ExeRun  vfade.line, vfade.lnComp1          ExeRun  vfade.seqRun, vfade.sqComp         EndF         IdlertComputer2:         Frame #40,0          ExeRun  egl.clearatr, atrComp.vram         EndF         IdlertAlien:         Frame #90,0                          ; #60 is height of pattern bitmap = loop twice          ExeRun  vfade.run2, 0         EndF         IdlertHelmet:         Frame #280,0          ExeRun  vfade.run1, vfade.data          ExeRun  vfade.seqRun, vfade.sqHelmet;          ExeWait egl.atrFade   , #5800, #270;          ExeWait egl.atrFadeP7 , #d800, #270         EndF         Idlea=50b=58c=66d=200rtVtxtOver:         Frame #a0,0          ExeWait egl.attwin, atrVtxt6, a          ExeWait egl.vprint.run, vpEarth1, a          ExeWait egl.attwin, atrVtxt7, b          ExeWait egl.vprint.run, vpEarth2, b          ExeWait egl.attwin, atrVtxt8, c          ExeWait egl.vprint.run, vpCredits, c;          ExeWait egl.clearatr, atrVtxtFlash,d         EndF         Idlea=50b=58c=66d=100rtVtxt:         Frame 150,0          ExeWait egl.attwin, atrVtxt1, a          ExeWait egl.vprint.run, vpStation, a          ExeWait egl.attwin, atrVtxt2, b          ExeWait egl.vprint.run, vpDoom, b          ExeWait egl.attwin, atrVtxt3, c          ExeWait egl.vprint.run, vpSun, c          ExeWait egl.clearatr, atrVtxtFlash,d         EndF         Idlea=50b=60d=#f0rtEarth:         Frame #100,0          ExeWait egl.attwin, atrVtxt4, a          ExeWait egl.vprint.run, vpEarth1, a          ExeWait egl.attwin, atrVtxt5, b          ExeWait egl.vprint.run, vpEarth2, b;          ExeWait egl.clearatr, atrVtxtFlash,d         EndF         IdlertTest:                                           ; test of vfade         Frame #ffff,0          ExeRun  vfade.run2  , 0         EndF         Frame #ffff,0          ExeRun  vfade.run1  , vfade.data          ExeRun  vfade.seqRun, vfade.sqTitles         EndFrtBigTitle:         Frame #d0,0          ExeRun   vfade.run1  , vfade.data          ExeRun   vfade.line  , vfade.lnTitles          ExeRun   egl.attwin  , atrTitFadeIn;          ExeRun   egl.border, #0101         EndF         Frame #20,0          ExeRun  egl.attwin  , atrTitFadeOut;          ExeRun  egl.border, #0101         EndF         Idle       IFUSED playIntro;------; invaders logo        Wait  #50        MCall screen.invader3        Frame #30,0         ExeRun  vfade.run1, vfade.data         ExeRun  vfade.line, vfade.lnInvader        EndF        MCall screen.invader3b;        Wait #40;        MCall     egl.atrFadeHalf;        Frame #10,0;          ExeRun  egl.atrFade, #5800;        EndF; rotoid engine logo        Wait #30        MCall screen.engine        Wait #30        MCall     egl.atrFadeHalf;        Frame #10,0;          ExeRun  egl.atrFade, #5800;        EndF; void logo        Wait #30        MCall screen.voidlogo        Wait #50        MCall     egl.atrFadeHalf; text of mr.kew        Wait #30        MCall screen.text        Wait #60        Frame #20,0           ExeRun    egl.clearatr, atrVoidtxt        EndF        Wait #60        Frame #20,0;           ExeSwapIX outix_persist,o5+8,o7,1,1,0           ExeSwapIX  poke, set_vram0, set_vram1, 1,1,0        EndF        Wait #60        Frame #40,0;           ExeSwapIX outix_persist,o5+8,o7,1,1,0           ExeSwapIX  poke, set_vram0, set_vram1, 1,1,0        EndF        Wait #80        Frame #50,0;           ExeSwapIX outix_persist,o5+8,o7,1,4,0           ExeSwapIX  poke, set_vram0, set_vram1, 1,4,0        EndF        MCall     egl.atrFadeHalf; void city screen        MCall screen.void        Frame #c0,0;           ExeSwapIX outix_persist,o5+8,o7,1,1,0     ; blink and fade in           ExeSwapIX  poke, set_vram0, set_vram1, 1,1,0           ExeRun    egl.clearatr, atrVoidscrFI        EndF        Frame #10,0           ExeRun    egl.clearatr, atrVoidscrFO        EndF       ENDIF;------------end of intro*/