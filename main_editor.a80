; Main demo code; Startdate: 25.06.2018; compiler definitions        DEVICE ZXSPECTRUM128        LABELSLIST "main.sym"; Build        DEFINE KMachine 0           ; 0.. 128k, 1.. +3, 2.. Pentagon; kernel defines        DEFINE  outfd               ; use OUT (FD),A instead of OUT (C),A. Faster due to PUSH BC,POP BC;        DEFINE  sinclair            ; sinclair = pages using #50 mask, undefined #10; define sample ay player type (nibble packed)        DEFINE aypck; development variables;        DEFINE debug               ; special option to enable border and other debug features        DEFINE debuglevel 0        ;DEFINE _erasedebug; rotoid multab config        ;DEFINE _multabXls         ; multab from excel        ;DEFINE _multabClc         ; multab calculated        DEFINE _multabBmp          ; multab expanded bitmap; enable or disable segment editor at startup;        DEFINE seg_ed;        DEFINE sce_ed; demo switches;        DEFINE vfadeTest        DEFINE playIntro        DEFINE d_scrplay          ; compile screenplay - _rt_scenes (save memory); load structures, macros, defines        include "kernel/kern_def.a80"        include "kernel/kern_macros.a80";-- lib defines        include "libs/keys_def.a80"        include "libs/editor_def.a80"        include "libs/osg_lualib.a80"        include "libs/fzx_drv_def.a80";-- demo effect defines                include "libs/egl_def.a80";        include "demo/light/3dlight_def.a80"        include "demo/rotoid/rotoid_def.a80"        include "demo/screenplay/demo_sync.a80"        ORG    #5b00;-- bufferstemp3k: ds     #0f00.end:swap:   ds      #100                     ; free buffer for memory operations;-- bin preparation        include "demo/darkness.a80"; init code and interruptstart:        include "kernel/kern_exec.a80"   ; kernel init is executed, follows "exp.main" table of calls prior enabling interrupt        ORG     lowmem                   ; lowmem - resulting address from kernel init; ------------------------------------------------------------------------------; this code is called via kernel exeptr service; list of executed calls is in the table "exp" ended with dw 0setup:  border  0        ld      hl,#5800        ld      de,#5801        ld      bc,#2ff        ld      (hl),l        ldir        ld      hl,exe.demo                     ; table of demo script        call    execmd.init        ld      hl,exl.blank                    ; system exec list (system services like music, keyboard)        ld      (ExeSetExl),hl        call    displayMachine        ret;-- editor core libs;        include "libs/keys.a80"         ; keyscan routine with debouncer;        include "libs/editor16b.a80"    ; effect editor 16bit capable;--- e2 demo routines        include "libs/egl.a80"        include "libs/rsc.a80";--- demo data        include "demo/demo_dat.a80";        include "demo/demo_txt.a80"displayMachine:         rscUnpack KRscBoot, res_tab         ld        hl,vtHex          ;text address         ld        a,(machine.cpu)         call      hexPrint         inc       hl         ld        a,(memReads+1)         call      hexPrint         inc hl                      ;skip 13         ld        a,(memReads)         call      hexPrint          ;last char is 0 - end of text         scf1        callix    egl.vprint,vpHex         jr        nz,1B         ld        a,(machine)         inc       a         ld        (atrMachineData),a; +3 #5x paging; Pentagon #1x paging         cp        3                 ; +3         jr        nz,1F         jr        .mpass1        cp        4                 ; pentagon         jr        nz,1F         jr        .mpass1        cp        7                 ; too fast         jr        z,.merr         cp        1                 ; too slow         jr        z,.merr                                     ; 128k / +2.mpass:  ld        a,#07             ; white border = OK         jr        .msave.merr:   ld        a,#02             ; red border = Error.msave:  ld        (.mcol+1),a       ; save border         ei.loop2:  ld        yl,#18.loop:   ld        a,1         dec       a         and       #03         ld        (.loop+1),a         jr        z,.mcol         ld        a,7         jr        1F.mcol:   ld        a,#551        out       (#fe),a         callix    egl.attwin, atrMachine         halt         halt         dec       yl         jr        nz,.loop         ld        a,(.mcol+1)         cp        2         jr        z,.loop2         border    0         ld        e,0         ld        h,#58         jp        mmu.clatrhexPrint:         ld        b,22        rrca         rrca         rrca         rrca         ld        c,a         and       #0f         add       a,"0"         cp        ":"         jr        c,1F         add       a,7+#20    ; move to "a"1        ld        (hl),a         inc       hl         ld        a,c         djnz      2B         retlowend: equ     $        display "lowend:",lowendmusic:.init:  ld      a,o7        page_a        ld      hl,music_space.initaddr        jp      msx.ini.play:  ld      a,(@ivram)        or      o7                        ; msx page        page_am        debug_border 2        call    msx.run        debug_border 0        ld      hl,music_setup        bit     7,(hl)        ret     z        di.mod:   ld      a,KRscMsxP2-1        cp      KRscMsxP4        ret     z        inc     a        ld      (.mod+1),a;        cp      KRscMsxP3;        push    af;        call    z,music_mute;        pop     af        ld      de,res_tab        call    rsc.load                  ; load next music part        ld      a,o7        page_a        ld      hl,music_packed        ld      de,music_space        call    rsc.dzx7s                 ; decompress music        call    music.init        ei        ret;-------------------------------------------------------------------------------;rotoid_print of subtitles:        number of frames, @frame fade_in, @frame fade_out;           call  @rtd_prt : dw  #200, #80, #1e0, txs09rtd_prt:        pop      hl        ldi      de,(hl)        ld       (rtSubtitle.frm),de                ; number of frames        ldi      de,(hl)        ld       (rtSubtitle.fin+SExeWait.wait),de   ; wait before fadein        ldi      de,(hl)        ld       (rtSubtitle.fot+SExeWait.wait),de   ; wait before fadeout        ldi      de,(hl)        push     hl                                 ; push return address        ex       de,hl                              ; hl=address of text        call     save_page        push     hl        callix   rotoid.fillRct, rctSubAt        callix   rotoid.fillRct, rctSubPx        callix   egl.attwin.init, atrSubFadeIn        callix   egl.attwin.init, atrSubFadeOut        pop      hl;------ fzx print        push     hl         ld      a,KRscFzxIni         ld      de,res_tab         call    rsc.runhl2ix        pop      hl1       push     hl         ld      a,KRscFzxRun         ld      de,res_tab         call    rsc.runhl2ix        pop      hl/*;------ hdf print        push     hl         ld      a,KRscHdfIni         ld      de,res_tab         call    rsc.runhl2ix        pop      hl1       push     hl         ld      a,KRscHdfRun         ld      de,res_tab         call    rsc.runhl2ix        pop      hl*/        jr       nc,1B        ld       a,o7        page_c        callix   rotoid.fillRct, rctSubAt2        ld       hl,#50a0        ld       de,#d0a0        ld       c,#18        ld       a,_ldahl        call     egl.copyFunc.HLDEC        ld       hl,rtSubtitle        IFDEF sce_ed        ELSE            call     execmd.init        ENDIF        jp       load_page          ; then ret;-------------------------------------------------------------------------------; rotoid print of titlesrtd_tit:        call     save_page; del;        xor      a;        callix   vfade.init2, vfade.hdiTest; del        callix   mmu.clsxi, #0000        ld       h,#d8        ld       e,#47        ld       a,o7        call     mmu.clatr        pop      hl        ldi      de,(hl)        push     hl        ex       de,hl        push     hl         ld      a,KRscFzxIni         ld      de,res_tab         call    rsc.runhl2ix        pop      hl1       push     hl         ld      a,KRscFzxRun         ld      de,res_tab         call    rsc.runhl2ix        pop      hl        jr       nc,1B        call     screen.outline        ld       a,#78        ld       (vfade.run1.hgh+1),a         ; height of laced area        call     vfade.buffClear;        ld       a,_scf;        ld       (ExeFrameStarted),a        ld       hl,rtBigTitle        call     execmd.idle        ld       hl,rtDummy        call     execmd.init        ld       h,#d8        ld       e,#00        ld       a,o7        call     mmu.clatr        call     load_page        retscreen:.text:         rscLoad   KRscDarktxt, res_tab         rscUnpack KRscDarkfzx, res_tab         ld      hl,exl.interrupt                      ; enable interrupt list         ld      (ExeSetExl),hl         ld      hl,0         ld      (@frames),hl         border   0         call     save_page         callix   mmu.clsix, #0000                     ; xl-pix xh-attr         rscRunIX KRscFzxIni, res_tab, txsd01         rscRunIX KRscFzxRun, res_tab, txsd0         jr       nc,1B         call     mmu.cpscr57         ld       h,#d8         ld       e,#45         ld       a,o7         call     mmu.clatr         ld       a,o7         page_c         ld       xh,31        ld       hl,#c000         ld       de,hl         ld       a,KScrollOr         call     egl.copyRightHLDE         dec      xh         jr       nz,1B         call     load_page         ret;-------------------------------------------------------------------------------.hollis2:        HoldVramAfterInterrupt        call      .hollis2.attrs:        ld        a,#38        ld        (rctSubAt3+rctf.fill),a        rscUnpack KRscPattern, res_tab        xor       a                      ;loop bitmap        callix    @vfade.init2, temp3k        ld        hl,rtHollis2        call      execmd.idle        ReturnVramAfterInterrupt        border    7        call      mmu.cpscr75        ld        a,o0        page_a        ret.hollis2.attrs:        ld        a,o7        page_a        callix    rotoid.fillRct, rctSubAt3        callix    rotoid.fillRct, rctSubAt4        ret;-------------------------------------------------------------------------------.station:        call   save_page        ld     a,o1        page_c        callix egl.attwin.init, atrVtxt1        callix egl.attwin.init, atrVtxt2        callix egl.attwin.init, atrVtxt3        callix egl.vprint.init, vpStation        callix egl.vprint.init, vpSun        callix egl.vprint.init, vpDoom        callix egl.clearatr.init, atrVtxtFlash        ld     hl,rtVtxt        call   execmd.idle        call   load_page        ret;-------------------------------------------------------------------------------.over:        call   save_page        ld     a,o1        page_c;        callix   mmu.clsix, #4200                     ; xl-pix xh-attr        callix egl.attwin.init, atrVtxt6        callix egl.attwin.init, atrVtxt7        callix egl.attwin.init, atrVtxt8        callix egl.vprint.init, vpEarth1        callix egl.vprint.init, vpEarth2        callix egl.vprint.init, vpCredits        callix egl.clearatr.init, atrVtxtFlash        WaitF  syncid_154                              ;alien hud 2        ld     hl,rtVtxtOver        call   execmd.idle        WaitF  syncid_172                              ;Planets fading        ld     hl,atrMaskTab8        call   .atrUnmask        call   mmu.cpscr57        call   load_page        ret;-------------------------------------------------------------------------------.earth:        call   save_page        ld     a,o1        page_c        callix egl.attwin.init, atrVtxt4        callix egl.attwin.init, atrVtxt5        callix egl.vprint.init, vpEarth1        callix egl.vprint.init, vpEarth2;        callix egl.clearatr.init, atrVtxtFlash        ld     hl,rtEarth        call   execmd.idle        call   load_page        ret;-------------------------------------------------------------------------------.void:         callix    mmu.clsxi, #0000         rscUnpack KRscVoidp1, res_tab         call      egl.delinear         call      mmu.cpscr57         rscUnpack KRscVoidp2, res_tab         call      egl.delinear         ret         ;-------------------------------------------------------------------------------.helmet:         call      save_page         callix    mmu.clsxi, #0000                     ; xl-pix xh-attr         rscUnpack KRscHelmet1, res_tab         ld        a,o7         page_c         ld        hl,#4000         ld        de,#c000         ld        bc,#1b00         ldir         rscUnpack KRscHelmet2, res_tab         ld       a,#a0         ld       (vfade.run1.hgh+1),a                  ; height of laced area         WaitF  syncid_1A4                ;noise1         ld     hl,rtHelmet         call   execmd.idle         call   egl.atrFadeHalf         call   load_page         ret;-------------------------------------------------------------------------------.computer:         callix    mmu.clsxi, #0000                     ; xl-pix xh-attr         ld        a,o7,e,#46,h,#d8         call      mmu.clatr;         ld        a,(machine);         call      vfade.init         ld        a,#a0         ld        (vfade.run1.hgh+1),a                 ; height of laced area         rscRunIX KRscFzxIni, res_tab, fzCommand1         rscRunIX KRscFzxIni, res_tab, fzCommand2         rscRunIX KRscFzxIni, res_tab, fzCommand31        rscRunIX KRscFzxRun, res_tab, fzCommand1         jr         nc,1B1        rscRunIX KRscFzxRun, res_tab, fzCommand2         jr         nc,1B1        rscRunIX KRscFzxRun, res_tab, fzCommand3         jr         nc,1B;-------------------------------------------------------------------------------.outline:         ld        a,(@page)         push      af         ld        a,o7         page_c         ld        a,KScrollOr         call      egl.copyRight         ld        a,KScrollOr         call      egl.copyLeft         ld        a,_orhl         ld        hl,#4100         ld        de,#c000         call      egl.copyFunc.HLDE         ld        a,_orhl         ld        hl,#4000         ld        de,#c100         call      egl.copyFunc.HLDE.lf:     ld        a,_orhl         ld        hl,#4000         ld        de,#c000         call      egl.copyFunc.HLDE         pop       af         page_c         ret;-------------------------------------------------------------------------------.engine:         callix    mmu.clsxi, #0000                     ; xl-pix xh-attr         rscUnpack KRscRotEng1, res_tab         rscUnpack KRscRotEng2, res_tab         ld        hl,temp3k         ld        de,#5800         call      egl.atrSetMaskColor.init         ld        hl,atrMaskRotoid         call      .atrUnmask         ld    a,o6         page_c         ld    hl,sndengine            ; start data         ld    a,35                    ; delay         ld    b,10                    ; ay volume channel         call  ayplay         ret;-------------------------------------------------------------------------------.voidlogo:         callix    mmu.clsxi, #0000                     ; xl-pix xh-attr         rscUnpack KRscScrVoid1, res_tab         rscUnpack KRscScrVoid2, res_tab         ld        hl,temp3k         ld        de,#5800         call      egl.atrSetMaskColor.init         ld        hl,atrMaskVoid         call      .atrUnmask         ld    a,o6         page_c         ld    hl,sndvoid              ; start data         ld    a,35                    ; delay         ld    b,10                    ; ay volume channel         call  ayplay         call  ayplay.calm         ret;-------------------------------------------------------------------------------.endtitles:         rscUnpack KRscTitles, res_tab         mmucpy    temp3k, fzTitles2,#400*3,o1,o1                               ; reserve, text has 2431         HoldVramAfterInterrupt         call      vscroll.init         ld        hl,titles         call      execmd.init         rscRunIX KRscFzxIni, res_tab, fzTitles11        halt         rscRunIX KRscFzxRun, res_tab, fzTitles1         jr        nc,1B2        ld        a,(vscroll.toggle)         and       a         jr        z,2B         xor       a         ld        (vscroll.toggle),a         halt         call      vscroll.clearline         jr        1B;-------------------------------------------------------------------------------.invader3:                                            ; invaders logo         ld      a,(machine)         call    vfade.init;        ReturnVramAfterInterrupt;        ret         HoldVramAfterInterrupt         callix    mmu.clsxi, #0000                     ; xl-pix xh-attr         rscUnpack KRscInvad31, res_tab         rscUnpack KRscInvad32, res_tab         call      mmu.cpscr57         ld        a,o7         page_c         ld        hl,temp3k         ld        de,#d800                           ; temp address of second screen         call      egl.atrSetMaskColor.init         ld        hl,atrMaskTab2         call      .atrUnmask         ld        hl,temp3k         ld        de,#5800         call      egl.atrSetMaskColor.init         ld        hl,atrMaskTab1         call      .atrUnmask         ret;-------------------------------------------------------------------------------.invader3a:         ld        a,32                                    ; invaders text         call      egl.atrSetMaskColor.inia         ld        a,-7         call      .maskFade         ld        a,24         call      egl.atrSetMaskColor.inia         ld        a,-7;         call      .maskFade.maskFade:         ld    xl,a1        ld    a,4         call  waitFrames         ld    a,xl         call  egl.atrSetMaskColor         inc   xl         ld    a,xl;         cp    #07         cp    1         jr    nz,1B         ret;-------------------------------------------------------------------------------.invader3b:         ld        hl,atrMaskTab3         call      .atrUnmask         ld    a,o6         page_c         ld    hl,sndinvaders          ; start data         ld    a,35                    ; delay         ld    b,10                    ; ay volume channel         call  ayplay         ld    a,#40         call  waitFrames         call  egl.atrFadeHalf         ld    a,o0         page_c         ret.atrUnmask:         ld    a,(hl)         ld    (.hlt+1),a         inc   hl1        ld    a,(hl)         cp    #80         jr    nz,4F         inc   hl         ld    a,(hl)         jp    waitFrames                   ; ret after wait4        inc   hl         ld    b,(hl)         inc   hl         push  hl,bc         call  egl.atrSetMaskColor.inia         pop   bc.hlt:    ld    a,#55         call  waitFrames         ld    a,b         call  egl.atrSetMaskColor         pop   hl         jr    1B;-------------------------------------------------------------------------------.solar:         call      save_page         border    0         callix    mmu.clsxi, #0000                     ; xl-pix xh-attr         rscUnpack KRscSolarMap1, res_tab         rscUnpack KRscSolarMap2, res_tab         ld        hl,temp3k         ld        de,#5800         call      egl.atrSetMaskColor.init         ld        hl,atrMaskTab5         call      .atrUnmask         jp        load_page;         call      load_page;         ret;----------------------------------------------         include "demo/ayplay/ayplay.a80"segment_editor_init:        IFDEF seg_ed        callix editor.init, segment_ed        ld     a,_anda        ld     (rotoid.run.scene),a        ENDIF        retscene_editor_init:        IFDEF sce_ed        callix editor.init, scene_ed        ld     a,_anda        ld     (rotoid.run.scene),a        ENDIF        ret; endtitles code to unpack bitmapunpackHdi:            push   bc            ld     a,c            ld     (pdrwHdi.posx),a            xor    a                ; lock drawing of bitmap  (egl.drawLineHdi)            ld     (isUnpackedHdi),a            ld     (pdrwHdi.cury),a            ld     c,a              ; x=0            ld     b,56*3-5         ; pos y            call   PixCY2Adr:            ld     (pdrwHdi.vram),hl            pop    bc            ld     a,b              ; b=rsc            ld     de,res_tab       ; a=resource number, de=resource table            call   rsc.getptr       ; ix=resource table pointer            ld     de,temp3k        ; de=destination            call   rsc.unpack.dest  ; force destination of decompression            ld     a,1              ; unlock drawing of bitmap            ld     (@isUnpackedHdi),a            retdelayix:            ld      c,xl            ld      b,xh            include "libs/delay.a80"          ; Tdelay: wait bc T-cycles (including call; bc>=141);-----------------------------------------------------pdrwHdi:.vram:      dw     #4000.pgfx:      dw     temp3k.mode:      db     #81              ; 0=blit, 1=or, 2=xor.posx:      db     0                ; x-offset (can be negative and over #1f).cury:      db     0isUnpackedHdi: db  0                ; variable for end titles. 0=bitmap NOT ready;-----------------------------------------------------; poke definitionsinfinite_frm:    dw  ExeFrames : db #ffreset_frames:    dw  frames    : dw #0000set_vram0:       dw  ivram     : db 0set_vram1:       dw  ivram     : db 8; list of calls executed after kernel initialization prior interrupt is enabled; format        dw pc,ix       load ix, call pc;               dw 0           end of table, retexp:.main:        dw  setup,       0        dw  music.init,  0; end of the list        dw  0; list of calls that are executed every interruptexl:.blank:        dw      0.interrupt:        dw      music.play        dw      0; executor language listexe:.demo:       Config;        HaltDisable        HaltEnable        AsyncEnable        AsyncCall  dummy       EndC/*       MCall screen.machine       Frame #250,0mcol:    ExeSwapIX  egl.border, #0001, #0007, #8, #18, 0   ; machine color         ExeRun     egl.attwin, atrMachine       EndF*//*       Frame #100,0         ExeRun   egl.border,#0107         ExeRun   egl.border,#0003       EndF       Restart*/       IFDEF  vfadeTest         Frame #ffff,0;          ExeRun  vfade.run1,   vfade.data          ExeRun  vfade.run2, 0;          ExeRun  vfade.seqRun, vfade.sqTest         EndF         Idle       ENDIF       IFUSED playIntro;------; invaders logo        Wait  #50        MCall screen.invader3        Frame #30,0         ExeRun  vfade.run1, vfade.data         ExeRun  vfade.line, vfade.lnInvader        EndF        MCall screen.invader3b;        Wait #40;        MCall     egl.atrFadeHalf;        Frame #10,0;          ExeRun  egl.atrFade, #5800;        EndF; rotoid engine logo        Wait #30        MCall screen.engine        Wait #30        MCall     egl.atrFadeHalf;        Frame #10,0;          ExeRun  egl.atrFade, #5800;        EndF; void logo        Wait #30        MCall screen.voidlogo        Wait #50        MCall     egl.atrFadeHalf; text of mr.kew        Wait #30        MCall screen.text        Wait #60        Frame #20,0           ExeRun    egl.clearatr, atrVoidtxt        EndF        Wait #60        Frame #20,0;           ExeSwapIX outix_persist,o5+8,o7,1,1,0           ExeSwapIX  poke, set_vram0, set_vram1, 1,1,0        EndF        Wait #60        Frame #40,0;           ExeSwapIX outix_persist,o5+8,o7,1,1,0           ExeSwapIX  poke, set_vram0, set_vram1, 1,1,0        EndF        Wait #80        Frame #50,0;           ExeSwapIX outix_persist,o5+8,o7,1,4,0           ExeSwapIX  poke, set_vram0, set_vram1, 1,4,0        EndF        MCall     egl.atrFadeHalf; void city screen        MCall screen.void        Frame #c0,0;           ExeSwapIX outix_persist,o5+8,o7,1,1,0     ; blink and fade in           ExeSwapIX  poke, set_vram0, set_vram1, 1,1,0           ExeRun    egl.clearatr, atrVoidscrFI        EndF        Frame #10,0           ExeRun    egl.clearatr, atrVoidscrFO        EndF       ENDIF;------------end of intro       MCall rotoid.init       Config        AsyncCall  rotoid.run       EndC              IFUSED sce_ed         MCall scene_editor_init         Frame #ffff,0           ExeRun      poke, infinite_frm           ExeSwapPC   editor.run, dummy, scene_ed, 1,4,1         EndF       ENDIF       IFUSED seg_ed                  MCall segment_editor_init;         Frame 1,0;           ExeRun  editor.init, segment_ed;           ExeRun  rotoid.setScene, rotoid.scenes.edit;         EndF         Frame #ffff, 0           ExeRun      poke, infinite_frm           ExeSwapPC   editor.run, dummy, segment_ed, 1,4,1         EndF       ENDIF        Wait #ffffrtSubtitle:.frm:    Frame #220,0           ExeSwapIX outix,o5+8,o7,1,1,0.fin:      ExeWait   egl.attwin, atrSubFadeIn , #100.fot:      ExeWait   egl.attwin, atrSubFadeOut, #200         EndF         Frame #02, 0           ExeRun    modrotoidpage , tit_win + pxwin.page           ExeRun    egl.pixwin, tit_win         EndF         IdlertComputer:         Frame #80,0          ExeRun  vfade.run1, vfade.data          ExeRun  vfade.line, vfade.lnComp1          ExeRun  vfade.seqRun, vfade.sqComp         EndF         IdlertComputer2:         Frame #40,0          ExeRun  egl.clearatr, atrComp.vram         EndF         IdlertAlien:         Frame #90,0                          ; #60 is height of pattern bitmap = loop twice          ExeRun  vfade.run2, 0         EndF         IdlertHelmet:         Frame #280,0          ExeRun  vfade.run1, vfade.data          ExeRun  vfade.seqRun, vfade.sqHelmet;          ExeWait egl.atrFade   , #5800, #270;          ExeWait egl.atrFadeP7 , #d800, #270         EndF         Idlea=50b=58c=66d=200rtVtxtOver:         Frame #a0,0          ExeWait egl.attwin, atrVtxt6, a          ExeWait egl.vprint.run, vpEarth1, a          ExeWait egl.attwin, atrVtxt7, b          ExeWait egl.vprint.run, vpEarth2, b          ExeWait egl.attwin, atrVtxt8, c          ExeWait egl.vprint.run, vpCredits, c;          ExeWait egl.clearatr, atrVtxtFlash,d         EndF         Idlea=50b=58c=66d=100rtVtxt:         Frame 150,0          ExeWait egl.attwin, atrVtxt1, a          ExeWait egl.vprint.run, vpStation, a          ExeWait egl.attwin, atrVtxt2, b          ExeWait egl.vprint.run, vpDoom, b          ExeWait egl.attwin, atrVtxt3, c          ExeWait egl.vprint.run, vpSun, c          ExeWait egl.clearatr, atrVtxtFlash,d         EndF         Idlea=50b=60d=#f0rtEarth:         Frame #100,0          ExeWait egl.attwin, atrVtxt4, a          ExeWait egl.vprint.run, vpEarth1, a          ExeWait egl.attwin, atrVtxt5, b          ExeWait egl.vprint.run, vpEarth2, b;          ExeWait egl.clearatr, atrVtxtFlash,d         EndF         Idle/*rtTest:                                           ; test of vfade         Frame #ffff,0          ExeRun  vfade.run2  , 0         EndF         Frame #ffff,0          ExeRun  vfade.run1  , vfade.data          ExeRun  vfade.seqRun, vfade.sqTitles         EndF*/rtBigTitle:         Frame #d0,0          ExeRun   vfade.run1  , vfade.data          ExeRun   vfade.line  , vfade.lnTitles          ExeRun   egl.attwin  , atrTitFadeIn;          ExeRun   egl.border, #0101         EndF         Frame #20,0          ExeRun  egl.attwin  , atrTitFadeOut;          ExeRun  egl.border, #0101         EndF         IdlertDummy:         Wait #ffff;=============== ENDTITLES =========================titles:  Frame #ffff,0          ExeRun     vscroll.run, 0                              ; vertical scroller          ExeSwapPC  vscroll.stars, dummy,         0, 1,11,0     ; draw stars - (sum shall be divisible by 6 (6 = move of screen by 2 pix))          ExeSwapPC  egl.drawLineHdi, dummy, pdrwHdi, 1,5,0      ; draw bitmap gfx         EndAtFrame  syncid_1CC         Wait        #80         Frame       #20,0          ExeRun     poke, set_vram0          ExeRun     egl.clearatr,scr_intro.clout         EndF         Idle;================================================rtFlash:         WaitUntil   syncid_10E.now:    Frame #100,0          ExeSwapPC  egl.clearatr.init, egl.clearatr.run2, atrScrFlash, 1,#1f,1         EndF         Idle.atFrame:   = rtFlash + 5               ; wait when FRAMES=atFrame.rtLength:  = rtFlash + 12              ; duration of flash effect (when one blink is required then gap shall be the same +1).fPulse:    = rtFlash + 17              ; shall be 1.fGap:      = rtFlash + 18              ; duration of one blink (can be longer, when short then it repeats).fState:    = rtFlash + 19              ; shall be 1rtHollis2:         WaitUntil  syncid_186         Frame #60,0          ExeSwapPC  vfade.run2, dummy, 0, 8, 24, 1         EndF         WaitUntil  syncid_17C         Frame #40,0           ExeSwapIX  egl.border, #0000, #0001, 24,8,0           ExeSwapIX  poke, set_vram0, set_vram1, 24,8,0         EndF         Frame #20,0           ExeSwapIX  egl.border, #0000, #0001, 8,8,0           ExeSwapIX  poke, set_vram0, set_vram1, 8,8,0         EndF         Frame #1f,0           ExeSwapIX  egl.border, #0000, #0007, 2,2,0           ExeSwapPC  screen.hollis2.attrs,dummy,0,1,#ff,1           ExeSwapIX  poke, set_vram0, set_vram1, 2,2,0         EndF;--------         WaitUntil  syncid_190         Frame 3*32,0           ExeSwapIX  egl.border, #0000, #0007, 24,8,0           ExeSwapIX  poke, set_vram0, set_vram1, 24,8,0         EndF         Frame 5*16,0           ExeSwapIX  egl.border, #0000, #0007, 8,8,0           ExeSwapIX  poke, set_vram0, set_vram1, 8,8,0         EndF         Frame 5*8,0           ExeSwapIX  egl.border, #0000, #0007, 4,4,0           ExeSwapIX  poke, set_vram0, set_vram1, 4,4,0         EndF         Frame 4*4,0           ExeSwapIX  egl.border, #0000, #0007, 2,2,0           ExeSwapIX  poke, set_vram0, set_vram1, 2,2,0         EndF         Idle/*testvfd:         ld      a,#ff         ld      ix,vfade.hdiTest         jp      vfade.init2*/modrotoidpage:         jr      nc,.p         ld      a,(rotoid.run.vpage+1)         ld      (ix+0),a         xor     #0a         ld      (.p+1),a         ret.p:      ld      a,#aa         ld      (ix+0),a         ret;-------------------------------------------------------------------------------machine:  db     0.cpu:     db     0frames:   dw     0fps:      db     0page:     db     0memReads: dw     0                ; speed of bank1dbg:.border:  db     0;-------------------------------------------------------------------------------regsp:    ds     #40stackInt: ds     #40stackStart:;-------------------------------------------------------------------------------;--- resources        include "demo/vscroll/vscroll.a80";        align   #100        include "libs/vram_fade.a80"load:;--- rotoid         include "demo/rotoid/rotoid.a80";--- texts         include "demo/fzcommand.a80"         include "demo/vprint.a80"         IF  $>imvct             LUA                 sj.exit(0)             ENDLUA         ENDIFreload:;------------------------------------------------------; rotoid data;------------------------------------------------------;---- scene and object data (max 16k)        ORG      #c000        PAGE     0        MODULE   rotoid        include "demo/data/rotoid/_rt_objects.a80 "        include "demo/data/rotoid/_rt_scenes.a80"        ENDMODULEp0free:        DISPLAY "Scene and object free memory:",$10000-$;-------        display "reload:",reload        display "p0free:",p0free        ORG  reload        include "libs/rsc_load.a80";        display "rotoid core start :",rotoid.init, " len:",$-rotoid._rt         savesna "main.sna",start         display "main exec start:",start         page    0;         savebin "bin/p0.bin",#c000,#4000         savebin "bin/main.bin",start,#10000-start;         savebin "bin/p2s.bin",start,#c000-start         page    1         savebin "bin/p1.bin",#c000,#4000         page    2         savebin "bin/p2.bin",#c000,#4000         page    3         savebin "bin/p3.bin",#c000,#4000         page    4         savebin "bin/p4.bin",#c000,#4000         page    5;         savebin "bin/p5.bin",#c000,#4000         page    6         savebin "bin/p6.bin",#c000,#4000         page    7         savebin "bin/p7.bin",#c000,#4000;        MCall screen.invader1a;        MCall screen.invader3/*         Frame #4,0          ExeRun  egl.clearatr,bpx_intro         EndF         MCall screen.invader1b*//*         Frame #300,0          ExeRun  vfade.run1, vfade.data          ExeRun  vfade.line, vfade.lnBadpix;          ExeWait egl.attwin, bpx_intrd, #70;         EndF         EndAtFrame #a0         Frame #4,0          ExeRun  egl.clearatr,bpx_intro         EndF;         MCall screen.badpixel2         Frame #100,0          ExeRun  vfade.run1, vfade.data          ExeRun  vfade.seqRun, vfade.sqBadpix         EndF*/; darkness text view/*         MCall screen.darkness                        ; test of fzx print routine         Frame #280,0          ExeRun  vfade.run1, vfade.data          ExeRun  vfade.line, vfade.lnDark          ExeWait egl.clearatr, atrDarkness1,  #00+#28          ExeWait egl.clearatr, atrDarkness2,  #60+#28          ExeWait egl.clearatr, atrDarkness3,  #c0+#28          ExeWait egl.clearatr, atrDarkness4, #120+#28         EndF         Frame 50,0          ExePeriodic egl.attwin  , atrDarknessw, #100         EndF         Frame #80,0          ExeRun  egl.clearatr, atrDarknessf          ExeRun  egl.attwin  , atrDarknessw2          ExeWait egl.attwin  , atrDarknessw3, #70         EndF*/; narcissus helmet/*         MCall screen.helmet         Frame #280,0          ExeRun  vfade.run1, vfade.data          ExeRun  vfade.seqRun, vfade.sqHelmet          ExeWait egl.atrFade   , #5800, #270          ExeWait egl.atrFadeP7 , #d800, #270         EndF*/; narcissus computer wake up/*         MCall screen.computer         Frame #80,0          ExeRun  vfade.run1, vfade.data          ExeRun  vfade.line, vfade.lnComp1         EndF         Frame #130,0          ExeRun  vfade.run1, vfade.data          ExeRun  vfade.line, vfade.lnComp2         EndF       Frame #ffff,0        ExeRun egl.border,#0505        ExeRun egl.border,#0501        ExeZ80start #0120           ld a,r           out (#fe),a           ld  c,xh2          ld  b,xl1          djnz 1B           dec  c           jr   nz,2B           xor  a           out  (#fe),a        ExeZ80end       EndF       Restart*/